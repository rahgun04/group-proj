
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		reg    [35:0]		GPIO
);

	wire [31:0] SAMPLE;
	wire [31:0] FILT_OUT_H;
	wire [31:0] FILT_OUT_L;
	wire SAMPLE_CLK;
	reg i2c_scl_in;
	reg i2c_scl_oe;
	reg i2c_sda_in;
	reg i2c_sda_oe;

//=======================================================
//  REG/WIRE declarations
//=======================================================


always @* begin
	i2c_sda_in = GPIO[0];
	GPIO[0] =  i2c_sda_oe ? 1'b0 : 1'bz;
	i2c_scl_in = GPIO[1];
	GPIO[1] =  i2c_scl_oe ? 1'b0 : 1'bz;
end 

unsaved u0(
	.clk_clk															(MAX10_CLK1_50),
	.in_h_external_connection_export				(FILT_OUT_H),
	.in_l_external_connection_export				(FILT_OUT_L),
	.led_external_connection_export							(LEDR[9:0]),
	.out0_external_connection_export				(SAMPLE),
	.reset_reset_n													(1'b1),
	.sample_clk_external_connection_export (SAMPLE_CLK),
	.i2c_0_i2c_serial_sda_in                            (i2c_sda_in),                            //                     i2c_0_i2c_serial.sda_in
	.i2c_0_i2c_serial_scl_in                            (i2c_scl_in),                            //                                     .scl_in
	.i2c_0_i2c_serial_sda_oe                            (i2c_sda_oe),                            //                                     .sda_oe
	.i2c_0_i2c_serial_scl_oe  							(i2c_scl_oe)
	);

fir filter(
	.sample (SAMPLE),
	.out_h (FILT_OUT_H),
	.out_l (FILT_OUT_L),
	.new_sample(SAMPLE_CLK),
	.clk(MAX10_CLK1_50)
	);

	//always @* begin
	//	GPIO = {36{SAMPLE_CLK}};
	//end
	
//=======================================================
//  Structural coding
//=======================================================



endmodule
