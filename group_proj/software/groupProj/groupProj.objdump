
groupProj.elf:     file format elf32-littlenios2
groupProj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000037d4 memsz 0x000037d4 flags r-x
    LOAD off    0x000047f4 vaddr 0x000137f4 paddr 0x000138e4 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000049d4 vaddr 0x000139d4 paddr 0x000139d4 align 2**12
         filesz 0x00000000 memsz 0x00000084 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000048e4  2**0
                  CONTENTS
  2 .text         00003654  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  00013674  00013674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  000137f4  000138e4  000047f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000084  000139d4  000139d4  000049d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00013a58  00013a58  000048e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000048e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004f0  00000000  00000000  00004908  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000065e0  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026c9  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c3c  00000000  00000000  0000daa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000858  00000000  00000000  000106e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017d2  00000000  00000000  00010f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000060f0  00000000  00000000  0001270a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000187fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000890  00000000  00000000  00018840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a6ad  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001a6b0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a6b3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a6b4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001a6b5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001a6be  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001a6c7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0001a6d7  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00090513  00000000  00000000  0001a703  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00013674 l    d  .rodata	00000000 .rodata
000137f4 l    d  .rwdata	00000000 .rwdata
000139d4 l    d  .bss	00000000 .bss
00013a58 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../groupProj_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Kalman.c
00000000 l    df *ABS*	00000000 MPU6050.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012d18 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000137f4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000134bc g     F .text	0000002c alt_main
00012c68 g     F .text	00000080 _puts_r
000138e4 g       *ABS*	00000000 __flash_rwdata_start
00012c1c g     F .text	0000004c printf
00010d54 g     F .text	00000440 .hidden __divsf3
000102c8 g     F .text	000000c4 init_MPU
00011aa8 g     F .text	00000070 .hidden __fixsfsi
000134e8 g     F .text	00000038 alt_putstr
000138dc g     O .rwdata	00000004 jtag_uart
0001366c g     F .text	00000008 altera_nios2_gen2_irq_init
000139d8 g     O .bss	00000002 AccY
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000139f8 g     O .bss	00000004 errno
00010724 g     F .text	0000003c init_I2C
00013a00 g     O .bss	00000004 alt_argv
0001b8d4 g       *ABS*	00000000 _gp
00013520 g     F .text	00000004 usleep
000115c4 g     F .text	000004e4 .hidden __subsf3
0001260c g     F .text	000000dc .hidden __floatsidf
0001038c g     F .text	0000003c get_x_accel_MPU
00012ce8 g     F .text	00000014 puts
00012be0 g     F .text	0000003c _printf_r
00012afc g     F .text	00000064 .hidden __udivsi3
00013a08 g     O .bss	00000028 rollK
000139dc g     O .bss	00000008 accZ
00013a30 g     O .bss	00000028 pitchK
000126e8 g     F .text	00000110 .hidden __extendsfdf2
00010440 g     F .text	0000003c get_x_gyro_MPU
000138d4 g     O .rwdata	00000004 _global_impure_ptr
00013a58 g       *ABS*	00000000 __bss_end
0001009c g     F .text	0000022c getAngle
000104b8 g     F .text	0000003c get_z_gyro_MPU
00013664 g     F .text	00000004 alt_dcache_flush_all
000138e4 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00013524 g     F .text	00000060 write
000137f4 g       *ABS*	00000000 __ram_rodata_end
00012b60 g     F .text	00000058 .hidden __umodsi3
00013a58 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000129a0 g     F .text	00000064 .hidden __clzsi2
000135a8 g     F .text	00000034 altera_avalon_jtag_uart_write
00012d84 g     F .text	0000052c ___vfprintf_internal_r
000139e4 g     O .bss	00000002 AccZ
00010020 g     F .text	0000003c _start
00010404 g     F .text	0000003c get_z_accel_MPU
000135a4 g     F .text	00000004 alt_sys_init
00011b18 g     F .text	00000124 .hidden __floatsisf
00012bb8 g     F .text	00000028 .hidden __mulsi3
000137f4 g       *ABS*	00000000 __ram_rwdata_start
00013674 g       *ABS*	00000000 __ram_rodata_start
000107f8 g     F .text	00000094 write_byte_MPU
000103c8 g     F .text	0000003c get_y_accel_MPU
000135dc g     F .text	00000088 alt_busy_sleep
00013a58 g       *ABS*	00000000 __alt_stack_base
00011c3c g     F .text	000009d0 .hidden __divdf3
0001005c g     F .text	00000040 KalmanInit
000132cc g     F .text	000000b8 __sfvwrite_small_dev
000139d4 g       *ABS*	00000000 __bss_start
00010534 g     F .text	000001f0 main
000139fc g     O .bss	00000004 alt_envp
000104f4 g     F .text	00000040 atan2HW
000127f8 g     F .text	000001a8 .hidden __truncdfsf2
000138e0 g     O .rwdata	00000004 alt_errno
00012a04 g     F .text	00000084 .hidden __divsi3
00011194 g     F .text	00000430 .hidden __mulsf3
00013674 g       *ABS*	00000000 __flash_rodata_start
000139e6 g     O .bss	00000002 AccX
00013584 g     F .text	00000020 alt_irq_init
000139d4 g     O .bss	00000001 dev_addr
000136f4 g     O .rodata	00000100 .hidden __clz_tab
00013384 g     F .text	00000058 _write_r
000138d8 g     O .rwdata	00000004 _impure_ptr
00013a04 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000138e4 g       *ABS*	00000000 _edata
00013a58 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00012a88 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
000139e8 g     O .bss	00000008 accY
0001000c g       .entry	00000000 _exit
0001047c g     F .text	0000003c get_y_gyro_MPU
00012cfc g     F .text	0000001c strlen
00013668 g     F .text	00000004 alt_icache_flush_all
000139f0 g     O .bss	00000008 accX
000132b0 g     F .text	0000001c __vfprintf_internal
0001088c g     F .text	000004c8 .hidden __addsf3
00010760 g     F .text	00000098 read_byte_MPU
000133dc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6ae3514 	ori	gp,gp,47316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	108e7514 	ori	r2,r2,14804

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18ce9614 	ori	r3,r3,14936

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00133dc0 	call	133dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00134bc0 	call	134bc <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <KalmanInit>:



void KalmanInit(KalmanInstance *inst) {
    /* We will set the variables like so, these can also be tuned by the user */
	inst->Q_angle = 0.0001f;
   1005c:	008e34b4 	movhi	r2,14546
   10060:	10adc5c4 	addi	r2,r2,-18665
   10064:	20800015 	stw	r2,0(r4)
	inst->Q_bias = 0.003f;
   10068:	008ed174 	movhi	r2,15173
   1006c:	10a6e984 	addi	r2,r2,-25690
   10070:	20800115 	stw	r2,4(r4)
	inst->R_measure = 0.1f;
   10074:	008f7374 	movhi	r2,15821
   10078:	10b33344 	addi	r2,r2,-13107
   1007c:	20800215 	stw	r2,8(r4)

	inst->angle = 0.0f; // Reset the angle
   10080:	20000315 	stw	zero,12(r4)
	inst->bias = 0.0f; // Reset bias
   10084:	20000415 	stw	zero,16(r4)

	inst->P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
   10088:	20000615 	stw	zero,24(r4)
	inst->P[0][1] = 0.0f;
   1008c:	20000715 	stw	zero,28(r4)
	inst->P[1][0] = 0.0f;
   10090:	20000815 	stw	zero,32(r4)
	inst->P[1][1] = 0.0f;
   10094:	20000915 	stw	zero,36(r4)
   10098:	f800283a 	ret

0001009c <getAngle>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   1009c:	defff404 	addi	sp,sp,-48
   100a0:	dfc00b15 	stw	ra,44(sp)
   100a4:	df000a15 	stw	fp,40(sp)
   100a8:	dd800815 	stw	r22,32(sp)
   100ac:	dd400715 	stw	r21,28(sp)
   100b0:	dd000615 	stw	r20,24(sp)
   100b4:	dcc00515 	stw	r19,20(sp)
   100b8:	dc800415 	stw	r18,16(sp)
   100bc:	dc400315 	stw	r17,12(sp)
   100c0:	dc000215 	stw	r16,8(sp)
   100c4:	ddc00915 	stw	r23,36(sp)
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100c8:	25c00417 	ldw	r23,16(r4)
	inst->P[1][0] = 0.0f;
	inst->P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   100cc:	2811883a 	mov	r8,r5
   100d0:	2021883a 	mov	r16,r4
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100d4:	b80b883a 	mov	r5,r23
   100d8:	3009883a 	mov	r4,r6
	inst->P[1][0] = 0.0f;
	inst->P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   100dc:	3825883a 	mov	r18,r7
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100e0:	da000115 	stw	r8,4(sp)
   100e4:	00115c40 	call	115c4 <__subsf3>
	inst->angle += dt * inst->rate;
   100e8:	900b883a 	mov	r5,r18
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100ec:	80800515 	stw	r2,20(r16)
	inst->angle += dt * inst->rate;
   100f0:	1009883a 	mov	r4,r2
   100f4:	00111940 	call	11194 <__mulsf3>
   100f8:	81400317 	ldw	r5,12(r16)
   100fc:	1009883a 	mov	r4,r2
   10100:	001088c0 	call	1088c <__addsf3>

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10104:	87000917 	ldw	fp,36(r16)
   10108:	9009883a 	mov	r4,r18

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
	inst->angle += dt * inst->rate;
   1010c:	102b883a 	mov	r21,r2

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10110:	e00b883a 	mov	r5,fp
   10114:	00111940 	call	11194 <__mulsf3>
   10118:	84c00717 	ldw	r19,28(r16)
   1011c:	85800817 	ldw	r22,32(r16)
   10120:	1009883a 	mov	r4,r2
   10124:	980b883a 	mov	r5,r19
   10128:	1029883a 	mov	r20,r2
   1012c:	00115c40 	call	115c4 <__subsf3>
   10130:	b00b883a 	mov	r5,r22
   10134:	1009883a 	mov	r4,r2
   10138:	00115c40 	call	115c4 <__subsf3>
   1013c:	81400017 	ldw	r5,0(r16)
   10140:	1009883a 	mov	r4,r2
   10144:	001088c0 	call	1088c <__addsf3>
   10148:	900b883a 	mov	r5,r18
   1014c:	1009883a 	mov	r4,r2
   10150:	00111940 	call	11194 <__mulsf3>
   10154:	81400617 	ldw	r5,24(r16)
   10158:	1009883a 	mov	r4,r2
   1015c:	001088c0 	call	1088c <__addsf3>
	inst->P[0][1] -= dt * inst->P[1][1];
   10160:	a00b883a 	mov	r5,r20
   10164:	9809883a 	mov	r4,r19
	inst->rate = newRate - inst->bias;
	inst->angle += dt * inst->rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10168:	1023883a 	mov	r17,r2
	inst->P[0][1] -= dt * inst->P[1][1];
   1016c:	00115c40 	call	115c4 <__subsf3>
	inst->P[1][0] -= dt * inst->P[1][1];
   10170:	a00b883a 	mov	r5,r20
   10174:	b009883a 	mov	r4,r22
	inst->angle += dt * inst->rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
	inst->P[0][1] -= dt * inst->P[1][1];
   10178:	1027883a 	mov	r19,r2
	inst->P[1][0] -= dt * inst->P[1][1];
   1017c:	00115c40 	call	115c4 <__subsf3>
	inst->P[1][1] += inst->Q_bias * dt;
   10180:	81400117 	ldw	r5,4(r16)
   10184:	9009883a 	mov	r4,r18

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
	inst->P[0][1] -= dt * inst->P[1][1];
	inst->P[1][0] -= dt * inst->P[1][1];
   10188:	102d883a 	mov	r22,r2
	inst->P[1][1] += inst->Q_bias * dt;
   1018c:	00111940 	call	11194 <__mulsf3>
   10190:	e00b883a 	mov	r5,fp
   10194:	1009883a 	mov	r4,r2
   10198:	001088c0 	call	1088c <__addsf3>

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
   1019c:	81400217 	ldw	r5,8(r16)
   101a0:	8809883a 	mov	r4,r17
   101a4:	d8800015 	stw	r2,0(sp)
   101a8:	001088c0 	call	1088c <__addsf3>
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101ac:	8809883a 	mov	r4,r17
   101b0:	100b883a 	mov	r5,r2
	inst->P[1][1] += inst->Q_bias * dt;

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
   101b4:	1025883a 	mov	r18,r2
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101b8:	0010d540 	call	10d54 <__divsf3>
    K[1] = inst->P[1][0] / S;
   101bc:	900b883a 	mov	r5,r18
   101c0:	b009883a 	mov	r4,r22
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101c4:	1029883a 	mov	r20,r2
    K[1] = inst->P[1][0] / S;
   101c8:	0010d540 	call	10d54 <__divsf3>

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101cc:	da000117 	ldw	r8,4(sp)
   101d0:	a80b883a 	mov	r5,r21
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
    K[1] = inst->P[1][0] / S;
   101d4:	1025883a 	mov	r18,r2

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101d8:	4009883a 	mov	r4,r8
   101dc:	00115c40 	call	115c4 <__subsf3>
    /* Step 6 */
    inst->angle += K[0] * y;
   101e0:	a009883a 	mov	r4,r20
   101e4:	100b883a 	mov	r5,r2
    K[0] = inst->P[0][0] / S;
    K[1] = inst->P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101e8:	1039883a 	mov	fp,r2
    /* Step 6 */
    inst->angle += K[0] * y;
   101ec:	00111940 	call	11194 <__mulsf3>
   101f0:	a80b883a 	mov	r5,r21
   101f4:	1009883a 	mov	r4,r2
   101f8:	001088c0 	call	1088c <__addsf3>
    inst->bias += K[1] * y;
   101fc:	e00b883a 	mov	r5,fp
   10200:	9009883a 	mov	r4,r18

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
    /* Step 6 */
    inst->angle += K[0] * y;
   10204:	80800315 	stw	r2,12(r16)
   10208:	102b883a 	mov	r21,r2
    inst->bias += K[1] * y;
   1020c:	00111940 	call	11194 <__mulsf3>
   10210:	b80b883a 	mov	r5,r23
   10214:	1009883a 	mov	r4,r2
   10218:	001088c0 	call	1088c <__addsf3>
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   1021c:	a00b883a 	mov	r5,r20
   10220:	8809883a 	mov	r4,r17
    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
    /* Step 6 */
    inst->angle += K[0] * y;
    inst->bias += K[1] * y;
   10224:	80800415 	stw	r2,16(r16)
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   10228:	00111940 	call	11194 <__mulsf3>
   1022c:	8809883a 	mov	r4,r17
   10230:	100b883a 	mov	r5,r2
   10234:	00115c40 	call	115c4 <__subsf3>
    inst->P[0][1] -= K[0] * P01_temp;
   10238:	a00b883a 	mov	r5,r20
   1023c:	9809883a 	mov	r4,r19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   10240:	80800615 	stw	r2,24(r16)
    inst->P[0][1] -= K[0] * P01_temp;
   10244:	00111940 	call	11194 <__mulsf3>
   10248:	9809883a 	mov	r4,r19
   1024c:	100b883a 	mov	r5,r2
   10250:	00115c40 	call	115c4 <__subsf3>
    inst->P[1][0] -= K[1] * P00_temp;
   10254:	900b883a 	mov	r5,r18
   10258:	8809883a 	mov	r4,r17
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
    inst->P[0][1] -= K[0] * P01_temp;
   1025c:	80800715 	stw	r2,28(r16)
    inst->P[1][0] -= K[1] * P00_temp;
   10260:	00111940 	call	11194 <__mulsf3>
   10264:	b009883a 	mov	r4,r22
   10268:	100b883a 	mov	r5,r2
   1026c:	00115c40 	call	115c4 <__subsf3>
    inst->P[1][1] -= K[1] * P01_temp;
   10270:	900b883a 	mov	r5,r18
   10274:	9809883a 	mov	r4,r19
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
    inst->P[0][1] -= K[0] * P01_temp;
    inst->P[1][0] -= K[1] * P00_temp;
   10278:	80800815 	stw	r2,32(r16)
    inst->P[1][1] -= K[1] * P01_temp;
   1027c:	00111940 	call	11194 <__mulsf3>
   10280:	d8c00017 	ldw	r3,0(sp)
   10284:	100b883a 	mov	r5,r2
   10288:	1809883a 	mov	r4,r3
   1028c:	00115c40 	call	115c4 <__subsf3>
   10290:	80800915 	stw	r2,36(r16)

    return inst->angle;
};
   10294:	a805883a 	mov	r2,r21
   10298:	dfc00b17 	ldw	ra,44(sp)
   1029c:	df000a17 	ldw	fp,40(sp)
   102a0:	ddc00917 	ldw	r23,36(sp)
   102a4:	dd800817 	ldw	r22,32(sp)
   102a8:	dd400717 	ldw	r21,28(sp)
   102ac:	dd000617 	ldw	r20,24(sp)
   102b0:	dcc00517 	ldw	r19,20(sp)
   102b4:	dc800417 	ldw	r18,16(sp)
   102b8:	dc400317 	ldw	r17,12(sp)
   102bc:	dc000217 	ldw	r16,8(sp)
   102c0:	dec00c04 	addi	sp,sp,48
   102c4:	f800283a 	ret

000102c8 <init_MPU>:
	write_byte_MPU(27, &clear);
	return 0;
}
*/

ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   102c8:	defffe04 	addi	sp,sp,-8
   102cc:	dfc00115 	stw	ra,4(sp)
	init_I2C();
   102d0:	00107240 	call	10724 <init_I2C>
	alt_u8 buf = 0x00;

	read_byte_MPU(117, &buf);
   102d4:	d9400084 	addi	r5,sp,2
   102d8:	01001d44 	movi	r4,117
}
*/

ALT_AVALON_I2C_STATUS_CODE init_MPU(){
	init_I2C();
	alt_u8 buf = 0x00;
   102dc:	d8000085 	stb	zero,2(sp)

	read_byte_MPU(117, &buf);
   102e0:	00107600 	call	10760 <read_byte_MPU>

	if (buf == 0x68){
   102e4:	d9400083 	ldbu	r5,2(sp)
   102e8:	00801a04 	movi	r2,104
   102ec:	2880181e 	bne	r5,r2,10350 <init_MPU+0x88>
		printf("WhoAmI Passed\n");
   102f0:	01000074 	movhi	r4,1
   102f4:	210d9d04 	addi	r4,r4,13940
   102f8:	0012ce80 	call	12ce8 <puts>

		return -1;
	}

	alt_u8 clear = 0;
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   102fc:	d9400044 	addi	r5,sp,1
   10300:	01001ac4 	movi	r4,107
		printf("WhoAmI Failed: %x\n", buf);

		return -1;
	}

	alt_u8 clear = 0;
   10304:	d8000045 	stb	zero,1(sp)
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   10308:	00107f80 	call	107f8 <write_byte_MPU>
	alt_u8 sleep;
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   1030c:	d80b883a 	mov	r5,sp
   10310:	01001ac4 	movi	r4,107
   10314:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   10318:	d80b883a 	mov	r5,sp
   1031c:	01001ac4 	movi	r4,107
   10320:	00107600 	call	10760 <read_byte_MPU>
	printf("Sleep Status: %x\n", sleep);
   10324:	d9400003 	ldbu	r5,0(sp)
   10328:	01000074 	movhi	r4,1
   1032c:	210da104 	addi	r4,r4,13956
   10330:	0012c1c0 	call	12c1c <printf>
	if ((sleep & 0x20)!=0){
   10334:	d8800003 	ldbu	r2,0(sp)
   10338:	1080080c 	andi	r2,r2,32
   1033c:	10000926 	beq	r2,zero,10364 <init_MPU+0x9c>
		printf("It's Sleeping\n");
   10340:	01000074 	movhi	r4,1
   10344:	210dab04 	addi	r4,r4,13996
   10348:	0012ce80 	call	12ce8 <puts>
   1034c:	00000506 	br	10364 <init_MPU+0x9c>
	read_byte_MPU(117, &buf);

	if (buf == 0x68){
		printf("WhoAmI Passed\n");
	}else{
		printf("WhoAmI Failed: %x\n", buf);
   10350:	01000074 	movhi	r4,1
   10354:	210da604 	addi	r4,r4,13976
   10358:	0012c1c0 	call	12c1c <printf>

		return -1;
   1035c:	00bfffc4 	movi	r2,-1
   10360:	00000706 	br	10380 <init_MPU+0xb8>
	printf("Sleep Status: %x\n", sleep);
	if ((sleep & 0x20)!=0){
		printf("It's Sleeping\n");
	}

	write_byte_MPU(28, &clear);
   10364:	d9400044 	addi	r5,sp,1
   10368:	01000704 	movi	r4,28
   1036c:	00107f80 	call	107f8 <write_byte_MPU>
	write_byte_MPU(27, &clear);
   10370:	d9400044 	addi	r5,sp,1
   10374:	010006c4 	movi	r4,27
   10378:	00107f80 	call	107f8 <write_byte_MPU>
	return 0;
   1037c:	0005883a 	mov	r2,zero

}
   10380:	dfc00117 	ldw	ra,4(sp)
   10384:	dec00204 	addi	sp,sp,8
   10388:	f800283a 	ret

0001038c <get_x_accel_MPU>:

alt_16 get_x_accel_MPU(){
   1038c:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   10390:	d80b883a 	mov	r5,sp
   10394:	01000ec4 	movi	r4,59
	write_byte_MPU(27, &clear);
	return 0;

}

alt_16 get_x_accel_MPU(){
   10398:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   1039c:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
   103a0:	d9400044 	addi	r5,sp,1
   103a4:	01000f04 	movi	r4,60
   103a8:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   103ac:	d8800003 	ldbu	r2,0(sp)
   103b0:	d8c00043 	ldbu	r3,1(sp)
   103b4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   103b8:	10c4b03a 	or	r2,r2,r3
   103bc:	dfc00117 	ldw	ra,4(sp)
   103c0:	dec00204 	addi	sp,sp,8
   103c4:	f800283a 	ret

000103c8 <get_y_accel_MPU>:

alt_16 get_y_accel_MPU(){
   103c8:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   103cc:	d80b883a 	mov	r5,sp
   103d0:	01000f44 	movi	r4,61
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_accel_MPU(){
   103d4:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   103d8:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
   103dc:	d9400044 	addi	r5,sp,1
   103e0:	01000f84 	movi	r4,62
   103e4:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   103e8:	d8800003 	ldbu	r2,0(sp)
   103ec:	d8c00043 	ldbu	r3,1(sp)
   103f0:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   103f4:	10c4b03a 	or	r2,r2,r3
   103f8:	dfc00117 	ldw	ra,4(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <get_z_accel_MPU>:

alt_16 get_z_accel_MPU(){
   10404:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   10408:	d80b883a 	mov	r5,sp
   1040c:	01000fc4 	movi	r4,63
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_accel_MPU(){
   10410:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   10414:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Z + 1, &lsb);
   10418:	d9400044 	addi	r5,sp,1
   1041c:	01001004 	movi	r4,64
   10420:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10424:	d8800003 	ldbu	r2,0(sp)
   10428:	d8c00043 	ldbu	r3,1(sp)
   1042c:	1004923a 	slli	r2,r2,8
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}
   10430:	10c4b03a 	or	r2,r2,r3
   10434:	dfc00117 	ldw	ra,4(sp)
   10438:	dec00204 	addi	sp,sp,8
   1043c:	f800283a 	ret

00010440 <get_x_gyro_MPU>:


alt_16 get_x_gyro_MPU(){
   10440:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10444:	d80b883a 	mov	r5,sp
   10448:	010010c4 	movi	r4,67
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}


alt_16 get_x_gyro_MPU(){
   1044c:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10450:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
   10454:	d9400044 	addi	r5,sp,1
   10458:	01001104 	movi	r4,68
   1045c:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10460:	d8800003 	ldbu	r2,0(sp)
   10464:	d8c00043 	ldbu	r3,1(sp)
   10468:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   1046c:	10c4b03a 	or	r2,r2,r3
   10470:	dfc00117 	ldw	ra,4(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <get_y_gyro_MPU>:

alt_16 get_y_gyro_MPU(){
   1047c:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   10480:	d80b883a 	mov	r5,sp
   10484:	01001144 	movi	r4,69
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_gyro_MPU(){
   10488:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   1048c:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
   10490:	d9400044 	addi	r5,sp,1
   10494:	01001184 	movi	r4,70
   10498:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   1049c:	d8800003 	ldbu	r2,0(sp)
   104a0:	d8c00043 	ldbu	r3,1(sp)
   104a4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   104a8:	10c4b03a 	or	r2,r2,r3
   104ac:	dfc00117 	ldw	ra,4(sp)
   104b0:	dec00204 	addi	sp,sp,8
   104b4:	f800283a 	ret

000104b8 <get_z_gyro_MPU>:

alt_16 get_z_gyro_MPU(){
   104b8:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   104bc:	d80b883a 	mov	r5,sp
   104c0:	010011c4 	movi	r4,71
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_gyro_MPU(){
   104c4:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   104c8:	00107600 	call	10760 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Z + 1, &lsb);
   104cc:	d9400044 	addi	r5,sp,1
   104d0:	01001204 	movi	r4,72
   104d4:	00107600 	call	10760 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   104d8:	d8800003 	ldbu	r2,0(sp)
   104dc:	d8c00043 	ldbu	r3,1(sp)
   104e0:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   104e4:	10c4b03a 	or	r2,r2,r3
   104e8:	dfc00117 	ldw	ra,4(sp)
   104ec:	dec00204 	addi	sp,sp,8
   104f0:	f800283a 	ret

000104f4 <atan2HW>:
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;
KalmanInstance pitchK, rollK;


float atan2HW(float a, float b){
   104f4:	deffff04 	addi	sp,sp,-4
	alt_u32 a_param = *(alt_u32*) &a;
	alt_u32 b_param = *(alt_u32*) &b;
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_A_BASE, a_param);
   104f8:	008000b4 	movhi	r2,2
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;
KalmanInstance pitchK, rollK;


float atan2HW(float a, float b){
   104fc:	dfc00015 	stw	ra,0(sp)
	alt_u32 a_param = *(alt_u32*) &a;
	alt_u32 b_param = *(alt_u32*) &b;
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_A_BASE, a_param);
   10500:	10840804 	addi	r2,r2,4128
   10504:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_B_BASE, b_param);
   10508:	008000b4 	movhi	r2,2
   1050c:	10840404 	addi	r2,r2,4112
   10510:	11400035 	stwio	r5,0(r2)
	float retFloat;
	usleep(1);
   10514:	01000044 	movi	r4,1
   10518:	00135200 	call	13520 <usleep>
	alt_u32 ret = IORD_ALTERA_AVALON_PIO_DATA(ATAN2_Q_BASE);
	retFloat = *(float*) &ret;
	return retFloat;
}
   1051c:	008000b4 	movhi	r2,2
   10520:	10840004 	addi	r2,r2,4096
   10524:	10800037 	ldwio	r2,0(r2)
   10528:	dfc00017 	ldw	ra,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <main>:


int main()
{
	alt_putstr("Hello from Nios II!\n");
   10534:	01000074 	movhi	r4,1
	return retFloat;
}


int main()
{
   10538:	defff204 	addi	sp,sp,-56
	alt_putstr("Hello from Nios II!\n");
   1053c:	210daf04 	addi	r4,r4,14012
	return retFloat;
}


int main()
{
   10540:	dfc00d15 	stw	ra,52(sp)
   10544:	dc400615 	stw	r17,24(sp)
   10548:	dc000515 	stw	r16,20(sp)
   1054c:	ddc00c15 	stw	r23,48(sp)
   10550:	dd800b15 	stw	r22,44(sp)
   10554:	dd400a15 	stw	r21,40(sp)
   10558:	dd000915 	stw	r20,36(sp)
   1055c:	dcc00815 	stw	r19,32(sp)
   10560:	dc800715 	stw	r18,28(sp)
	alt_putstr("Hello from Nios II!\n");
   10564:	00134e80 	call	134e8 <alt_putstr>

	/* Event loop never exits. */
	if (init_MPU() < 0){
   10568:	00102c80 	call	102c8 <init_MPU>
		return -1;
	}
	KalmanInit(&pitchK);
   1056c:	01000074 	movhi	r4,1
   10570:	210e8c04 	addi	r4,r4,14896
   10574:	001005c0 	call	1005c <KalmanInit>
	KalmanInit(&rollK);
   10578:	01000074 	movhi	r4,1
   1057c:	210e8204 	addi	r4,r4,14856
   10580:	001005c0 	call	1005c <KalmanInit>
	alt_u32 old = 0;
	alt_u32 old_2 = 0;
	usleep(2000000);
   10584:	010007f4 	movhi	r4,31
   10588:	21212004 	addi	r4,r4,-31616
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   1058c:	044000b4 	movhi	r17,2
	}
	KalmanInit(&pitchK);
	KalmanInit(&rollK);
	alt_u32 old = 0;
	alt_u32 old_2 = 0;
	usleep(2000000);
   10590:	00135200 	call	13520 <usleep>
	if (init_MPU() < 0){
		return -1;
	}
	KalmanInit(&pitchK);
	KalmanInit(&rollK);
	alt_u32 old = 0;
   10594:	0021883a 	mov	r16,zero
	alt_u32 old_2 = 0;
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10598:	8c443004 	addi	r17,r17,4288
   1059c:	8c800037 	ldwio	r18,0(r17)
		int dt = new - old;
		old = new;
		//printf("%d\n", dt);
		//old = new;
		AccZ =  get_z_accel_MPU();
   105a0:	00104040 	call	10404 <get_z_accel_MPU>
   105a4:	d0a0440d 	sth	r2,-32496(gp)
		AccX =  get_x_accel_MPU();
   105a8:	001038c0 	call	1038c <get_x_accel_MPU>
   105ac:	d0a0448d 	sth	r2,-32494(gp)
		AccY =  get_y_accel_MPU();
   105b0:	00103c80 	call	103c8 <get_y_accel_MPU>

		accZ = (double) AccZ;
   105b4:	d120440f 	ldh	r4,-32496(gp)
		old = new;
		//printf("%d\n", dt);
		//old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
   105b8:	102f883a 	mov	r23,r2
   105bc:	d0a0410d 	sth	r2,-32508(gp)

		accZ = (double) AccZ;
   105c0:	001260c0 	call	1260c <__floatsidf>
		accX = (double) AccX;
   105c4:	d120448f 	ldh	r4,-32494(gp)
		//old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
   105c8:	102d883a 	mov	r22,r2
   105cc:	182b883a 	mov	r21,r3
   105d0:	d0a04215 	stw	r2,-32504(gp)
   105d4:	d0e04315 	stw	r3,-32500(gp)
		accX = (double) AccX;
   105d8:	001260c0 	call	1260c <__floatsidf>
		accY = (double) AccY;
   105dc:	b93fffcc 	andi	r4,r23,65535
   105e0:	2120001c 	xori	r4,r4,32768
   105e4:	21200004 	addi	r4,r4,-32768
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
		accX = (double) AccX;
   105e8:	1029883a 	mov	r20,r2
   105ec:	1827883a 	mov	r19,r3
   105f0:	d0a04715 	stw	r2,-32484(gp)
   105f4:	d0e04815 	stw	r3,-32480(gp)
		accY = (double) AccY;
   105f8:	001260c0 	call	1260c <__floatsidf>

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(accX, accZ) * 180 / PI);
   105fc:	b009883a 	mov	r4,r22
   10600:	a80b883a 	mov	r5,r21
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;
   10604:	d0e04615 	stw	r3,-32488(gp)
   10608:	d0a04515 	stw	r2,-32492(gp)

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(accX, accZ) * 180 / PI);
   1060c:	00127f80 	call	127f8 <__truncdfsf2>
   10610:	a009883a 	mov	r4,r20
   10614:	980b883a 	mov	r5,r19
   10618:	102b883a 	mov	r21,r2
   1061c:	00127f80 	call	127f8 <__truncdfsf2>
   10620:	a80b883a 	mov	r5,r21
   10624:	1009883a 	mov	r4,r2
   10628:	00104f40 	call	104f4 <atan2HW>
   1062c:	0150cd34 	movhi	r5,17204
   10630:	1009883a 	mov	r4,r2
   10634:	00111940 	call	11194 <__mulsf3>
   10638:	1009883a 	mov	r4,r2
   1063c:	00126e80 	call	126e8 <__extendsfdf2>
   10640:	01947b34 	movhi	r6,20972
   10644:	01d00274 	movhi	r7,16393
   10648:	31a147c4 	addi	r6,r6,-31457
   1064c:	39c7ae04 	addi	r7,r7,7864
   10650:	1009883a 	mov	r4,r2
   10654:	180b883a 	mov	r5,r3
   10658:	0011c3c0 	call	11c3c <__divdf3>
   1065c:	1009883a 	mov	r4,r2
   10660:	180b883a 	mov	r5,r3
   10664:	00127f80 	call	127f8 <__truncdfsf2>
	alt_u32 old_2 = 0;
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
   10668:	9421c83a 	sub	r16,r18,r16
		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(accX, accZ) * 180 / PI);
   1066c:	1027883a 	mov	r19,r2

		//double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * (180/PI);
		float roll = 0.0f;
		old_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10670:	88800037 	ldwio	r2,0(r17)
		float p = getAngle(&pitchK, (float) pitch, (float)get_y_gyro_MPU()  / 131.0f, (float)dt/1000000.0f);
   10674:	001047c0 	call	1047c <get_y_gyro_MPU>
   10678:	8009883a 	mov	r4,r16
   1067c:	102b883a 	mov	r21,r2
   10680:	0011b180 	call	11b18 <__floatsisf>
   10684:	01525d34 	movhi	r5,18804
   10688:	29490004 	addi	r5,r5,9216
   1068c:	1009883a 	mov	r4,r2
   10690:	0010d540 	call	10d54 <__divsf3>
   10694:	a93fffcc 	andi	r4,r21,65535
   10698:	2120001c 	xori	r4,r4,32768
   1069c:	21200004 	addi	r4,r4,-32768
   106a0:	1029883a 	mov	r20,r2
   106a4:	0011b180 	call	11b18 <__floatsisf>
   106a8:	0150c0f4 	movhi	r5,17155
   106ac:	1009883a 	mov	r4,r2
   106b0:	0010d540 	call	10d54 <__divsf3>
   106b4:	01000074 	movhi	r4,1
   106b8:	a00f883a 	mov	r7,r20
   106bc:	100d883a 	mov	r6,r2
   106c0:	980b883a 	mov	r5,r19
   106c4:	210e8c04 	addi	r4,r4,14896
   106c8:	001009c0 	call	1009c <getAngle>
		int new_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   106cc:	88c00037 	ldwio	r3,0(r17)
		int delta = new_2 - old_2;
		//float r = getAngle(&rollK, (float)roll, (float)get_x_gyro_MPU()  / 131.0f, (float)dt/1000000.0f);
		float r = 0.0f;
		printf("%d, %d, %d, %d, %d, %d, %d, %d\n",  (int) p, (int) r, AccX, AccY, AccZ, (int)pitch, (int) roll, dt);
   106d0:	d560448f 	ldh	r21,-32494(gp)
   106d4:	1009883a 	mov	r4,r2
   106d8:	0011aa80 	call	11aa8 <__fixsfsi>
   106dc:	9809883a 	mov	r4,r19
   106e0:	1029883a 	mov	r20,r2
   106e4:	dc000415 	stw	r16,16(sp)
   106e8:	d8000315 	stw	zero,12(sp)
   106ec:	0011aa80 	call	11aa8 <__fixsfsi>
   106f0:	d8800215 	stw	r2,8(sp)
   106f4:	d0a0440f 	ldh	r2,-32496(gp)
   106f8:	01000074 	movhi	r4,1
   106fc:	a80f883a 	mov	r7,r21
   10700:	d8800115 	stw	r2,4(sp)
   10704:	d0a0410f 	ldh	r2,-32508(gp)
   10708:	000d883a 	mov	r6,zero
   1070c:	a00b883a 	mov	r5,r20
   10710:	d8800015 	stw	r2,0(sp)
   10714:	210db504 	addi	r4,r4,14036
   10718:	0012c1c0 	call	12c1c <printf>
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
		old = new;
   1071c:	9021883a 	mov	r16,r18
   10720:	003f9e06 	br	1059c <__alt_data_end+0xffff059c>

00010724 <init_I2C>:
 */
#include "i2c.h"
#include "system.h"

int init_I2C(){
	dev_addr = 0x68;
   10724:	00801a04 	movi	r2,104
   10728:	d0a04005 	stb	r2,-32512(gp)
	IOWR(I2C_EN_BASE, 0, 0);
   1072c:	008000b4 	movhi	r2,2
   10730:	10842404 	addi	r2,r2,4240
   10734:	10000035 	stwio	zero,0(r2)
	IOWR(I2C_RST_BASE, 0, 0xFF);
   10738:	008000b4 	movhi	r2,2
   1073c:	10842804 	addi	r2,r2,4256
   10740:	00c03fc4 	movi	r3,255
   10744:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_DEV_ADDR_BASE, 0, dev_addr);
   10748:	d0e04003 	ldbu	r3,-32512(gp)
   1074c:	008000b4 	movhi	r2,2
   10750:	10841404 	addi	r2,r2,4176
   10754:	10c00035 	stwio	r3,0(r2)
	return 0;
}
   10758:	0005883a 	mov	r2,zero
   1075c:	f800283a 	ret

00010760 <read_byte_MPU>:

int read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	int timeout = 0;
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0x00);
   10760:	008000b4 	movhi	r2,2
   10764:	10842804 	addi	r2,r2,4256
   10768:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
   1076c:	00c03fc4 	movi	r3,255
   10770:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
   10774:	008000b4 	movhi	r2,2
   10778:	21003fcc 	andi	r4,r4,255
   1077c:	10841804 	addi	r2,r2,4192
   10780:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 1);
   10784:	00c000b4 	movhi	r3,2
   10788:	00800044 	movi	r2,1
   1078c:	18c42004 	addi	r3,r3,4224
   10790:	18800035 	stwio	r2,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   10794:	018000b4 	movhi	r6,2
   10798:	31840c04 	addi	r6,r6,4144
   1079c:	30c00037 	ldwio	r3,0(r6)
   107a0:	010000b4 	movhi	r4,2
   107a4:	21040c04 	addi	r4,r4,4144
   107a8:	183ffc1e 	bne	r3,zero,1079c <__alt_data_end+0xffff079c>
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 1);
   107ac:	00c000b4 	movhi	r3,2
   107b0:	18c42404 	addi	r3,r3,4240
   107b4:	18800035 	stwio	r2,0(r3)
	IOWR(I2C_DEV_ADDR_BASE, 0, dev_addr);
	return 0;
}

int read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	int timeout = 0;
   107b8:	0005883a 	mov	r2,zero
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 1);
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 1);
	while((!IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE)) && timeout < 2000){
   107bc:	0181f404 	movi	r6,2000
   107c0:	21c00037 	ldwio	r7,0(r4)
   107c4:	3800031e 	bne	r7,zero,107d4 <read_byte_MPU+0x74>
   107c8:	11800226 	beq	r2,r6,107d4 <read_byte_MPU+0x74>
		timeout++;
   107cc:	10800044 	addi	r2,r2,1
   107d0:	003ffb06 	br	107c0 <__alt_data_end+0xffff07c0>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0x00);
   107d4:	18000035 	stwio	zero,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   107d8:	20c00037 	ldwio	r3,0(r4)
   107dc:	183ffe1e 	bne	r3,zero,107d8 <__alt_data_end+0xffff07d8>
	*ret = IORD_ALTERA_AVALON_PIO_DATA(I2C_MISO_BASE);
   107e0:	00c000b4 	movhi	r3,2
   107e4:	18c41004 	addi	r3,r3,4160
   107e8:	18c00037 	ldwio	r3,0(r3)
   107ec:	28c00005 	stb	r3,0(r5)
	//printf("%d\n", *ret);
	return (timeout > 1999)? 1:0;
   107f0:	1081f408 	cmpgei	r2,r2,2000
}
   107f4:	f800283a 	ret

000107f8 <write_byte_MPU>:

int write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	int timeout = 0;
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0x00);
   107f8:	00c000b4 	movhi	r3,2
   107fc:	18c42804 	addi	r3,r3,4256
   10800:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
   10804:	00803fc4 	movi	r2,255
   10808:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
   1080c:	00c000b4 	movhi	r3,2
   10810:	21003fcc 	andi	r4,r4,255
   10814:	18c41804 	addi	r3,r3,4192
   10818:	19000035 	stwio	r4,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 0);
   1081c:	00c000b4 	movhi	r3,2
   10820:	18c42004 	addi	r3,r3,4224
   10824:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_MOSI_BASE, *byte_in);
   10828:	29000003 	ldbu	r4,0(r5)
   1082c:	00c000b4 	movhi	r3,2
   10830:	18c41c04 	addi	r3,r3,4208
   10834:	19000035 	stwio	r4,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   10838:	014000b4 	movhi	r5,2
   1083c:	29440c04 	addi	r5,r5,4144
   10840:	28c00037 	ldwio	r3,0(r5)
   10844:	010000b4 	movhi	r4,2
   10848:	21040c04 	addi	r4,r4,4144
   1084c:	183ffc1e 	bne	r3,zero,10840 <__alt_data_end+0xffff0840>
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0xFF);
   10850:	00c000b4 	movhi	r3,2
   10854:	18c42404 	addi	r3,r3,4240
   10858:	18800035 	stwio	r2,0(r3)
	//printf("%d\n", *ret);
	return (timeout > 1999)? 1:0;
}

int write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	int timeout = 0;
   1085c:	0005883a 	mov	r2,zero
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_MOSI_BASE, *byte_in);
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0xFF);
	while((!IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE)) && timeout < 2000){
   10860:	0141f404 	movi	r5,2000
   10864:	21800037 	ldwio	r6,0(r4)
   10868:	3000031e 	bne	r6,zero,10878 <write_byte_MPU+0x80>
   1086c:	11400226 	beq	r2,r5,10878 <write_byte_MPU+0x80>
		timeout++;
   10870:	10800044 	addi	r2,r2,1
   10874:	003ffb06 	br	10864 <__alt_data_end+0xffff0864>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0x00);
   10878:	18000035 	stwio	zero,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   1087c:	20c00037 	ldwio	r3,0(r4)
   10880:	183ffe1e 	bne	r3,zero,1087c <__alt_data_end+0xffff087c>
	return (timeout > 1999)? 1:0;
   10884:	1081f408 	cmpgei	r2,r2,2000
}
   10888:	f800283a 	ret

0001088c <__addsf3>:
   1088c:	defffc04 	addi	sp,sp,-16
   10890:	2004d7fa 	srli	r2,r4,31
   10894:	280cd5fa 	srli	r6,r5,23
   10898:	dc000015 	stw	r16,0(sp)
   1089c:	00c02034 	movhi	r3,128
   108a0:	2020d5fa 	srli	r16,r4,23
   108a4:	280ed7fa 	srli	r7,r5,31
   108a8:	18ffffc4 	addi	r3,r3,-1
   108ac:	dc400115 	stw	r17,4(sp)
   108b0:	1908703a 	and	r4,r3,r4
   108b4:	194a703a 	and	r5,r3,r5
   108b8:	dfc00315 	stw	ra,12(sp)
   108bc:	dc800215 	stw	r18,8(sp)
   108c0:	14403fcc 	andi	r17,r2,255
   108c4:	84003fcc 	andi	r16,r16,255
   108c8:	200890fa 	slli	r4,r4,3
   108cc:	31803fcc 	andi	r6,r6,255
   108d0:	280a90fa 	slli	r5,r5,3
   108d4:	89c05026 	beq	r17,r7,10a18 <__addsf3+0x18c>
   108d8:	8185c83a 	sub	r2,r16,r6
   108dc:	00807a0e 	bge	zero,r2,10ac8 <__addsf3+0x23c>
   108e0:	30001e1e 	bne	r6,zero,1095c <__addsf3+0xd0>
   108e4:	28006d1e 	bne	r5,zero,10a9c <__addsf3+0x210>
   108e8:	208001cc 	andi	r2,r4,7
   108ec:	10000426 	beq	r2,zero,10900 <__addsf3+0x74>
   108f0:	208003cc 	andi	r2,r4,15
   108f4:	00c00104 	movi	r3,4
   108f8:	10c00126 	beq	r2,r3,10900 <__addsf3+0x74>
   108fc:	20c9883a 	add	r4,r4,r3
   10900:	2081002c 	andhi	r2,r4,1024
   10904:	10003926 	beq	r2,zero,109ec <__addsf3+0x160>
   10908:	84000044 	addi	r16,r16,1
   1090c:	00803fc4 	movi	r2,255
   10910:	80807826 	beq	r16,r2,10af4 <__addsf3+0x268>
   10914:	200891ba 	slli	r4,r4,6
   10918:	8805883a 	mov	r2,r17
   1091c:	2008d27a 	srli	r4,r4,9
   10920:	84003fcc 	andi	r16,r16,255
   10924:	800695fa 	slli	r3,r16,23
   10928:	10803fcc 	andi	r2,r2,255
   1092c:	04002034 	movhi	r16,128
   10930:	843fffc4 	addi	r16,r16,-1
   10934:	100497fa 	slli	r2,r2,31
   10938:	2408703a 	and	r4,r4,r16
   1093c:	20e0b03a 	or	r16,r4,r3
   10940:	8084b03a 	or	r2,r16,r2
   10944:	dfc00317 	ldw	ra,12(sp)
   10948:	dc800217 	ldw	r18,8(sp)
   1094c:	dc400117 	ldw	r17,4(sp)
   10950:	dc000017 	ldw	r16,0(sp)
   10954:	dec00404 	addi	sp,sp,16
   10958:	f800283a 	ret
   1095c:	00c03fc4 	movi	r3,255
   10960:	80ffe126 	beq	r16,r3,108e8 <__alt_data_end+0xffff08e8>
   10964:	29410034 	orhi	r5,r5,1024
   10968:	00c006c4 	movi	r3,27
   1096c:	18807516 	blt	r3,r2,10b44 <__addsf3+0x2b8>
   10970:	00c00804 	movi	r3,32
   10974:	1887c83a 	sub	r3,r3,r2
   10978:	28c6983a 	sll	r3,r5,r3
   1097c:	288ad83a 	srl	r5,r5,r2
   10980:	1804c03a 	cmpne	r2,r3,zero
   10984:	288ab03a 	or	r5,r5,r2
   10988:	2149c83a 	sub	r4,r4,r5
   1098c:	2081002c 	andhi	r2,r4,1024
   10990:	10001426 	beq	r2,zero,109e4 <__addsf3+0x158>
   10994:	04810034 	movhi	r18,1024
   10998:	94bfffc4 	addi	r18,r18,-1
   1099c:	24a4703a 	and	r18,r4,r18
   109a0:	9009883a 	mov	r4,r18
   109a4:	00129a00 	call	129a0 <__clzsi2>
   109a8:	10bffec4 	addi	r2,r2,-5
   109ac:	90a4983a 	sll	r18,r18,r2
   109b0:	14005416 	blt	r2,r16,10b04 <__addsf3+0x278>
   109b4:	1405c83a 	sub	r2,r2,r16
   109b8:	11000044 	addi	r4,r2,1
   109bc:	00800804 	movi	r2,32
   109c0:	1105c83a 	sub	r2,r2,r4
   109c4:	9084983a 	sll	r2,r18,r2
   109c8:	9124d83a 	srl	r18,r18,r4
   109cc:	0021883a 	mov	r16,zero
   109d0:	1008c03a 	cmpne	r4,r2,zero
   109d4:	9108b03a 	or	r4,r18,r4
   109d8:	003fc306 	br	108e8 <__alt_data_end+0xffff08e8>
   109dc:	1000db26 	beq	r2,zero,10d4c <__addsf3+0x4c0>
   109e0:	1009883a 	mov	r4,r2
   109e4:	208001cc 	andi	r2,r4,7
   109e8:	103fc11e 	bne	r2,zero,108f0 <__alt_data_end+0xffff08f0>
   109ec:	2006d0fa 	srli	r3,r4,3
   109f0:	01003fc4 	movi	r4,255
   109f4:	8805883a 	mov	r2,r17
   109f8:	8100241e 	bne	r16,r4,10a8c <__addsf3+0x200>
   109fc:	18006e26 	beq	r3,zero,10bb8 <__addsf3+0x32c>
   10a00:	19001034 	orhi	r4,r3,64
   10a04:	00c02034 	movhi	r3,128
   10a08:	18ffffc4 	addi	r3,r3,-1
   10a0c:	043fffc4 	movi	r16,-1
   10a10:	20c8703a 	and	r4,r4,r3
   10a14:	003fc206 	br	10920 <__alt_data_end+0xffff0920>
   10a18:	8187c83a 	sub	r3,r16,r6
   10a1c:	00c03e0e 	bge	zero,r3,10b18 <__addsf3+0x28c>
   10a20:	30002326 	beq	r6,zero,10ab0 <__addsf3+0x224>
   10a24:	01803fc4 	movi	r6,255
   10a28:	81bfaf26 	beq	r16,r6,108e8 <__alt_data_end+0xffff08e8>
   10a2c:	29410034 	orhi	r5,r5,1024
   10a30:	018006c4 	movi	r6,27
   10a34:	30c07416 	blt	r6,r3,10c08 <__addsf3+0x37c>
   10a38:	01800804 	movi	r6,32
   10a3c:	30cdc83a 	sub	r6,r6,r3
   10a40:	298c983a 	sll	r6,r5,r6
   10a44:	28cad83a 	srl	r5,r5,r3
   10a48:	3006c03a 	cmpne	r3,r6,zero
   10a4c:	28cab03a 	or	r5,r5,r3
   10a50:	2149883a 	add	r4,r4,r5
   10a54:	20c1002c 	andhi	r3,r4,1024
   10a58:	183fe226 	beq	r3,zero,109e4 <__alt_data_end+0xffff09e4>
   10a5c:	84000044 	addi	r16,r16,1
   10a60:	00c03fc4 	movi	r3,255
   10a64:	80c05426 	beq	r16,r3,10bb8 <__addsf3+0x32c>
   10a68:	00bf0034 	movhi	r2,64512
   10a6c:	10bfffc4 	addi	r2,r2,-1
   10a70:	20c0004c 	andi	r3,r4,1
   10a74:	2088703a 	and	r4,r4,r2
   10a78:	2008d07a 	srli	r4,r4,1
   10a7c:	20c8b03a 	or	r4,r4,r3
   10a80:	003f9906 	br	108e8 <__alt_data_end+0xffff08e8>
   10a84:	0007883a 	mov	r3,zero
   10a88:	0005883a 	mov	r2,zero
   10a8c:	01002034 	movhi	r4,128
   10a90:	213fffc4 	addi	r4,r4,-1
   10a94:	1908703a 	and	r4,r3,r4
   10a98:	003fa106 	br	10920 <__alt_data_end+0xffff0920>
   10a9c:	10bfffc4 	addi	r2,r2,-1
   10aa0:	103fb926 	beq	r2,zero,10988 <__alt_data_end+0xffff0988>
   10aa4:	00c03fc4 	movi	r3,255
   10aa8:	80ffaf1e 	bne	r16,r3,10968 <__alt_data_end+0xffff0968>
   10aac:	003f8e06 	br	108e8 <__alt_data_end+0xffff08e8>
   10ab0:	283f8d26 	beq	r5,zero,108e8 <__alt_data_end+0xffff08e8>
   10ab4:	18ffffc4 	addi	r3,r3,-1
   10ab8:	183fe526 	beq	r3,zero,10a50 <__alt_data_end+0xffff0a50>
   10abc:	01803fc4 	movi	r6,255
   10ac0:	81bfdb1e 	bne	r16,r6,10a30 <__alt_data_end+0xffff0a30>
   10ac4:	003f8806 	br	108e8 <__alt_data_end+0xffff08e8>
   10ac8:	1000201e 	bne	r2,zero,10b4c <__addsf3+0x2c0>
   10acc:	80800044 	addi	r2,r16,1
   10ad0:	10803fcc 	andi	r2,r2,255
   10ad4:	01800044 	movi	r6,1
   10ad8:	3080450e 	bge	r6,r2,10bf0 <__addsf3+0x364>
   10adc:	2165c83a 	sub	r18,r4,r5
   10ae0:	90c1002c 	andhi	r3,r18,1024
   10ae4:	18002b26 	beq	r3,zero,10b94 <__addsf3+0x308>
   10ae8:	2925c83a 	sub	r18,r5,r4
   10aec:	3823883a 	mov	r17,r7
   10af0:	003fab06 	br	109a0 <__alt_data_end+0xffff09a0>
   10af4:	8805883a 	mov	r2,r17
   10af8:	043fffc4 	movi	r16,-1
   10afc:	0009883a 	mov	r4,zero
   10b00:	003f8706 	br	10920 <__alt_data_end+0xffff0920>
   10b04:	013f0034 	movhi	r4,64512
   10b08:	213fffc4 	addi	r4,r4,-1
   10b0c:	80a1c83a 	sub	r16,r16,r2
   10b10:	9108703a 	and	r4,r18,r4
   10b14:	003f7406 	br	108e8 <__alt_data_end+0xffff08e8>
   10b18:	1800411e 	bne	r3,zero,10c20 <__addsf3+0x394>
   10b1c:	80c00044 	addi	r3,r16,1
   10b20:	19c03fcc 	andi	r7,r3,255
   10b24:	01800044 	movi	r6,1
   10b28:	31c0260e 	bge	r6,r7,10bc4 <__addsf3+0x338>
   10b2c:	01803fc4 	movi	r6,255
   10b30:	19802126 	beq	r3,r6,10bb8 <__addsf3+0x32c>
   10b34:	2149883a 	add	r4,r4,r5
   10b38:	2008d07a 	srli	r4,r4,1
   10b3c:	1821883a 	mov	r16,r3
   10b40:	003f6906 	br	108e8 <__alt_data_end+0xffff08e8>
   10b44:	01400044 	movi	r5,1
   10b48:	003f8f06 	br	10988 <__alt_data_end+0xffff0988>
   10b4c:	8000151e 	bne	r16,zero,10ba4 <__addsf3+0x318>
   10b50:	20002f26 	beq	r4,zero,10c10 <__addsf3+0x384>
   10b54:	0084303a 	nor	r2,zero,r2
   10b58:	10000a26 	beq	r2,zero,10b84 <__addsf3+0x2f8>
   10b5c:	00c03fc4 	movi	r3,255
   10b60:	30c02b26 	beq	r6,r3,10c10 <__addsf3+0x384>
   10b64:	00c006c4 	movi	r3,27
   10b68:	18806d16 	blt	r3,r2,10d20 <__addsf3+0x494>
   10b6c:	00c00804 	movi	r3,32
   10b70:	1887c83a 	sub	r3,r3,r2
   10b74:	20c6983a 	sll	r3,r4,r3
   10b78:	2084d83a 	srl	r2,r4,r2
   10b7c:	1808c03a 	cmpne	r4,r3,zero
   10b80:	1108b03a 	or	r4,r2,r4
   10b84:	2909c83a 	sub	r4,r5,r4
   10b88:	3021883a 	mov	r16,r6
   10b8c:	3823883a 	mov	r17,r7
   10b90:	003f7e06 	br	1098c <__alt_data_end+0xffff098c>
   10b94:	903f821e 	bne	r18,zero,109a0 <__alt_data_end+0xffff09a0>
   10b98:	0005883a 	mov	r2,zero
   10b9c:	0021883a 	mov	r16,zero
   10ba0:	003fba06 	br	10a8c <__alt_data_end+0xffff0a8c>
   10ba4:	00c03fc4 	movi	r3,255
   10ba8:	30c01926 	beq	r6,r3,10c10 <__addsf3+0x384>
   10bac:	0085c83a 	sub	r2,zero,r2
   10bb0:	21010034 	orhi	r4,r4,1024
   10bb4:	003feb06 	br	10b64 <__alt_data_end+0xffff0b64>
   10bb8:	043fffc4 	movi	r16,-1
   10bbc:	0009883a 	mov	r4,zero
   10bc0:	003f5706 	br	10920 <__alt_data_end+0xffff0920>
   10bc4:	80004a1e 	bne	r16,zero,10cf0 <__addsf3+0x464>
   10bc8:	20005926 	beq	r4,zero,10d30 <__addsf3+0x4a4>
   10bcc:	283f4626 	beq	r5,zero,108e8 <__alt_data_end+0xffff08e8>
   10bd0:	2149883a 	add	r4,r4,r5
   10bd4:	2081002c 	andhi	r2,r4,1024
   10bd8:	103f8226 	beq	r2,zero,109e4 <__alt_data_end+0xffff09e4>
   10bdc:	00bf0034 	movhi	r2,64512
   10be0:	10bfffc4 	addi	r2,r2,-1
   10be4:	3021883a 	mov	r16,r6
   10be8:	2088703a 	and	r4,r4,r2
   10bec:	003f3e06 	br	108e8 <__alt_data_end+0xffff08e8>
   10bf0:	8000121e 	bne	r16,zero,10c3c <__addsf3+0x3b0>
   10bf4:	2000261e 	bne	r4,zero,10c90 <__addsf3+0x404>
   10bf8:	283fa226 	beq	r5,zero,10a84 <__alt_data_end+0xffff0a84>
   10bfc:	2809883a 	mov	r4,r5
   10c00:	3823883a 	mov	r17,r7
   10c04:	003f3806 	br	108e8 <__alt_data_end+0xffff08e8>
   10c08:	01400044 	movi	r5,1
   10c0c:	003f9006 	br	10a50 <__alt_data_end+0xffff0a50>
   10c10:	2809883a 	mov	r4,r5
   10c14:	3021883a 	mov	r16,r6
   10c18:	3823883a 	mov	r17,r7
   10c1c:	003f3206 	br	108e8 <__alt_data_end+0xffff08e8>
   10c20:	80000c1e 	bne	r16,zero,10c54 <__addsf3+0x3c8>
   10c24:	20002f26 	beq	r4,zero,10ce4 <__addsf3+0x458>
   10c28:	00c6303a 	nor	r3,zero,r3
   10c2c:	18002b1e 	bne	r3,zero,10cdc <__addsf3+0x450>
   10c30:	2149883a 	add	r4,r4,r5
   10c34:	3021883a 	mov	r16,r6
   10c38:	003f8606 	br	10a54 <__alt_data_end+0xffff0a54>
   10c3c:	20001b1e 	bne	r4,zero,10cac <__addsf3+0x420>
   10c40:	28003926 	beq	r5,zero,10d28 <__addsf3+0x49c>
   10c44:	2809883a 	mov	r4,r5
   10c48:	3823883a 	mov	r17,r7
   10c4c:	04003fc4 	movi	r16,255
   10c50:	003f2506 	br	108e8 <__alt_data_end+0xffff08e8>
   10c54:	01c03fc4 	movi	r7,255
   10c58:	31c02226 	beq	r6,r7,10ce4 <__addsf3+0x458>
   10c5c:	00c7c83a 	sub	r3,zero,r3
   10c60:	21010034 	orhi	r4,r4,1024
   10c64:	01c006c4 	movi	r7,27
   10c68:	38c03616 	blt	r7,r3,10d44 <__addsf3+0x4b8>
   10c6c:	01c00804 	movi	r7,32
   10c70:	38cfc83a 	sub	r7,r7,r3
   10c74:	21ce983a 	sll	r7,r4,r7
   10c78:	20c6d83a 	srl	r3,r4,r3
   10c7c:	3808c03a 	cmpne	r4,r7,zero
   10c80:	1906b03a 	or	r3,r3,r4
   10c84:	1949883a 	add	r4,r3,r5
   10c88:	3021883a 	mov	r16,r6
   10c8c:	003f7106 	br	10a54 <__alt_data_end+0xffff0a54>
   10c90:	283f1526 	beq	r5,zero,108e8 <__alt_data_end+0xffff08e8>
   10c94:	2145c83a 	sub	r2,r4,r5
   10c98:	10c1002c 	andhi	r3,r2,1024
   10c9c:	183f4f26 	beq	r3,zero,109dc <__alt_data_end+0xffff09dc>
   10ca0:	2909c83a 	sub	r4,r5,r4
   10ca4:	3823883a 	mov	r17,r7
   10ca8:	003f0f06 	br	108e8 <__alt_data_end+0xffff08e8>
   10cac:	28001a26 	beq	r5,zero,10d18 <__addsf3+0x48c>
   10cb0:	2008d0fa 	srli	r4,r4,3
   10cb4:	2080102c 	andhi	r2,r4,64
   10cb8:	10000526 	beq	r2,zero,10cd0 <__addsf3+0x444>
   10cbc:	280ad0fa 	srli	r5,r5,3
   10cc0:	2880102c 	andhi	r2,r5,64
   10cc4:	1000021e 	bne	r2,zero,10cd0 <__addsf3+0x444>
   10cc8:	2809883a 	mov	r4,r5
   10ccc:	3823883a 	mov	r17,r7
   10cd0:	200890fa 	slli	r4,r4,3
   10cd4:	04003fc4 	movi	r16,255
   10cd8:	003f0306 	br	108e8 <__alt_data_end+0xffff08e8>
   10cdc:	01c03fc4 	movi	r7,255
   10ce0:	31ffe01e 	bne	r6,r7,10c64 <__alt_data_end+0xffff0c64>
   10ce4:	2809883a 	mov	r4,r5
   10ce8:	3021883a 	mov	r16,r6
   10cec:	003efe06 	br	108e8 <__alt_data_end+0xffff08e8>
   10cf0:	20001126 	beq	r4,zero,10d38 <__addsf3+0x4ac>
   10cf4:	28000826 	beq	r5,zero,10d18 <__addsf3+0x48c>
   10cf8:	2008d0fa 	srli	r4,r4,3
   10cfc:	2080102c 	andhi	r2,r4,64
   10d00:	103ff326 	beq	r2,zero,10cd0 <__alt_data_end+0xffff0cd0>
   10d04:	280ad0fa 	srli	r5,r5,3
   10d08:	2880102c 	andhi	r2,r5,64
   10d0c:	103ff01e 	bne	r2,zero,10cd0 <__alt_data_end+0xffff0cd0>
   10d10:	2809883a 	mov	r4,r5
   10d14:	003fee06 	br	10cd0 <__alt_data_end+0xffff0cd0>
   10d18:	04003fc4 	movi	r16,255
   10d1c:	003ef206 	br	108e8 <__alt_data_end+0xffff08e8>
   10d20:	01000044 	movi	r4,1
   10d24:	003f9706 	br	10b84 <__alt_data_end+0xffff0b84>
   10d28:	0005883a 	mov	r2,zero
   10d2c:	003f3406 	br	10a00 <__alt_data_end+0xffff0a00>
   10d30:	2809883a 	mov	r4,r5
   10d34:	003eec06 	br	108e8 <__alt_data_end+0xffff08e8>
   10d38:	2809883a 	mov	r4,r5
   10d3c:	04003fc4 	movi	r16,255
   10d40:	003ee906 	br	108e8 <__alt_data_end+0xffff08e8>
   10d44:	00c00044 	movi	r3,1
   10d48:	003fce06 	br	10c84 <__alt_data_end+0xffff0c84>
   10d4c:	0005883a 	mov	r2,zero
   10d50:	003f4e06 	br	10a8c <__alt_data_end+0xffff0a8c>

00010d54 <__divsf3>:
   10d54:	defff504 	addi	sp,sp,-44
   10d58:	200cd5fa 	srli	r6,r4,23
   10d5c:	dcc00415 	stw	r19,16(sp)
   10d60:	2026d7fa 	srli	r19,r4,31
   10d64:	00c02034 	movhi	r3,128
   10d68:	dd800715 	stw	r22,28(sp)
   10d6c:	dd000515 	stw	r20,20(sp)
   10d70:	dc800315 	stw	r18,12(sp)
   10d74:	18ffffc4 	addi	r3,r3,-1
   10d78:	dfc00a15 	stw	ra,40(sp)
   10d7c:	df000915 	stw	fp,36(sp)
   10d80:	ddc00815 	stw	r23,32(sp)
   10d84:	dd400615 	stw	r21,24(sp)
   10d88:	dc400215 	stw	r17,8(sp)
   10d8c:	dc000115 	stw	r16,4(sp)
   10d90:	35003fcc 	andi	r20,r6,255
   10d94:	1924703a 	and	r18,r3,r4
   10d98:	9d803fcc 	andi	r22,r19,255
   10d9c:	a0005226 	beq	r20,zero,10ee8 <__divsf3+0x194>
   10da0:	00803fc4 	movi	r2,255
   10da4:	a0802e26 	beq	r20,r2,10e60 <__divsf3+0x10c>
   10da8:	91002034 	orhi	r4,r18,128
   10dac:	202490fa 	slli	r18,r4,3
   10db0:	a53fe044 	addi	r20,r20,-127
   10db4:	0021883a 	mov	r16,zero
   10db8:	002f883a 	mov	r23,zero
   10dbc:	280cd5fa 	srli	r6,r5,23
   10dc0:	282ad7fa 	srli	r21,r5,31
   10dc4:	00c02034 	movhi	r3,128
   10dc8:	18ffffc4 	addi	r3,r3,-1
   10dcc:	31803fcc 	andi	r6,r6,255
   10dd0:	1962703a 	and	r17,r3,r5
   10dd4:	af003fcc 	andi	fp,r21,255
   10dd8:	30004a26 	beq	r6,zero,10f04 <__divsf3+0x1b0>
   10ddc:	00803fc4 	movi	r2,255
   10de0:	30804526 	beq	r6,r2,10ef8 <__divsf3+0x1a4>
   10de4:	89402034 	orhi	r5,r17,128
   10de8:	282290fa 	slli	r17,r5,3
   10dec:	31bfe044 	addi	r6,r6,-127
   10df0:	000b883a 	mov	r5,zero
   10df4:	2c20b03a 	or	r16,r5,r16
   10df8:	802090ba 	slli	r16,r16,2
   10dfc:	00800074 	movhi	r2,1
   10e00:	10838804 	addi	r2,r2,3616
   10e04:	80a1883a 	add	r16,r16,r2
   10e08:	81000017 	ldw	r4,0(r16)
   10e0c:	9d46f03a 	xor	r3,r19,r21
   10e10:	180f883a 	mov	r7,r3
   10e14:	18803fcc 	andi	r2,r3,255
   10e18:	a18dc83a 	sub	r6,r20,r6
   10e1c:	2000683a 	jmp	r4
   10e20:	00011004 	movi	zero,1088
   10e24:	00010e88 	cmpgei	zero,zero,1082
   10e28:	00010ff8 	rdprs	zero,zero,1087
   10e2c:	00010e74 	movhi	zero,1081
   10e30:	00010ff8 	rdprs	zero,zero,1087
   10e34:	00010fd0 	cmplti	zero,zero,1087
   10e38:	00010ff8 	rdprs	zero,zero,1087
   10e3c:	00010e74 	movhi	zero,1081
   10e40:	00010e88 	cmpgei	zero,zero,1082
   10e44:	00010e88 	cmpgei	zero,zero,1082
   10e48:	00010fd0 	cmplti	zero,zero,1087
   10e4c:	00010e74 	movhi	zero,1081
   10e50:	000110e4 	muli	zero,zero,1091
   10e54:	000110e4 	muli	zero,zero,1091
   10e58:	000110e4 	muli	zero,zero,1091
   10e5c:	00011098 	cmpnei	zero,zero,1090
   10e60:	9000581e 	bne	r18,zero,10fc4 <__divsf3+0x270>
   10e64:	04000204 	movi	r16,8
   10e68:	05c00084 	movi	r23,2
   10e6c:	003fd306 	br	10dbc <__alt_data_end+0xffff0dbc>
   10e70:	0023883a 	mov	r17,zero
   10e74:	e02d883a 	mov	r22,fp
   10e78:	282f883a 	mov	r23,r5
   10e7c:	00800084 	movi	r2,2
   10e80:	b8808f1e 	bne	r23,r2,110c0 <__divsf3+0x36c>
   10e84:	b005883a 	mov	r2,r22
   10e88:	11c0004c 	andi	r7,r2,1
   10e8c:	013fffc4 	movi	r4,-1
   10e90:	000d883a 	mov	r6,zero
   10e94:	21003fcc 	andi	r4,r4,255
   10e98:	200895fa 	slli	r4,r4,23
   10e9c:	38803fcc 	andi	r2,r7,255
   10ea0:	00c02034 	movhi	r3,128
   10ea4:	100497fa 	slli	r2,r2,31
   10ea8:	18ffffc4 	addi	r3,r3,-1
   10eac:	30c6703a 	and	r3,r6,r3
   10eb0:	1906b03a 	or	r3,r3,r4
   10eb4:	1884b03a 	or	r2,r3,r2
   10eb8:	dfc00a17 	ldw	ra,40(sp)
   10ebc:	df000917 	ldw	fp,36(sp)
   10ec0:	ddc00817 	ldw	r23,32(sp)
   10ec4:	dd800717 	ldw	r22,28(sp)
   10ec8:	dd400617 	ldw	r21,24(sp)
   10ecc:	dd000517 	ldw	r20,20(sp)
   10ed0:	dcc00417 	ldw	r19,16(sp)
   10ed4:	dc800317 	ldw	r18,12(sp)
   10ed8:	dc400217 	ldw	r17,8(sp)
   10edc:	dc000117 	ldw	r16,4(sp)
   10ee0:	dec00b04 	addi	sp,sp,44
   10ee4:	f800283a 	ret
   10ee8:	90002b1e 	bne	r18,zero,10f98 <__divsf3+0x244>
   10eec:	04000104 	movi	r16,4
   10ef0:	05c00044 	movi	r23,1
   10ef4:	003fb106 	br	10dbc <__alt_data_end+0xffff0dbc>
   10ef8:	8800251e 	bne	r17,zero,10f90 <__divsf3+0x23c>
   10efc:	01400084 	movi	r5,2
   10f00:	00000206 	br	10f0c <__divsf3+0x1b8>
   10f04:	88001a1e 	bne	r17,zero,10f70 <__divsf3+0x21c>
   10f08:	01400044 	movi	r5,1
   10f0c:	8160b03a 	or	r16,r16,r5
   10f10:	802090ba 	slli	r16,r16,2
   10f14:	00c00074 	movhi	r3,1
   10f18:	18c3cc04 	addi	r3,r3,3888
   10f1c:	80e1883a 	add	r16,r16,r3
   10f20:	80c00017 	ldw	r3,0(r16)
   10f24:	9d44f03a 	xor	r2,r19,r21
   10f28:	a18dc83a 	sub	r6,r20,r6
   10f2c:	1800683a 	jmp	r3
   10f30:	00010e88 	cmpgei	zero,zero,1082
   10f34:	00010e88 	cmpgei	zero,zero,1082
   10f38:	000110d4 	movui	zero,1091
   10f3c:	00010e70 	cmpltui	zero,zero,1081
   10f40:	000110d4 	movui	zero,1091
   10f44:	00010fd0 	cmplti	zero,zero,1087
   10f48:	000110d4 	movui	zero,1091
   10f4c:	00010e70 	cmpltui	zero,zero,1081
   10f50:	00010e88 	cmpgei	zero,zero,1082
   10f54:	00010e88 	cmpgei	zero,zero,1082
   10f58:	00010fd0 	cmplti	zero,zero,1087
   10f5c:	00010e70 	cmpltui	zero,zero,1081
   10f60:	000110e4 	muli	zero,zero,1091
   10f64:	000110e4 	muli	zero,zero,1091
   10f68:	000110e4 	muli	zero,zero,1091
   10f6c:	000110fc 	xorhi	zero,zero,1091
   10f70:	8809883a 	mov	r4,r17
   10f74:	00129a00 	call	129a0 <__clzsi2>
   10f78:	10fffec4 	addi	r3,r2,-5
   10f7c:	10801d84 	addi	r2,r2,118
   10f80:	88e2983a 	sll	r17,r17,r3
   10f84:	008dc83a 	sub	r6,zero,r2
   10f88:	000b883a 	mov	r5,zero
   10f8c:	003f9906 	br	10df4 <__alt_data_end+0xffff0df4>
   10f90:	014000c4 	movi	r5,3
   10f94:	003f9706 	br	10df4 <__alt_data_end+0xffff0df4>
   10f98:	9009883a 	mov	r4,r18
   10f9c:	d9400015 	stw	r5,0(sp)
   10fa0:	00129a00 	call	129a0 <__clzsi2>
   10fa4:	10fffec4 	addi	r3,r2,-5
   10fa8:	11801d84 	addi	r6,r2,118
   10fac:	90e4983a 	sll	r18,r18,r3
   10fb0:	01a9c83a 	sub	r20,zero,r6
   10fb4:	0021883a 	mov	r16,zero
   10fb8:	002f883a 	mov	r23,zero
   10fbc:	d9400017 	ldw	r5,0(sp)
   10fc0:	003f7e06 	br	10dbc <__alt_data_end+0xffff0dbc>
   10fc4:	04000304 	movi	r16,12
   10fc8:	05c000c4 	movi	r23,3
   10fcc:	003f7b06 	br	10dbc <__alt_data_end+0xffff0dbc>
   10fd0:	01802034 	movhi	r6,128
   10fd4:	000f883a 	mov	r7,zero
   10fd8:	31bfffc4 	addi	r6,r6,-1
   10fdc:	013fffc4 	movi	r4,-1
   10fe0:	003fac06 	br	10e94 <__alt_data_end+0xffff0e94>
   10fe4:	01400044 	movi	r5,1
   10fe8:	2909c83a 	sub	r4,r5,r4
   10fec:	00c006c4 	movi	r3,27
   10ff0:	19004b0e 	bge	r3,r4,11120 <__divsf3+0x3cc>
   10ff4:	114e703a 	and	r7,r2,r5
   10ff8:	0009883a 	mov	r4,zero
   10ffc:	000d883a 	mov	r6,zero
   11000:	003fa406 	br	10e94 <__alt_data_end+0xffff0e94>
   11004:	9006917a 	slli	r3,r18,5
   11008:	8822917a 	slli	r17,r17,5
   1100c:	1c40372e 	bgeu	r3,r17,110ec <__divsf3+0x398>
   11010:	31bfffc4 	addi	r6,r6,-1
   11014:	010006c4 	movi	r4,27
   11018:	000b883a 	mov	r5,zero
   1101c:	180f883a 	mov	r7,r3
   11020:	294b883a 	add	r5,r5,r5
   11024:	18c7883a 	add	r3,r3,r3
   11028:	38000116 	blt	r7,zero,11030 <__divsf3+0x2dc>
   1102c:	1c400236 	bltu	r3,r17,11038 <__divsf3+0x2e4>
   11030:	1c47c83a 	sub	r3,r3,r17
   11034:	29400054 	ori	r5,r5,1
   11038:	213fffc4 	addi	r4,r4,-1
   1103c:	203ff71e 	bne	r4,zero,1101c <__alt_data_end+0xffff101c>
   11040:	1806c03a 	cmpne	r3,r3,zero
   11044:	1962b03a 	or	r17,r3,r5
   11048:	31001fc4 	addi	r4,r6,127
   1104c:	013fe50e 	bge	zero,r4,10fe4 <__alt_data_end+0xffff0fe4>
   11050:	88c001cc 	andi	r3,r17,7
   11054:	18000426 	beq	r3,zero,11068 <__divsf3+0x314>
   11058:	88c003cc 	andi	r3,r17,15
   1105c:	01400104 	movi	r5,4
   11060:	19400126 	beq	r3,r5,11068 <__divsf3+0x314>
   11064:	8963883a 	add	r17,r17,r5
   11068:	88c2002c 	andhi	r3,r17,2048
   1106c:	18000426 	beq	r3,zero,11080 <__divsf3+0x32c>
   11070:	00fe0034 	movhi	r3,63488
   11074:	18ffffc4 	addi	r3,r3,-1
   11078:	31002004 	addi	r4,r6,128
   1107c:	88e2703a 	and	r17,r17,r3
   11080:	00c03f84 	movi	r3,254
   11084:	193f8016 	blt	r3,r4,10e88 <__alt_data_end+0xffff0e88>
   11088:	880c91ba 	slli	r6,r17,6
   1108c:	11c0004c 	andi	r7,r2,1
   11090:	300cd27a 	srli	r6,r6,9
   11094:	003f7f06 	br	10e94 <__alt_data_end+0xffff0e94>
   11098:	9080102c 	andhi	r2,r18,64
   1109c:	10000226 	beq	r2,zero,110a8 <__divsf3+0x354>
   110a0:	8880102c 	andhi	r2,r17,64
   110a4:	10001826 	beq	r2,zero,11108 <__divsf3+0x3b4>
   110a8:	00802034 	movhi	r2,128
   110ac:	91801034 	orhi	r6,r18,64
   110b0:	10bfffc4 	addi	r2,r2,-1
   110b4:	980f883a 	mov	r7,r19
   110b8:	308c703a 	and	r6,r6,r2
   110bc:	003fc706 	br	10fdc <__alt_data_end+0xffff0fdc>
   110c0:	008000c4 	movi	r2,3
   110c4:	b8802d26 	beq	r23,r2,1117c <__divsf3+0x428>
   110c8:	00c00044 	movi	r3,1
   110cc:	b005883a 	mov	r2,r22
   110d0:	b8ffdd1e 	bne	r23,r3,11048 <__alt_data_end+0xffff1048>
   110d4:	11c0004c 	andi	r7,r2,1
   110d8:	0009883a 	mov	r4,zero
   110dc:	000d883a 	mov	r6,zero
   110e0:	003f6c06 	br	10e94 <__alt_data_end+0xffff0e94>
   110e4:	9023883a 	mov	r17,r18
   110e8:	003f6406 	br	10e7c <__alt_data_end+0xffff0e7c>
   110ec:	1c47c83a 	sub	r3,r3,r17
   110f0:	01000684 	movi	r4,26
   110f4:	01400044 	movi	r5,1
   110f8:	003fc806 	br	1101c <__alt_data_end+0xffff101c>
   110fc:	9080102c 	andhi	r2,r18,64
   11100:	103fe926 	beq	r2,zero,110a8 <__alt_data_end+0xffff10a8>
   11104:	0023883a 	mov	r17,zero
   11108:	00802034 	movhi	r2,128
   1110c:	89801034 	orhi	r6,r17,64
   11110:	10bfffc4 	addi	r2,r2,-1
   11114:	a80f883a 	mov	r7,r21
   11118:	308c703a 	and	r6,r6,r2
   1111c:	003faf06 	br	10fdc <__alt_data_end+0xffff0fdc>
   11120:	01c00804 	movi	r7,32
   11124:	390fc83a 	sub	r7,r7,r4
   11128:	89ce983a 	sll	r7,r17,r7
   1112c:	890ad83a 	srl	r5,r17,r4
   11130:	380ec03a 	cmpne	r7,r7,zero
   11134:	29cab03a 	or	r5,r5,r7
   11138:	28c001cc 	andi	r3,r5,7
   1113c:	18000426 	beq	r3,zero,11150 <__divsf3+0x3fc>
   11140:	28c003cc 	andi	r3,r5,15
   11144:	01000104 	movi	r4,4
   11148:	19000126 	beq	r3,r4,11150 <__divsf3+0x3fc>
   1114c:	290b883a 	add	r5,r5,r4
   11150:	28c1002c 	andhi	r3,r5,1024
   11154:	18000426 	beq	r3,zero,11168 <__divsf3+0x414>
   11158:	11c0004c 	andi	r7,r2,1
   1115c:	01000044 	movi	r4,1
   11160:	000d883a 	mov	r6,zero
   11164:	003f4b06 	br	10e94 <__alt_data_end+0xffff0e94>
   11168:	280a91ba 	slli	r5,r5,6
   1116c:	11c0004c 	andi	r7,r2,1
   11170:	0009883a 	mov	r4,zero
   11174:	280cd27a 	srli	r6,r5,9
   11178:	003f4606 	br	10e94 <__alt_data_end+0xffff0e94>
   1117c:	00802034 	movhi	r2,128
   11180:	89801034 	orhi	r6,r17,64
   11184:	10bfffc4 	addi	r2,r2,-1
   11188:	b00f883a 	mov	r7,r22
   1118c:	308c703a 	and	r6,r6,r2
   11190:	003f9206 	br	10fdc <__alt_data_end+0xffff0fdc>

00011194 <__mulsf3>:
   11194:	defff504 	addi	sp,sp,-44
   11198:	dc000115 	stw	r16,4(sp)
   1119c:	2020d5fa 	srli	r16,r4,23
   111a0:	dd400615 	stw	r21,24(sp)
   111a4:	202ad7fa 	srli	r21,r4,31
   111a8:	dc800315 	stw	r18,12(sp)
   111ac:	04802034 	movhi	r18,128
   111b0:	df000915 	stw	fp,36(sp)
   111b4:	dd000515 	stw	r20,20(sp)
   111b8:	94bfffc4 	addi	r18,r18,-1
   111bc:	dfc00a15 	stw	ra,40(sp)
   111c0:	ddc00815 	stw	r23,32(sp)
   111c4:	dd800715 	stw	r22,28(sp)
   111c8:	dcc00415 	stw	r19,16(sp)
   111cc:	dc400215 	stw	r17,8(sp)
   111d0:	84003fcc 	andi	r16,r16,255
   111d4:	9124703a 	and	r18,r18,r4
   111d8:	a829883a 	mov	r20,r21
   111dc:	af003fcc 	andi	fp,r21,255
   111e0:	80005426 	beq	r16,zero,11334 <__mulsf3+0x1a0>
   111e4:	00803fc4 	movi	r2,255
   111e8:	80802f26 	beq	r16,r2,112a8 <__mulsf3+0x114>
   111ec:	91002034 	orhi	r4,r18,128
   111f0:	202490fa 	slli	r18,r4,3
   111f4:	843fe044 	addi	r16,r16,-127
   111f8:	0023883a 	mov	r17,zero
   111fc:	002f883a 	mov	r23,zero
   11200:	2804d5fa 	srli	r2,r5,23
   11204:	282cd7fa 	srli	r22,r5,31
   11208:	01002034 	movhi	r4,128
   1120c:	213fffc4 	addi	r4,r4,-1
   11210:	10803fcc 	andi	r2,r2,255
   11214:	2166703a 	and	r19,r4,r5
   11218:	b1803fcc 	andi	r6,r22,255
   1121c:	10004c26 	beq	r2,zero,11350 <__mulsf3+0x1bc>
   11220:	00c03fc4 	movi	r3,255
   11224:	10c04726 	beq	r2,r3,11344 <__mulsf3+0x1b0>
   11228:	99002034 	orhi	r4,r19,128
   1122c:	202690fa 	slli	r19,r4,3
   11230:	10bfe044 	addi	r2,r2,-127
   11234:	0007883a 	mov	r3,zero
   11238:	80a1883a 	add	r16,r16,r2
   1123c:	010003c4 	movi	r4,15
   11240:	1c44b03a 	or	r2,r3,r17
   11244:	b56af03a 	xor	r21,r22,r21
   11248:	81c00044 	addi	r7,r16,1
   1124c:	20806b36 	bltu	r4,r2,113fc <__mulsf3+0x268>
   11250:	100490ba 	slli	r2,r2,2
   11254:	01000074 	movhi	r4,1
   11258:	21049a04 	addi	r4,r4,4712
   1125c:	1105883a 	add	r2,r2,r4
   11260:	10800017 	ldw	r2,0(r2)
   11264:	1000683a 	jmp	r2
   11268:	000113fc 	xorhi	zero,zero,1103
   1126c:	000112bc 	xorhi	zero,zero,1098
   11270:	000112bc 	xorhi	zero,zero,1098
   11274:	000112b8 	rdprs	zero,zero,1098
   11278:	000113e0 	cmpeqi	zero,zero,1103
   1127c:	000113e0 	cmpeqi	zero,zero,1103
   11280:	000113cc 	andi	zero,zero,1103
   11284:	000112b8 	rdprs	zero,zero,1098
   11288:	000113e0 	cmpeqi	zero,zero,1103
   1128c:	000113cc 	andi	zero,zero,1103
   11290:	000113e0 	cmpeqi	zero,zero,1103
   11294:	000112b8 	rdprs	zero,zero,1098
   11298:	000113ec 	andhi	zero,zero,1103
   1129c:	000113ec 	andhi	zero,zero,1103
   112a0:	000113ec 	andhi	zero,zero,1103
   112a4:	000114fc 	xorhi	zero,zero,1107
   112a8:	90003b1e 	bne	r18,zero,11398 <__mulsf3+0x204>
   112ac:	04400204 	movi	r17,8
   112b0:	05c00084 	movi	r23,2
   112b4:	003fd206 	br	11200 <__alt_data_end+0xffff1200>
   112b8:	302b883a 	mov	r21,r6
   112bc:	00800084 	movi	r2,2
   112c0:	18802626 	beq	r3,r2,1135c <__mulsf3+0x1c8>
   112c4:	008000c4 	movi	r2,3
   112c8:	1880b826 	beq	r3,r2,115ac <__mulsf3+0x418>
   112cc:	00800044 	movi	r2,1
   112d0:	1880af1e 	bne	r3,r2,11590 <__mulsf3+0x3fc>
   112d4:	a829883a 	mov	r20,r21
   112d8:	0007883a 	mov	r3,zero
   112dc:	0009883a 	mov	r4,zero
   112e0:	18803fcc 	andi	r2,r3,255
   112e4:	100695fa 	slli	r3,r2,23
   112e8:	a0803fcc 	andi	r2,r20,255
   112ec:	100a97fa 	slli	r5,r2,31
   112f0:	00802034 	movhi	r2,128
   112f4:	10bfffc4 	addi	r2,r2,-1
   112f8:	2084703a 	and	r2,r4,r2
   112fc:	10c4b03a 	or	r2,r2,r3
   11300:	1144b03a 	or	r2,r2,r5
   11304:	dfc00a17 	ldw	ra,40(sp)
   11308:	df000917 	ldw	fp,36(sp)
   1130c:	ddc00817 	ldw	r23,32(sp)
   11310:	dd800717 	ldw	r22,28(sp)
   11314:	dd400617 	ldw	r21,24(sp)
   11318:	dd000517 	ldw	r20,20(sp)
   1131c:	dcc00417 	ldw	r19,16(sp)
   11320:	dc800317 	ldw	r18,12(sp)
   11324:	dc400217 	ldw	r17,8(sp)
   11328:	dc000117 	ldw	r16,4(sp)
   1132c:	dec00b04 	addi	sp,sp,44
   11330:	f800283a 	ret
   11334:	90000d1e 	bne	r18,zero,1136c <__mulsf3+0x1d8>
   11338:	04400104 	movi	r17,4
   1133c:	05c00044 	movi	r23,1
   11340:	003faf06 	br	11200 <__alt_data_end+0xffff1200>
   11344:	9806c03a 	cmpne	r3,r19,zero
   11348:	18c00084 	addi	r3,r3,2
   1134c:	003fba06 	br	11238 <__alt_data_end+0xffff1238>
   11350:	9800141e 	bne	r19,zero,113a4 <__mulsf3+0x210>
   11354:	00c00044 	movi	r3,1
   11358:	003fb706 	br	11238 <__alt_data_end+0xffff1238>
   1135c:	a829883a 	mov	r20,r21
   11360:	00ffffc4 	movi	r3,-1
   11364:	0009883a 	mov	r4,zero
   11368:	003fdd06 	br	112e0 <__alt_data_end+0xffff12e0>
   1136c:	9009883a 	mov	r4,r18
   11370:	d9400015 	stw	r5,0(sp)
   11374:	00129a00 	call	129a0 <__clzsi2>
   11378:	10fffec4 	addi	r3,r2,-5
   1137c:	10801d84 	addi	r2,r2,118
   11380:	90e4983a 	sll	r18,r18,r3
   11384:	00a1c83a 	sub	r16,zero,r2
   11388:	0023883a 	mov	r17,zero
   1138c:	002f883a 	mov	r23,zero
   11390:	d9400017 	ldw	r5,0(sp)
   11394:	003f9a06 	br	11200 <__alt_data_end+0xffff1200>
   11398:	04400304 	movi	r17,12
   1139c:	05c000c4 	movi	r23,3
   113a0:	003f9706 	br	11200 <__alt_data_end+0xffff1200>
   113a4:	9809883a 	mov	r4,r19
   113a8:	d9800015 	stw	r6,0(sp)
   113ac:	00129a00 	call	129a0 <__clzsi2>
   113b0:	10fffec4 	addi	r3,r2,-5
   113b4:	10801d84 	addi	r2,r2,118
   113b8:	98e6983a 	sll	r19,r19,r3
   113bc:	0085c83a 	sub	r2,zero,r2
   113c0:	0007883a 	mov	r3,zero
   113c4:	d9800017 	ldw	r6,0(sp)
   113c8:	003f9b06 	br	11238 <__alt_data_end+0xffff1238>
   113cc:	01002034 	movhi	r4,128
   113d0:	0029883a 	mov	r20,zero
   113d4:	213fffc4 	addi	r4,r4,-1
   113d8:	00ffffc4 	movi	r3,-1
   113dc:	003fc006 	br	112e0 <__alt_data_end+0xffff12e0>
   113e0:	9027883a 	mov	r19,r18
   113e4:	b807883a 	mov	r3,r23
   113e8:	003fb406 	br	112bc <__alt_data_end+0xffff12bc>
   113ec:	9027883a 	mov	r19,r18
   113f0:	e02b883a 	mov	r21,fp
   113f4:	b807883a 	mov	r3,r23
   113f8:	003fb006 	br	112bc <__alt_data_end+0xffff12bc>
   113fc:	9028d43a 	srli	r20,r18,16
   11400:	982cd43a 	srli	r22,r19,16
   11404:	94bfffcc 	andi	r18,r18,65535
   11408:	9cffffcc 	andi	r19,r19,65535
   1140c:	980b883a 	mov	r5,r19
   11410:	9009883a 	mov	r4,r18
   11414:	d9c00015 	stw	r7,0(sp)
   11418:	0012bb80 	call	12bb8 <__mulsi3>
   1141c:	a00b883a 	mov	r5,r20
   11420:	9809883a 	mov	r4,r19
   11424:	1023883a 	mov	r17,r2
   11428:	0012bb80 	call	12bb8 <__mulsi3>
   1142c:	a009883a 	mov	r4,r20
   11430:	b00b883a 	mov	r5,r22
   11434:	1027883a 	mov	r19,r2
   11438:	0012bb80 	call	12bb8 <__mulsi3>
   1143c:	b00b883a 	mov	r5,r22
   11440:	9009883a 	mov	r4,r18
   11444:	1029883a 	mov	r20,r2
   11448:	0012bb80 	call	12bb8 <__mulsi3>
   1144c:	8806d43a 	srli	r3,r17,16
   11450:	14c5883a 	add	r2,r2,r19
   11454:	d9c00017 	ldw	r7,0(sp)
   11458:	1885883a 	add	r2,r3,r2
   1145c:	14c0022e 	bgeu	r2,r19,11468 <__mulsf3+0x2d4>
   11460:	00c00074 	movhi	r3,1
   11464:	a0e9883a 	add	r20,r20,r3
   11468:	1026943a 	slli	r19,r2,16
   1146c:	8c7fffcc 	andi	r17,r17,65535
   11470:	1004d43a 	srli	r2,r2,16
   11474:	9c63883a 	add	r17,r19,r17
   11478:	882691ba 	slli	r19,r17,6
   1147c:	1505883a 	add	r2,r2,r20
   11480:	8822d6ba 	srli	r17,r17,26
   11484:	100891ba 	slli	r4,r2,6
   11488:	9826c03a 	cmpne	r19,r19,zero
   1148c:	9c62b03a 	or	r17,r19,r17
   11490:	8926b03a 	or	r19,r17,r4
   11494:	9882002c 	andhi	r2,r19,2048
   11498:	10000426 	beq	r2,zero,114ac <__mulsf3+0x318>
   1149c:	9804d07a 	srli	r2,r19,1
   114a0:	9900004c 	andi	r4,r19,1
   114a4:	3821883a 	mov	r16,r7
   114a8:	1126b03a 	or	r19,r2,r4
   114ac:	80c01fc4 	addi	r3,r16,127
   114b0:	00c0210e 	bge	zero,r3,11538 <__mulsf3+0x3a4>
   114b4:	988001cc 	andi	r2,r19,7
   114b8:	10000426 	beq	r2,zero,114cc <__mulsf3+0x338>
   114bc:	988003cc 	andi	r2,r19,15
   114c0:	01000104 	movi	r4,4
   114c4:	11000126 	beq	r2,r4,114cc <__mulsf3+0x338>
   114c8:	9927883a 	add	r19,r19,r4
   114cc:	9882002c 	andhi	r2,r19,2048
   114d0:	10000426 	beq	r2,zero,114e4 <__mulsf3+0x350>
   114d4:	00be0034 	movhi	r2,63488
   114d8:	10bfffc4 	addi	r2,r2,-1
   114dc:	80c02004 	addi	r3,r16,128
   114e0:	98a6703a 	and	r19,r19,r2
   114e4:	00803f84 	movi	r2,254
   114e8:	10ff9c16 	blt	r2,r3,1135c <__alt_data_end+0xffff135c>
   114ec:	980891ba 	slli	r4,r19,6
   114f0:	a829883a 	mov	r20,r21
   114f4:	2008d27a 	srli	r4,r4,9
   114f8:	003f7906 	br	112e0 <__alt_data_end+0xffff12e0>
   114fc:	9080102c 	andhi	r2,r18,64
   11500:	10000826 	beq	r2,zero,11524 <__mulsf3+0x390>
   11504:	9880102c 	andhi	r2,r19,64
   11508:	1000061e 	bne	r2,zero,11524 <__mulsf3+0x390>
   1150c:	00802034 	movhi	r2,128
   11510:	99001034 	orhi	r4,r19,64
   11514:	10bfffc4 	addi	r2,r2,-1
   11518:	b029883a 	mov	r20,r22
   1151c:	2088703a 	and	r4,r4,r2
   11520:	003fad06 	br	113d8 <__alt_data_end+0xffff13d8>
   11524:	00802034 	movhi	r2,128
   11528:	91001034 	orhi	r4,r18,64
   1152c:	10bfffc4 	addi	r2,r2,-1
   11530:	2088703a 	and	r4,r4,r2
   11534:	003fa806 	br	113d8 <__alt_data_end+0xffff13d8>
   11538:	00800044 	movi	r2,1
   1153c:	10c7c83a 	sub	r3,r2,r3
   11540:	008006c4 	movi	r2,27
   11544:	10ff6316 	blt	r2,r3,112d4 <__alt_data_end+0xffff12d4>
   11548:	00800804 	movi	r2,32
   1154c:	10c5c83a 	sub	r2,r2,r3
   11550:	9884983a 	sll	r2,r19,r2
   11554:	98c6d83a 	srl	r3,r19,r3
   11558:	1004c03a 	cmpne	r2,r2,zero
   1155c:	1884b03a 	or	r2,r3,r2
   11560:	10c001cc 	andi	r3,r2,7
   11564:	18000426 	beq	r3,zero,11578 <__mulsf3+0x3e4>
   11568:	10c003cc 	andi	r3,r2,15
   1156c:	01000104 	movi	r4,4
   11570:	19000126 	beq	r3,r4,11578 <__mulsf3+0x3e4>
   11574:	1105883a 	add	r2,r2,r4
   11578:	10c1002c 	andhi	r3,r2,1024
   1157c:	18000626 	beq	r3,zero,11598 <__mulsf3+0x404>
   11580:	a829883a 	mov	r20,r21
   11584:	00c00044 	movi	r3,1
   11588:	0009883a 	mov	r4,zero
   1158c:	003f5406 	br	112e0 <__alt_data_end+0xffff12e0>
   11590:	3821883a 	mov	r16,r7
   11594:	003fc506 	br	114ac <__alt_data_end+0xffff14ac>
   11598:	100491ba 	slli	r2,r2,6
   1159c:	a829883a 	mov	r20,r21
   115a0:	0007883a 	mov	r3,zero
   115a4:	1008d27a 	srli	r4,r2,9
   115a8:	003f4d06 	br	112e0 <__alt_data_end+0xffff12e0>
   115ac:	00802034 	movhi	r2,128
   115b0:	99001034 	orhi	r4,r19,64
   115b4:	10bfffc4 	addi	r2,r2,-1
   115b8:	a829883a 	mov	r20,r21
   115bc:	2088703a 	and	r4,r4,r2
   115c0:	003f8506 	br	113d8 <__alt_data_end+0xffff13d8>

000115c4 <__subsf3>:
   115c4:	defffc04 	addi	sp,sp,-16
   115c8:	280cd5fa 	srli	r6,r5,23
   115cc:	dc000015 	stw	r16,0(sp)
   115d0:	01c02034 	movhi	r7,128
   115d4:	2020d5fa 	srli	r16,r4,23
   115d8:	39ffffc4 	addi	r7,r7,-1
   115dc:	3906703a 	and	r3,r7,r4
   115e0:	dc400115 	stw	r17,4(sp)
   115e4:	394e703a 	and	r7,r7,r5
   115e8:	2022d7fa 	srli	r17,r4,31
   115ec:	dfc00315 	stw	ra,12(sp)
   115f0:	dc800215 	stw	r18,8(sp)
   115f4:	31803fcc 	andi	r6,r6,255
   115f8:	01003fc4 	movi	r4,255
   115fc:	84003fcc 	andi	r16,r16,255
   11600:	180690fa 	slli	r3,r3,3
   11604:	2804d7fa 	srli	r2,r5,31
   11608:	380e90fa 	slli	r7,r7,3
   1160c:	31006d26 	beq	r6,r4,117c4 <__subsf3+0x200>
   11610:	1080005c 	xori	r2,r2,1
   11614:	8189c83a 	sub	r4,r16,r6
   11618:	14404f26 	beq	r2,r17,11758 <__subsf3+0x194>
   1161c:	0100770e 	bge	zero,r4,117fc <__subsf3+0x238>
   11620:	30001e1e 	bne	r6,zero,1169c <__subsf3+0xd8>
   11624:	38006a1e 	bne	r7,zero,117d0 <__subsf3+0x20c>
   11628:	188001cc 	andi	r2,r3,7
   1162c:	10000426 	beq	r2,zero,11640 <__subsf3+0x7c>
   11630:	188003cc 	andi	r2,r3,15
   11634:	01000104 	movi	r4,4
   11638:	11000126 	beq	r2,r4,11640 <__subsf3+0x7c>
   1163c:	1907883a 	add	r3,r3,r4
   11640:	1881002c 	andhi	r2,r3,1024
   11644:	10003926 	beq	r2,zero,1172c <__subsf3+0x168>
   11648:	84000044 	addi	r16,r16,1
   1164c:	00803fc4 	movi	r2,255
   11650:	80807526 	beq	r16,r2,11828 <__subsf3+0x264>
   11654:	180691ba 	slli	r3,r3,6
   11658:	8880004c 	andi	r2,r17,1
   1165c:	180ad27a 	srli	r5,r3,9
   11660:	84003fcc 	andi	r16,r16,255
   11664:	800695fa 	slli	r3,r16,23
   11668:	10803fcc 	andi	r2,r2,255
   1166c:	01002034 	movhi	r4,128
   11670:	213fffc4 	addi	r4,r4,-1
   11674:	100497fa 	slli	r2,r2,31
   11678:	2920703a 	and	r16,r5,r4
   1167c:	80e0b03a 	or	r16,r16,r3
   11680:	8084b03a 	or	r2,r16,r2
   11684:	dfc00317 	ldw	ra,12(sp)
   11688:	dc800217 	ldw	r18,8(sp)
   1168c:	dc400117 	ldw	r17,4(sp)
   11690:	dc000017 	ldw	r16,0(sp)
   11694:	dec00404 	addi	sp,sp,16
   11698:	f800283a 	ret
   1169c:	00803fc4 	movi	r2,255
   116a0:	80bfe126 	beq	r16,r2,11628 <__alt_data_end+0xffff1628>
   116a4:	39c10034 	orhi	r7,r7,1024
   116a8:	008006c4 	movi	r2,27
   116ac:	11007416 	blt	r2,r4,11880 <__subsf3+0x2bc>
   116b0:	00800804 	movi	r2,32
   116b4:	1105c83a 	sub	r2,r2,r4
   116b8:	3884983a 	sll	r2,r7,r2
   116bc:	390ed83a 	srl	r7,r7,r4
   116c0:	1008c03a 	cmpne	r4,r2,zero
   116c4:	390eb03a 	or	r7,r7,r4
   116c8:	19c7c83a 	sub	r3,r3,r7
   116cc:	1881002c 	andhi	r2,r3,1024
   116d0:	10001426 	beq	r2,zero,11724 <__subsf3+0x160>
   116d4:	04810034 	movhi	r18,1024
   116d8:	94bfffc4 	addi	r18,r18,-1
   116dc:	1ca4703a 	and	r18,r3,r18
   116e0:	9009883a 	mov	r4,r18
   116e4:	00129a00 	call	129a0 <__clzsi2>
   116e8:	10bffec4 	addi	r2,r2,-5
   116ec:	90a4983a 	sll	r18,r18,r2
   116f0:	14005116 	blt	r2,r16,11838 <__subsf3+0x274>
   116f4:	1405c83a 	sub	r2,r2,r16
   116f8:	10c00044 	addi	r3,r2,1
   116fc:	00800804 	movi	r2,32
   11700:	10c5c83a 	sub	r2,r2,r3
   11704:	9084983a 	sll	r2,r18,r2
   11708:	90e4d83a 	srl	r18,r18,r3
   1170c:	0021883a 	mov	r16,zero
   11710:	1006c03a 	cmpne	r3,r2,zero
   11714:	90c6b03a 	or	r3,r18,r3
   11718:	003fc306 	br	11628 <__alt_data_end+0xffff1628>
   1171c:	2000e026 	beq	r4,zero,11aa0 <__subsf3+0x4dc>
   11720:	2007883a 	mov	r3,r4
   11724:	188001cc 	andi	r2,r3,7
   11728:	103fc11e 	bne	r2,zero,11630 <__alt_data_end+0xffff1630>
   1172c:	180ad0fa 	srli	r5,r3,3
   11730:	00c03fc4 	movi	r3,255
   11734:	8880004c 	andi	r2,r17,1
   11738:	80c0031e 	bne	r16,r3,11748 <__subsf3+0x184>
   1173c:	28006d26 	beq	r5,zero,118f4 <__subsf3+0x330>
   11740:	29401034 	orhi	r5,r5,64
   11744:	043fffc4 	movi	r16,-1
   11748:	00c02034 	movhi	r3,128
   1174c:	18ffffc4 	addi	r3,r3,-1
   11750:	28ca703a 	and	r5,r5,r3
   11754:	003fc206 	br	11660 <__alt_data_end+0xffff1660>
   11758:	01003c0e 	bge	zero,r4,1184c <__subsf3+0x288>
   1175c:	30002126 	beq	r6,zero,117e4 <__subsf3+0x220>
   11760:	01403fc4 	movi	r5,255
   11764:	817fb026 	beq	r16,r5,11628 <__alt_data_end+0xffff1628>
   11768:	39c10034 	orhi	r7,r7,1024
   1176c:	014006c4 	movi	r5,27
   11770:	29007416 	blt	r5,r4,11944 <__subsf3+0x380>
   11774:	01400804 	movi	r5,32
   11778:	290bc83a 	sub	r5,r5,r4
   1177c:	394a983a 	sll	r5,r7,r5
   11780:	390ed83a 	srl	r7,r7,r4
   11784:	2808c03a 	cmpne	r4,r5,zero
   11788:	390eb03a 	or	r7,r7,r4
   1178c:	19c7883a 	add	r3,r3,r7
   11790:	1901002c 	andhi	r4,r3,1024
   11794:	20003826 	beq	r4,zero,11878 <__subsf3+0x2b4>
   11798:	84000044 	addi	r16,r16,1
   1179c:	01003fc4 	movi	r4,255
   117a0:	81005426 	beq	r16,r4,118f4 <__subsf3+0x330>
   117a4:	1023883a 	mov	r17,r2
   117a8:	00bf0034 	movhi	r2,64512
   117ac:	10bfffc4 	addi	r2,r2,-1
   117b0:	1900004c 	andi	r4,r3,1
   117b4:	1886703a 	and	r3,r3,r2
   117b8:	1806d07a 	srli	r3,r3,1
   117bc:	1906b03a 	or	r3,r3,r4
   117c0:	003f9906 	br	11628 <__alt_data_end+0xffff1628>
   117c4:	383f9226 	beq	r7,zero,11610 <__alt_data_end+0xffff1610>
   117c8:	10803fcc 	andi	r2,r2,255
   117cc:	003f9106 	br	11614 <__alt_data_end+0xffff1614>
   117d0:	213fffc4 	addi	r4,r4,-1
   117d4:	203fbc26 	beq	r4,zero,116c8 <__alt_data_end+0xffff16c8>
   117d8:	00803fc4 	movi	r2,255
   117dc:	80bfb21e 	bne	r16,r2,116a8 <__alt_data_end+0xffff16a8>
   117e0:	003f9106 	br	11628 <__alt_data_end+0xffff1628>
   117e4:	383f9026 	beq	r7,zero,11628 <__alt_data_end+0xffff1628>
   117e8:	213fffc4 	addi	r4,r4,-1
   117ec:	203fe726 	beq	r4,zero,1178c <__alt_data_end+0xffff178c>
   117f0:	01403fc4 	movi	r5,255
   117f4:	817fdd1e 	bne	r16,r5,1176c <__alt_data_end+0xffff176c>
   117f8:	003f8b06 	br	11628 <__alt_data_end+0xffff1628>
   117fc:	2000221e 	bne	r4,zero,11888 <__subsf3+0x2c4>
   11800:	81000044 	addi	r4,r16,1
   11804:	21003fcc 	andi	r4,r4,255
   11808:	01400044 	movi	r5,1
   1180c:	2900470e 	bge	r5,r4,1192c <__subsf3+0x368>
   11810:	19e5c83a 	sub	r18,r3,r7
   11814:	9141002c 	andhi	r5,r18,1024
   11818:	28002d26 	beq	r5,zero,118d0 <__subsf3+0x30c>
   1181c:	38e5c83a 	sub	r18,r7,r3
   11820:	1023883a 	mov	r17,r2
   11824:	003fae06 	br	116e0 <__alt_data_end+0xffff16e0>
   11828:	8880004c 	andi	r2,r17,1
   1182c:	043fffc4 	movi	r16,-1
   11830:	000b883a 	mov	r5,zero
   11834:	003f8a06 	br	11660 <__alt_data_end+0xffff1660>
   11838:	00ff0034 	movhi	r3,64512
   1183c:	18ffffc4 	addi	r3,r3,-1
   11840:	80a1c83a 	sub	r16,r16,r2
   11844:	90c6703a 	and	r3,r18,r3
   11848:	003f7706 	br	11628 <__alt_data_end+0xffff1628>
   1184c:	2000431e 	bne	r4,zero,1195c <__subsf3+0x398>
   11850:	81000044 	addi	r4,r16,1
   11854:	21803fcc 	andi	r6,r4,255
   11858:	01400044 	movi	r5,1
   1185c:	2980280e 	bge	r5,r6,11900 <__subsf3+0x33c>
   11860:	01403fc4 	movi	r5,255
   11864:	21402326 	beq	r4,r5,118f4 <__subsf3+0x330>
   11868:	19c7883a 	add	r3,r3,r7
   1186c:	1806d07a 	srli	r3,r3,1
   11870:	2021883a 	mov	r16,r4
   11874:	003f6c06 	br	11628 <__alt_data_end+0xffff1628>
   11878:	1023883a 	mov	r17,r2
   1187c:	003fa906 	br	11724 <__alt_data_end+0xffff1724>
   11880:	01c00044 	movi	r7,1
   11884:	003f9006 	br	116c8 <__alt_data_end+0xffff16c8>
   11888:	8000151e 	bne	r16,zero,118e0 <__subsf3+0x31c>
   1188c:	18002f26 	beq	r3,zero,1194c <__subsf3+0x388>
   11890:	0108303a 	nor	r4,zero,r4
   11894:	20000a26 	beq	r4,zero,118c0 <__subsf3+0x2fc>
   11898:	01403fc4 	movi	r5,255
   1189c:	31402b26 	beq	r6,r5,1194c <__subsf3+0x388>
   118a0:	014006c4 	movi	r5,27
   118a4:	29006e16 	blt	r5,r4,11a60 <__subsf3+0x49c>
   118a8:	01400804 	movi	r5,32
   118ac:	290bc83a 	sub	r5,r5,r4
   118b0:	194a983a 	sll	r5,r3,r5
   118b4:	1908d83a 	srl	r4,r3,r4
   118b8:	2806c03a 	cmpne	r3,r5,zero
   118bc:	20c6b03a 	or	r3,r4,r3
   118c0:	38c7c83a 	sub	r3,r7,r3
   118c4:	3021883a 	mov	r16,r6
   118c8:	1023883a 	mov	r17,r2
   118cc:	003f7f06 	br	116cc <__alt_data_end+0xffff16cc>
   118d0:	903f831e 	bne	r18,zero,116e0 <__alt_data_end+0xffff16e0>
   118d4:	0005883a 	mov	r2,zero
   118d8:	0021883a 	mov	r16,zero
   118dc:	003f9a06 	br	11748 <__alt_data_end+0xffff1748>
   118e0:	01403fc4 	movi	r5,255
   118e4:	31401926 	beq	r6,r5,1194c <__subsf3+0x388>
   118e8:	0109c83a 	sub	r4,zero,r4
   118ec:	18c10034 	orhi	r3,r3,1024
   118f0:	003feb06 	br	118a0 <__alt_data_end+0xffff18a0>
   118f4:	043fffc4 	movi	r16,-1
   118f8:	000b883a 	mov	r5,zero
   118fc:	003f5806 	br	11660 <__alt_data_end+0xffff1660>
   11900:	8000481e 	bne	r16,zero,11a24 <__subsf3+0x460>
   11904:	18006226 	beq	r3,zero,11a90 <__subsf3+0x4cc>
   11908:	383f4726 	beq	r7,zero,11628 <__alt_data_end+0xffff1628>
   1190c:	19c7883a 	add	r3,r3,r7
   11910:	1881002c 	andhi	r2,r3,1024
   11914:	103f8326 	beq	r2,zero,11724 <__alt_data_end+0xffff1724>
   11918:	00bf0034 	movhi	r2,64512
   1191c:	10bfffc4 	addi	r2,r2,-1
   11920:	2821883a 	mov	r16,r5
   11924:	1886703a 	and	r3,r3,r2
   11928:	003f3f06 	br	11628 <__alt_data_end+0xffff1628>
   1192c:	80001c1e 	bne	r16,zero,119a0 <__subsf3+0x3dc>
   11930:	1800261e 	bne	r3,zero,119cc <__subsf3+0x408>
   11934:	38004c26 	beq	r7,zero,11a68 <__subsf3+0x4a4>
   11938:	3807883a 	mov	r3,r7
   1193c:	1023883a 	mov	r17,r2
   11940:	003f3906 	br	11628 <__alt_data_end+0xffff1628>
   11944:	01c00044 	movi	r7,1
   11948:	003f9006 	br	1178c <__alt_data_end+0xffff178c>
   1194c:	3807883a 	mov	r3,r7
   11950:	3021883a 	mov	r16,r6
   11954:	1023883a 	mov	r17,r2
   11958:	003f3306 	br	11628 <__alt_data_end+0xffff1628>
   1195c:	8000161e 	bne	r16,zero,119b8 <__subsf3+0x3f4>
   11960:	18002d26 	beq	r3,zero,11a18 <__subsf3+0x454>
   11964:	0108303a 	nor	r4,zero,r4
   11968:	20000a26 	beq	r4,zero,11994 <__subsf3+0x3d0>
   1196c:	01403fc4 	movi	r5,255
   11970:	31402926 	beq	r6,r5,11a18 <__subsf3+0x454>
   11974:	014006c4 	movi	r5,27
   11978:	29004716 	blt	r5,r4,11a98 <__subsf3+0x4d4>
   1197c:	01400804 	movi	r5,32
   11980:	290bc83a 	sub	r5,r5,r4
   11984:	194a983a 	sll	r5,r3,r5
   11988:	1908d83a 	srl	r4,r3,r4
   1198c:	2806c03a 	cmpne	r3,r5,zero
   11990:	20c6b03a 	or	r3,r4,r3
   11994:	19c7883a 	add	r3,r3,r7
   11998:	3021883a 	mov	r16,r6
   1199c:	003f7c06 	br	11790 <__alt_data_end+0xffff1790>
   119a0:	1800111e 	bne	r3,zero,119e8 <__subsf3+0x424>
   119a4:	38003326 	beq	r7,zero,11a74 <__subsf3+0x4b0>
   119a8:	3807883a 	mov	r3,r7
   119ac:	1023883a 	mov	r17,r2
   119b0:	04003fc4 	movi	r16,255
   119b4:	003f1c06 	br	11628 <__alt_data_end+0xffff1628>
   119b8:	01403fc4 	movi	r5,255
   119bc:	31401626 	beq	r6,r5,11a18 <__subsf3+0x454>
   119c0:	0109c83a 	sub	r4,zero,r4
   119c4:	18c10034 	orhi	r3,r3,1024
   119c8:	003fea06 	br	11974 <__alt_data_end+0xffff1974>
   119cc:	383f1626 	beq	r7,zero,11628 <__alt_data_end+0xffff1628>
   119d0:	19c9c83a 	sub	r4,r3,r7
   119d4:	2141002c 	andhi	r5,r4,1024
   119d8:	283f5026 	beq	r5,zero,1171c <__alt_data_end+0xffff171c>
   119dc:	38c7c83a 	sub	r3,r7,r3
   119e0:	1023883a 	mov	r17,r2
   119e4:	003f1006 	br	11628 <__alt_data_end+0xffff1628>
   119e8:	38001b26 	beq	r7,zero,11a58 <__subsf3+0x494>
   119ec:	1806d0fa 	srli	r3,r3,3
   119f0:	1900102c 	andhi	r4,r3,64
   119f4:	20000526 	beq	r4,zero,11a0c <__subsf3+0x448>
   119f8:	380ed0fa 	srli	r7,r7,3
   119fc:	3900102c 	andhi	r4,r7,64
   11a00:	2000021e 	bne	r4,zero,11a0c <__subsf3+0x448>
   11a04:	3807883a 	mov	r3,r7
   11a08:	1023883a 	mov	r17,r2
   11a0c:	180690fa 	slli	r3,r3,3
   11a10:	04003fc4 	movi	r16,255
   11a14:	003f0406 	br	11628 <__alt_data_end+0xffff1628>
   11a18:	3807883a 	mov	r3,r7
   11a1c:	3021883a 	mov	r16,r6
   11a20:	003f0106 	br	11628 <__alt_data_end+0xffff1628>
   11a24:	18001726 	beq	r3,zero,11a84 <__subsf3+0x4c0>
   11a28:	38000b26 	beq	r7,zero,11a58 <__subsf3+0x494>
   11a2c:	1806d0fa 	srli	r3,r3,3
   11a30:	1900102c 	andhi	r4,r3,64
   11a34:	20000426 	beq	r4,zero,11a48 <__subsf3+0x484>
   11a38:	380ed0fa 	srli	r7,r7,3
   11a3c:	3900102c 	andhi	r4,r7,64
   11a40:	2000011e 	bne	r4,zero,11a48 <__subsf3+0x484>
   11a44:	3807883a 	mov	r3,r7
   11a48:	180690fa 	slli	r3,r3,3
   11a4c:	1023883a 	mov	r17,r2
   11a50:	04003fc4 	movi	r16,255
   11a54:	003ef406 	br	11628 <__alt_data_end+0xffff1628>
   11a58:	04003fc4 	movi	r16,255
   11a5c:	003ef206 	br	11628 <__alt_data_end+0xffff1628>
   11a60:	00c00044 	movi	r3,1
   11a64:	003f9606 	br	118c0 <__alt_data_end+0xffff18c0>
   11a68:	000b883a 	mov	r5,zero
   11a6c:	0005883a 	mov	r2,zero
   11a70:	003f3506 	br	11748 <__alt_data_end+0xffff1748>
   11a74:	01402034 	movhi	r5,128
   11a78:	297fffc4 	addi	r5,r5,-1
   11a7c:	0005883a 	mov	r2,zero
   11a80:	003f2f06 	br	11740 <__alt_data_end+0xffff1740>
   11a84:	3807883a 	mov	r3,r7
   11a88:	04003fc4 	movi	r16,255
   11a8c:	003ee606 	br	11628 <__alt_data_end+0xffff1628>
   11a90:	3807883a 	mov	r3,r7
   11a94:	003ee406 	br	11628 <__alt_data_end+0xffff1628>
   11a98:	00c00044 	movi	r3,1
   11a9c:	003fbd06 	br	11994 <__alt_data_end+0xffff1994>
   11aa0:	0005883a 	mov	r2,zero
   11aa4:	003f2806 	br	11748 <__alt_data_end+0xffff1748>

00011aa8 <__fixsfsi>:
   11aa8:	200ad5fa 	srli	r5,r4,23
   11aac:	00c02034 	movhi	r3,128
   11ab0:	18ffffc4 	addi	r3,r3,-1
   11ab4:	29403fcc 	andi	r5,r5,255
   11ab8:	00801f84 	movi	r2,126
   11abc:	1906703a 	and	r3,r3,r4
   11ac0:	2008d7fa 	srli	r4,r4,31
   11ac4:	11400e0e 	bge	r2,r5,11b00 <__fixsfsi+0x58>
   11ac8:	00802744 	movi	r2,157
   11acc:	11400816 	blt	r2,r5,11af0 <__fixsfsi+0x48>
   11ad0:	00802544 	movi	r2,149
   11ad4:	18c02034 	orhi	r3,r3,128
   11ad8:	11400b0e 	bge	r2,r5,11b08 <__fixsfsi+0x60>
   11adc:	28bfda84 	addi	r2,r5,-150
   11ae0:	1884983a 	sll	r2,r3,r2
   11ae4:	20000726 	beq	r4,zero,11b04 <__fixsfsi+0x5c>
   11ae8:	0085c83a 	sub	r2,zero,r2
   11aec:	f800283a 	ret
   11af0:	00a00034 	movhi	r2,32768
   11af4:	10bfffc4 	addi	r2,r2,-1
   11af8:	2085883a 	add	r2,r4,r2
   11afc:	f800283a 	ret
   11b00:	0005883a 	mov	r2,zero
   11b04:	f800283a 	ret
   11b08:	00802584 	movi	r2,150
   11b0c:	1145c83a 	sub	r2,r2,r5
   11b10:	1884d83a 	srl	r2,r3,r2
   11b14:	003ff306 	br	11ae4 <__alt_data_end+0xffff1ae4>

00011b18 <__floatsisf>:
   11b18:	defffd04 	addi	sp,sp,-12
   11b1c:	dfc00215 	stw	ra,8(sp)
   11b20:	dc400115 	stw	r17,4(sp)
   11b24:	dc000015 	stw	r16,0(sp)
   11b28:	20003526 	beq	r4,zero,11c00 <__floatsisf+0xe8>
   11b2c:	2021883a 	mov	r16,r4
   11b30:	2022d7fa 	srli	r17,r4,31
   11b34:	20003616 	blt	r4,zero,11c10 <__floatsisf+0xf8>
   11b38:	8009883a 	mov	r4,r16
   11b3c:	00129a00 	call	129a0 <__clzsi2>
   11b40:	00c02784 	movi	r3,158
   11b44:	1887c83a 	sub	r3,r3,r2
   11b48:	01002584 	movi	r4,150
   11b4c:	20c01416 	blt	r4,r3,11ba0 <__floatsisf+0x88>
   11b50:	20c9c83a 	sub	r4,r4,r3
   11b54:	8120983a 	sll	r16,r16,r4
   11b58:	00802034 	movhi	r2,128
   11b5c:	10bfffc4 	addi	r2,r2,-1
   11b60:	8809883a 	mov	r4,r17
   11b64:	80a0703a 	and	r16,r16,r2
   11b68:	18803fcc 	andi	r2,r3,255
   11b6c:	100695fa 	slli	r3,r2,23
   11b70:	20803fcc 	andi	r2,r4,255
   11b74:	100897fa 	slli	r4,r2,31
   11b78:	00802034 	movhi	r2,128
   11b7c:	10bfffc4 	addi	r2,r2,-1
   11b80:	8084703a 	and	r2,r16,r2
   11b84:	10c4b03a 	or	r2,r2,r3
   11b88:	1104b03a 	or	r2,r2,r4
   11b8c:	dfc00217 	ldw	ra,8(sp)
   11b90:	dc400117 	ldw	r17,4(sp)
   11b94:	dc000017 	ldw	r16,0(sp)
   11b98:	dec00304 	addi	sp,sp,12
   11b9c:	f800283a 	ret
   11ba0:	01002644 	movi	r4,153
   11ba4:	20c01c16 	blt	r4,r3,11c18 <__floatsisf+0x100>
   11ba8:	20c9c83a 	sub	r4,r4,r3
   11bac:	8120983a 	sll	r16,r16,r4
   11bb0:	013f0034 	movhi	r4,64512
   11bb4:	213fffc4 	addi	r4,r4,-1
   11bb8:	814001cc 	andi	r5,r16,7
   11bbc:	8108703a 	and	r4,r16,r4
   11bc0:	28000426 	beq	r5,zero,11bd4 <__floatsisf+0xbc>
   11bc4:	840003cc 	andi	r16,r16,15
   11bc8:	01400104 	movi	r5,4
   11bcc:	81400126 	beq	r16,r5,11bd4 <__floatsisf+0xbc>
   11bd0:	2149883a 	add	r4,r4,r5
   11bd4:	2141002c 	andhi	r5,r4,1024
   11bd8:	28000526 	beq	r5,zero,11bf0 <__floatsisf+0xd8>
   11bdc:	00c027c4 	movi	r3,159
   11be0:	1887c83a 	sub	r3,r3,r2
   11be4:	00bf0034 	movhi	r2,64512
   11be8:	10bfffc4 	addi	r2,r2,-1
   11bec:	2088703a 	and	r4,r4,r2
   11bf0:	202091ba 	slli	r16,r4,6
   11bf4:	8809883a 	mov	r4,r17
   11bf8:	8020d27a 	srli	r16,r16,9
   11bfc:	003fda06 	br	11b68 <__alt_data_end+0xffff1b68>
   11c00:	0009883a 	mov	r4,zero
   11c04:	0007883a 	mov	r3,zero
   11c08:	0021883a 	mov	r16,zero
   11c0c:	003fd606 	br	11b68 <__alt_data_end+0xffff1b68>
   11c10:	0121c83a 	sub	r16,zero,r4
   11c14:	003fc806 	br	11b38 <__alt_data_end+0xffff1b38>
   11c18:	01002e44 	movi	r4,185
   11c1c:	20c9c83a 	sub	r4,r4,r3
   11c20:	01400144 	movi	r5,5
   11c24:	8108983a 	sll	r4,r16,r4
   11c28:	288bc83a 	sub	r5,r5,r2
   11c2c:	8160d83a 	srl	r16,r16,r5
   11c30:	2008c03a 	cmpne	r4,r4,zero
   11c34:	8120b03a 	or	r16,r16,r4
   11c38:	003fdd06 	br	11bb0 <__alt_data_end+0xffff1bb0>

00011c3c <__divdf3>:
   11c3c:	defff004 	addi	sp,sp,-64
   11c40:	dc800815 	stw	r18,32(sp)
   11c44:	2824d53a 	srli	r18,r5,20
   11c48:	dd800c15 	stw	r22,48(sp)
   11c4c:	282cd7fa 	srli	r22,r5,31
   11c50:	dc000615 	stw	r16,24(sp)
   11c54:	04000434 	movhi	r16,16
   11c58:	843fffc4 	addi	r16,r16,-1
   11c5c:	dfc00f15 	stw	ra,60(sp)
   11c60:	df000e15 	stw	fp,56(sp)
   11c64:	ddc00d15 	stw	r23,52(sp)
   11c68:	dd400b15 	stw	r21,44(sp)
   11c6c:	dd000a15 	stw	r20,40(sp)
   11c70:	dcc00915 	stw	r19,36(sp)
   11c74:	dc400715 	stw	r17,28(sp)
   11c78:	9481ffcc 	andi	r18,r18,2047
   11c7c:	2c20703a 	and	r16,r5,r16
   11c80:	b2003fcc 	andi	r8,r22,255
   11c84:	90006126 	beq	r18,zero,11e0c <__divdf3+0x1d0>
   11c88:	0081ffc4 	movi	r2,2047
   11c8c:	202b883a 	mov	r21,r4
   11c90:	90803726 	beq	r18,r2,11d70 <__divdf3+0x134>
   11c94:	80800434 	orhi	r2,r16,16
   11c98:	100490fa 	slli	r2,r2,3
   11c9c:	2020d77a 	srli	r16,r4,29
   11ca0:	202a90fa 	slli	r21,r4,3
   11ca4:	94bf0044 	addi	r18,r18,-1023
   11ca8:	80a0b03a 	or	r16,r16,r2
   11cac:	0013883a 	mov	r9,zero
   11cb0:	000b883a 	mov	r5,zero
   11cb4:	3806d53a 	srli	r3,r7,20
   11cb8:	382ed7fa 	srli	r23,r7,31
   11cbc:	04400434 	movhi	r17,16
   11cc0:	8c7fffc4 	addi	r17,r17,-1
   11cc4:	18c1ffcc 	andi	r3,r3,2047
   11cc8:	3029883a 	mov	r20,r6
   11ccc:	3c62703a 	and	r17,r7,r17
   11cd0:	bf003fcc 	andi	fp,r23,255
   11cd4:	18006e26 	beq	r3,zero,11e90 <__divdf3+0x254>
   11cd8:	0081ffc4 	movi	r2,2047
   11cdc:	18806626 	beq	r3,r2,11e78 <__divdf3+0x23c>
   11ce0:	88800434 	orhi	r2,r17,16
   11ce4:	100490fa 	slli	r2,r2,3
   11ce8:	3022d77a 	srli	r17,r6,29
   11cec:	302890fa 	slli	r20,r6,3
   11cf0:	18ff0044 	addi	r3,r3,-1023
   11cf4:	88a2b03a 	or	r17,r17,r2
   11cf8:	000f883a 	mov	r7,zero
   11cfc:	b5e6f03a 	xor	r19,r22,r23
   11d00:	3a4cb03a 	or	r6,r7,r9
   11d04:	008003c4 	movi	r2,15
   11d08:	9809883a 	mov	r4,r19
   11d0c:	90c7c83a 	sub	r3,r18,r3
   11d10:	9cc03fcc 	andi	r19,r19,255
   11d14:	11809636 	bltu	r2,r6,11f70 <__divdf3+0x334>
   11d18:	300c90ba 	slli	r6,r6,2
   11d1c:	00800074 	movhi	r2,1
   11d20:	10874c04 	addi	r2,r2,7472
   11d24:	308d883a 	add	r6,r6,r2
   11d28:	30800017 	ldw	r2,0(r6)
   11d2c:	1000683a 	jmp	r2
   11d30:	00011f70 	cmpltui	zero,zero,1149
   11d34:	00011da8 	cmpgeui	zero,zero,1142
   11d38:	00011f60 	cmpeqi	zero,zero,1149
   11d3c:	00011d9c 	xori	zero,zero,1142
   11d40:	00011f60 	cmpeqi	zero,zero,1149
   11d44:	00011f34 	movhi	zero,1148
   11d48:	00011f60 	cmpeqi	zero,zero,1149
   11d4c:	00011d9c 	xori	zero,zero,1142
   11d50:	00011da8 	cmpgeui	zero,zero,1142
   11d54:	00011da8 	cmpgeui	zero,zero,1142
   11d58:	00011f34 	movhi	zero,1148
   11d5c:	00011d9c 	xori	zero,zero,1142
   11d60:	00011d8c 	andi	zero,zero,1142
   11d64:	00011d8c 	andi	zero,zero,1142
   11d68:	00011d8c 	andi	zero,zero,1142
   11d6c:	000122f8 	rdprs	zero,zero,1163
   11d70:	2404b03a 	or	r2,r4,r16
   11d74:	10006c1e 	bne	r2,zero,11f28 <__divdf3+0x2ec>
   11d78:	02400204 	movi	r9,8
   11d7c:	0021883a 	mov	r16,zero
   11d80:	002b883a 	mov	r21,zero
   11d84:	01400084 	movi	r5,2
   11d88:	003fca06 	br	11cb4 <__alt_data_end+0xffff1cb4>
   11d8c:	8023883a 	mov	r17,r16
   11d90:	a829883a 	mov	r20,r21
   11d94:	4039883a 	mov	fp,r8
   11d98:	280f883a 	mov	r7,r5
   11d9c:	00800084 	movi	r2,2
   11da0:	3881601e 	bne	r7,r2,12324 <__divdf3+0x6e8>
   11da4:	e027883a 	mov	r19,fp
   11da8:	9900004c 	andi	r4,r19,1
   11dac:	0081ffc4 	movi	r2,2047
   11db0:	0021883a 	mov	r16,zero
   11db4:	002b883a 	mov	r21,zero
   11db8:	1004953a 	slli	r2,r2,20
   11dbc:	20c03fcc 	andi	r3,r4,255
   11dc0:	01400434 	movhi	r5,16
   11dc4:	297fffc4 	addi	r5,r5,-1
   11dc8:	180697fa 	slli	r3,r3,31
   11dcc:	8160703a 	and	r16,r16,r5
   11dd0:	80a0b03a 	or	r16,r16,r2
   11dd4:	80c6b03a 	or	r3,r16,r3
   11dd8:	a805883a 	mov	r2,r21
   11ddc:	dfc00f17 	ldw	ra,60(sp)
   11de0:	df000e17 	ldw	fp,56(sp)
   11de4:	ddc00d17 	ldw	r23,52(sp)
   11de8:	dd800c17 	ldw	r22,48(sp)
   11dec:	dd400b17 	ldw	r21,44(sp)
   11df0:	dd000a17 	ldw	r20,40(sp)
   11df4:	dcc00917 	ldw	r19,36(sp)
   11df8:	dc800817 	ldw	r18,32(sp)
   11dfc:	dc400717 	ldw	r17,28(sp)
   11e00:	dc000617 	ldw	r16,24(sp)
   11e04:	dec01004 	addi	sp,sp,64
   11e08:	f800283a 	ret
   11e0c:	2404b03a 	or	r2,r4,r16
   11e10:	2023883a 	mov	r17,r4
   11e14:	10003f26 	beq	r2,zero,11f14 <__divdf3+0x2d8>
   11e18:	80015e26 	beq	r16,zero,12394 <__divdf3+0x758>
   11e1c:	8009883a 	mov	r4,r16
   11e20:	d9800215 	stw	r6,8(sp)
   11e24:	d9c00515 	stw	r7,20(sp)
   11e28:	da000415 	stw	r8,16(sp)
   11e2c:	00129a00 	call	129a0 <__clzsi2>
   11e30:	d9800217 	ldw	r6,8(sp)
   11e34:	d9c00517 	ldw	r7,20(sp)
   11e38:	da000417 	ldw	r8,16(sp)
   11e3c:	113ffd44 	addi	r4,r2,-11
   11e40:	00c00704 	movi	r3,28
   11e44:	19014f16 	blt	r3,r4,12384 <__divdf3+0x748>
   11e48:	00c00744 	movi	r3,29
   11e4c:	157ffe04 	addi	r21,r2,-8
   11e50:	1907c83a 	sub	r3,r3,r4
   11e54:	8560983a 	sll	r16,r16,r21
   11e58:	88c6d83a 	srl	r3,r17,r3
   11e5c:	8d6a983a 	sll	r21,r17,r21
   11e60:	1c20b03a 	or	r16,r3,r16
   11e64:	1080fcc4 	addi	r2,r2,1011
   11e68:	00a5c83a 	sub	r18,zero,r2
   11e6c:	0013883a 	mov	r9,zero
   11e70:	000b883a 	mov	r5,zero
   11e74:	003f8f06 	br	11cb4 <__alt_data_end+0xffff1cb4>
   11e78:	3444b03a 	or	r2,r6,r17
   11e7c:	1000231e 	bne	r2,zero,11f0c <__divdf3+0x2d0>
   11e80:	0023883a 	mov	r17,zero
   11e84:	0029883a 	mov	r20,zero
   11e88:	01c00084 	movi	r7,2
   11e8c:	003f9b06 	br	11cfc <__alt_data_end+0xffff1cfc>
   11e90:	3444b03a 	or	r2,r6,r17
   11e94:	10001926 	beq	r2,zero,11efc <__divdf3+0x2c0>
   11e98:	88014b26 	beq	r17,zero,123c8 <__divdf3+0x78c>
   11e9c:	8809883a 	mov	r4,r17
   11ea0:	d9400115 	stw	r5,4(sp)
   11ea4:	d9800215 	stw	r6,8(sp)
   11ea8:	da000415 	stw	r8,16(sp)
   11eac:	da400315 	stw	r9,12(sp)
   11eb0:	00129a00 	call	129a0 <__clzsi2>
   11eb4:	d9400117 	ldw	r5,4(sp)
   11eb8:	d9800217 	ldw	r6,8(sp)
   11ebc:	da000417 	ldw	r8,16(sp)
   11ec0:	da400317 	ldw	r9,12(sp)
   11ec4:	113ffd44 	addi	r4,r2,-11
   11ec8:	00c00704 	movi	r3,28
   11ecc:	19013a16 	blt	r3,r4,123b8 <__divdf3+0x77c>
   11ed0:	00c00744 	movi	r3,29
   11ed4:	153ffe04 	addi	r20,r2,-8
   11ed8:	1907c83a 	sub	r3,r3,r4
   11edc:	8d22983a 	sll	r17,r17,r20
   11ee0:	30c6d83a 	srl	r3,r6,r3
   11ee4:	3528983a 	sll	r20,r6,r20
   11ee8:	1c62b03a 	or	r17,r3,r17
   11eec:	1080fcc4 	addi	r2,r2,1011
   11ef0:	0087c83a 	sub	r3,zero,r2
   11ef4:	000f883a 	mov	r7,zero
   11ef8:	003f8006 	br	11cfc <__alt_data_end+0xffff1cfc>
   11efc:	0023883a 	mov	r17,zero
   11f00:	0029883a 	mov	r20,zero
   11f04:	01c00044 	movi	r7,1
   11f08:	003f7c06 	br	11cfc <__alt_data_end+0xffff1cfc>
   11f0c:	01c000c4 	movi	r7,3
   11f10:	003f7a06 	br	11cfc <__alt_data_end+0xffff1cfc>
   11f14:	02400104 	movi	r9,4
   11f18:	0021883a 	mov	r16,zero
   11f1c:	002b883a 	mov	r21,zero
   11f20:	01400044 	movi	r5,1
   11f24:	003f6306 	br	11cb4 <__alt_data_end+0xffff1cb4>
   11f28:	02400304 	movi	r9,12
   11f2c:	014000c4 	movi	r5,3
   11f30:	003f6006 	br	11cb4 <__alt_data_end+0xffff1cb4>
   11f34:	04000434 	movhi	r16,16
   11f38:	0009883a 	mov	r4,zero
   11f3c:	843fffc4 	addi	r16,r16,-1
   11f40:	057fffc4 	movi	r21,-1
   11f44:	0081ffc4 	movi	r2,2047
   11f48:	003f9b06 	br	11db8 <__alt_data_end+0xffff1db8>
   11f4c:	00c00044 	movi	r3,1
   11f50:	1887c83a 	sub	r3,r3,r2
   11f54:	01000e04 	movi	r4,56
   11f58:	20c1530e 	bge	r4,r3,124a8 <__divdf3+0x86c>
   11f5c:	9900004c 	andi	r4,r19,1
   11f60:	0005883a 	mov	r2,zero
   11f64:	0021883a 	mov	r16,zero
   11f68:	002b883a 	mov	r21,zero
   11f6c:	003f9206 	br	11db8 <__alt_data_end+0xffff1db8>
   11f70:	8c012e36 	bltu	r17,r16,1242c <__divdf3+0x7f0>
   11f74:	84412c26 	beq	r16,r17,12428 <__divdf3+0x7ec>
   11f78:	a82f883a 	mov	r23,r21
   11f7c:	18ffffc4 	addi	r3,r3,-1
   11f80:	002b883a 	mov	r21,zero
   11f84:	a004d63a 	srli	r2,r20,24
   11f88:	8822923a 	slli	r17,r17,8
   11f8c:	a028923a 	slli	r20,r20,8
   11f90:	8009883a 	mov	r4,r16
   11f94:	88acb03a 	or	r22,r17,r2
   11f98:	dd000015 	stw	r20,0(sp)
   11f9c:	b028d43a 	srli	r20,r22,16
   11fa0:	d8c00215 	stw	r3,8(sp)
   11fa4:	b4bfffcc 	andi	r18,r22,65535
   11fa8:	a00b883a 	mov	r5,r20
   11fac:	0012afc0 	call	12afc <__udivsi3>
   11fb0:	100b883a 	mov	r5,r2
   11fb4:	9009883a 	mov	r4,r18
   11fb8:	1023883a 	mov	r17,r2
   11fbc:	0012bb80 	call	12bb8 <__mulsi3>
   11fc0:	8009883a 	mov	r4,r16
   11fc4:	a00b883a 	mov	r5,r20
   11fc8:	1039883a 	mov	fp,r2
   11fcc:	0012b600 	call	12b60 <__umodsi3>
   11fd0:	1004943a 	slli	r2,r2,16
   11fd4:	b808d43a 	srli	r4,r23,16
   11fd8:	d8c00217 	ldw	r3,8(sp)
   11fdc:	2084b03a 	or	r2,r4,r2
   11fe0:	1700062e 	bgeu	r2,fp,11ffc <__divdf3+0x3c0>
   11fe4:	1585883a 	add	r2,r2,r22
   11fe8:	893fffc4 	addi	r4,r17,-1
   11fec:	15811d36 	bltu	r2,r22,12464 <__divdf3+0x828>
   11ff0:	17011c2e 	bgeu	r2,fp,12464 <__divdf3+0x828>
   11ff4:	8c7fff84 	addi	r17,r17,-2
   11ff8:	1585883a 	add	r2,r2,r22
   11ffc:	1739c83a 	sub	fp,r2,fp
   12000:	a00b883a 	mov	r5,r20
   12004:	e009883a 	mov	r4,fp
   12008:	d8c00215 	stw	r3,8(sp)
   1200c:	0012afc0 	call	12afc <__udivsi3>
   12010:	100b883a 	mov	r5,r2
   12014:	9009883a 	mov	r4,r18
   12018:	1021883a 	mov	r16,r2
   1201c:	0012bb80 	call	12bb8 <__mulsi3>
   12020:	a00b883a 	mov	r5,r20
   12024:	e009883a 	mov	r4,fp
   12028:	d8800415 	stw	r2,16(sp)
   1202c:	0012b600 	call	12b60 <__umodsi3>
   12030:	1004943a 	slli	r2,r2,16
   12034:	da000417 	ldw	r8,16(sp)
   12038:	bdffffcc 	andi	r23,r23,65535
   1203c:	b884b03a 	or	r2,r23,r2
   12040:	d8c00217 	ldw	r3,8(sp)
   12044:	1200062e 	bgeu	r2,r8,12060 <__divdf3+0x424>
   12048:	1585883a 	add	r2,r2,r22
   1204c:	813fffc4 	addi	r4,r16,-1
   12050:	15810236 	bltu	r2,r22,1245c <__divdf3+0x820>
   12054:	1201012e 	bgeu	r2,r8,1245c <__divdf3+0x820>
   12058:	843fff84 	addi	r16,r16,-2
   1205c:	1585883a 	add	r2,r2,r22
   12060:	8822943a 	slli	r17,r17,16
   12064:	d9800017 	ldw	r6,0(sp)
   12068:	1211c83a 	sub	r8,r2,r8
   1206c:	8c22b03a 	or	r17,r17,r16
   12070:	373fffcc 	andi	fp,r6,65535
   12074:	8abfffcc 	andi	r10,r17,65535
   12078:	8820d43a 	srli	r16,r17,16
   1207c:	5009883a 	mov	r4,r10
   12080:	e00b883a 	mov	r5,fp
   12084:	302ed43a 	srli	r23,r6,16
   12088:	d8c00215 	stw	r3,8(sp)
   1208c:	da000415 	stw	r8,16(sp)
   12090:	da800115 	stw	r10,4(sp)
   12094:	0012bb80 	call	12bb8 <__mulsi3>
   12098:	800b883a 	mov	r5,r16
   1209c:	e009883a 	mov	r4,fp
   120a0:	d8800515 	stw	r2,20(sp)
   120a4:	0012bb80 	call	12bb8 <__mulsi3>
   120a8:	8009883a 	mov	r4,r16
   120ac:	b80b883a 	mov	r5,r23
   120b0:	d8800315 	stw	r2,12(sp)
   120b4:	0012bb80 	call	12bb8 <__mulsi3>
   120b8:	da800117 	ldw	r10,4(sp)
   120bc:	b80b883a 	mov	r5,r23
   120c0:	1021883a 	mov	r16,r2
   120c4:	5009883a 	mov	r4,r10
   120c8:	0012bb80 	call	12bb8 <__mulsi3>
   120cc:	d9c00517 	ldw	r7,20(sp)
   120d0:	da400317 	ldw	r9,12(sp)
   120d4:	d8c00217 	ldw	r3,8(sp)
   120d8:	3808d43a 	srli	r4,r7,16
   120dc:	1245883a 	add	r2,r2,r9
   120e0:	da000417 	ldw	r8,16(sp)
   120e4:	2085883a 	add	r2,r4,r2
   120e8:	1240022e 	bgeu	r2,r9,120f4 <__divdf3+0x4b8>
   120ec:	01000074 	movhi	r4,1
   120f0:	8121883a 	add	r16,r16,r4
   120f4:	1008d43a 	srli	r4,r2,16
   120f8:	1004943a 	slli	r2,r2,16
   120fc:	39ffffcc 	andi	r7,r7,65535
   12100:	2409883a 	add	r4,r4,r16
   12104:	11c5883a 	add	r2,r2,r7
   12108:	4100bb36 	bltu	r8,r4,123f8 <__divdf3+0x7bc>
   1210c:	4100d726 	beq	r8,r4,1246c <__divdf3+0x830>
   12110:	4109c83a 	sub	r4,r8,r4
   12114:	a8a1c83a 	sub	r16,r21,r2
   12118:	ac2b803a 	cmpltu	r21,r21,r16
   1211c:	256bc83a 	sub	r21,r4,r21
   12120:	b540d926 	beq	r22,r21,12488 <__divdf3+0x84c>
   12124:	a00b883a 	mov	r5,r20
   12128:	a809883a 	mov	r4,r21
   1212c:	d8c00215 	stw	r3,8(sp)
   12130:	0012afc0 	call	12afc <__udivsi3>
   12134:	100b883a 	mov	r5,r2
   12138:	9009883a 	mov	r4,r18
   1213c:	d8800515 	stw	r2,20(sp)
   12140:	0012bb80 	call	12bb8 <__mulsi3>
   12144:	a809883a 	mov	r4,r21
   12148:	a00b883a 	mov	r5,r20
   1214c:	d8800415 	stw	r2,16(sp)
   12150:	0012b600 	call	12b60 <__umodsi3>
   12154:	1004943a 	slli	r2,r2,16
   12158:	8008d43a 	srli	r4,r16,16
   1215c:	da000417 	ldw	r8,16(sp)
   12160:	d8c00217 	ldw	r3,8(sp)
   12164:	2084b03a 	or	r2,r4,r2
   12168:	d9c00517 	ldw	r7,20(sp)
   1216c:	1200062e 	bgeu	r2,r8,12188 <__divdf3+0x54c>
   12170:	1585883a 	add	r2,r2,r22
   12174:	393fffc4 	addi	r4,r7,-1
   12178:	1580c536 	bltu	r2,r22,12490 <__divdf3+0x854>
   1217c:	1200c42e 	bgeu	r2,r8,12490 <__divdf3+0x854>
   12180:	39ffff84 	addi	r7,r7,-2
   12184:	1585883a 	add	r2,r2,r22
   12188:	122bc83a 	sub	r21,r2,r8
   1218c:	a00b883a 	mov	r5,r20
   12190:	a809883a 	mov	r4,r21
   12194:	d8c00215 	stw	r3,8(sp)
   12198:	d9c00515 	stw	r7,20(sp)
   1219c:	0012afc0 	call	12afc <__udivsi3>
   121a0:	9009883a 	mov	r4,r18
   121a4:	100b883a 	mov	r5,r2
   121a8:	d8800415 	stw	r2,16(sp)
   121ac:	0012bb80 	call	12bb8 <__mulsi3>
   121b0:	a809883a 	mov	r4,r21
   121b4:	a00b883a 	mov	r5,r20
   121b8:	1025883a 	mov	r18,r2
   121bc:	0012b600 	call	12b60 <__umodsi3>
   121c0:	1004943a 	slli	r2,r2,16
   121c4:	813fffcc 	andi	r4,r16,65535
   121c8:	d8c00217 	ldw	r3,8(sp)
   121cc:	20a0b03a 	or	r16,r4,r2
   121d0:	d9c00517 	ldw	r7,20(sp)
   121d4:	da000417 	ldw	r8,16(sp)
   121d8:	8480062e 	bgeu	r16,r18,121f4 <__divdf3+0x5b8>
   121dc:	85a1883a 	add	r16,r16,r22
   121e0:	40bfffc4 	addi	r2,r8,-1
   121e4:	8580ac36 	bltu	r16,r22,12498 <__divdf3+0x85c>
   121e8:	8480ab2e 	bgeu	r16,r18,12498 <__divdf3+0x85c>
   121ec:	423fff84 	addi	r8,r8,-2
   121f0:	85a1883a 	add	r16,r16,r22
   121f4:	3804943a 	slli	r2,r7,16
   121f8:	84a1c83a 	sub	r16,r16,r18
   121fc:	e009883a 	mov	r4,fp
   12200:	1228b03a 	or	r20,r2,r8
   12204:	a1ffffcc 	andi	r7,r20,65535
   12208:	a024d43a 	srli	r18,r20,16
   1220c:	380b883a 	mov	r5,r7
   12210:	d8c00215 	stw	r3,8(sp)
   12214:	d9c00515 	stw	r7,20(sp)
   12218:	0012bb80 	call	12bb8 <__mulsi3>
   1221c:	900b883a 	mov	r5,r18
   12220:	e009883a 	mov	r4,fp
   12224:	102b883a 	mov	r21,r2
   12228:	0012bb80 	call	12bb8 <__mulsi3>
   1222c:	900b883a 	mov	r5,r18
   12230:	b809883a 	mov	r4,r23
   12234:	1039883a 	mov	fp,r2
   12238:	0012bb80 	call	12bb8 <__mulsi3>
   1223c:	d9c00517 	ldw	r7,20(sp)
   12240:	b80b883a 	mov	r5,r23
   12244:	1025883a 	mov	r18,r2
   12248:	3809883a 	mov	r4,r7
   1224c:	0012bb80 	call	12bb8 <__mulsi3>
   12250:	a808d43a 	srli	r4,r21,16
   12254:	1705883a 	add	r2,r2,fp
   12258:	d8c00217 	ldw	r3,8(sp)
   1225c:	2085883a 	add	r2,r4,r2
   12260:	1700022e 	bgeu	r2,fp,1226c <__divdf3+0x630>
   12264:	01000074 	movhi	r4,1
   12268:	9125883a 	add	r18,r18,r4
   1226c:	1008d43a 	srli	r4,r2,16
   12270:	1004943a 	slli	r2,r2,16
   12274:	ad7fffcc 	andi	r21,r21,65535
   12278:	2489883a 	add	r4,r4,r18
   1227c:	1545883a 	add	r2,r2,r21
   12280:	81003836 	bltu	r16,r4,12364 <__divdf3+0x728>
   12284:	81003626 	beq	r16,r4,12360 <__divdf3+0x724>
   12288:	a5000054 	ori	r20,r20,1
   1228c:	1880ffc4 	addi	r2,r3,1023
   12290:	00bf2e0e 	bge	zero,r2,11f4c <__alt_data_end+0xffff1f4c>
   12294:	a10001cc 	andi	r4,r20,7
   12298:	20000726 	beq	r4,zero,122b8 <__divdf3+0x67c>
   1229c:	a10003cc 	andi	r4,r20,15
   122a0:	01400104 	movi	r5,4
   122a4:	21400426 	beq	r4,r5,122b8 <__divdf3+0x67c>
   122a8:	a149883a 	add	r4,r20,r5
   122ac:	2529803a 	cmpltu	r20,r4,r20
   122b0:	8d23883a 	add	r17,r17,r20
   122b4:	2029883a 	mov	r20,r4
   122b8:	8900402c 	andhi	r4,r17,256
   122bc:	20000426 	beq	r4,zero,122d0 <__divdf3+0x694>
   122c0:	18810004 	addi	r2,r3,1024
   122c4:	00ffc034 	movhi	r3,65280
   122c8:	18ffffc4 	addi	r3,r3,-1
   122cc:	88e2703a 	and	r17,r17,r3
   122d0:	00c1ff84 	movi	r3,2046
   122d4:	18beb416 	blt	r3,r2,11da8 <__alt_data_end+0xffff1da8>
   122d8:	a028d0fa 	srli	r20,r20,3
   122dc:	882a977a 	slli	r21,r17,29
   122e0:	8820927a 	slli	r16,r17,9
   122e4:	1081ffcc 	andi	r2,r2,2047
   122e8:	ad2ab03a 	or	r21,r21,r20
   122ec:	8020d33a 	srli	r16,r16,12
   122f0:	9900004c 	andi	r4,r19,1
   122f4:	003eb006 	br	11db8 <__alt_data_end+0xffff1db8>
   122f8:	8080022c 	andhi	r2,r16,8
   122fc:	10001226 	beq	r2,zero,12348 <__divdf3+0x70c>
   12300:	8880022c 	andhi	r2,r17,8
   12304:	1000101e 	bne	r2,zero,12348 <__divdf3+0x70c>
   12308:	00800434 	movhi	r2,16
   1230c:	8c000234 	orhi	r16,r17,8
   12310:	10bfffc4 	addi	r2,r2,-1
   12314:	b809883a 	mov	r4,r23
   12318:	80a0703a 	and	r16,r16,r2
   1231c:	a02b883a 	mov	r21,r20
   12320:	003f0806 	br	11f44 <__alt_data_end+0xffff1f44>
   12324:	008000c4 	movi	r2,3
   12328:	3880b126 	beq	r7,r2,125f0 <__divdf3+0x9b4>
   1232c:	00800044 	movi	r2,1
   12330:	38805b1e 	bne	r7,r2,124a0 <__divdf3+0x864>
   12334:	e009883a 	mov	r4,fp
   12338:	0005883a 	mov	r2,zero
   1233c:	0021883a 	mov	r16,zero
   12340:	002b883a 	mov	r21,zero
   12344:	003e9c06 	br	11db8 <__alt_data_end+0xffff1db8>
   12348:	00800434 	movhi	r2,16
   1234c:	84000234 	orhi	r16,r16,8
   12350:	10bfffc4 	addi	r2,r2,-1
   12354:	b009883a 	mov	r4,r22
   12358:	80a0703a 	and	r16,r16,r2
   1235c:	003ef906 	br	11f44 <__alt_data_end+0xffff1f44>
   12360:	103fca26 	beq	r2,zero,1228c <__alt_data_end+0xffff228c>
   12364:	b421883a 	add	r16,r22,r16
   12368:	a17fffc4 	addi	r5,r20,-1
   1236c:	8580422e 	bgeu	r16,r22,12478 <__divdf3+0x83c>
   12370:	2829883a 	mov	r20,r5
   12374:	813fc41e 	bne	r16,r4,12288 <__alt_data_end+0xffff2288>
   12378:	d9800017 	ldw	r6,0(sp)
   1237c:	30bfc21e 	bne	r6,r2,12288 <__alt_data_end+0xffff2288>
   12380:	003fc206 	br	1228c <__alt_data_end+0xffff228c>
   12384:	143ff604 	addi	r16,r2,-40
   12388:	8c20983a 	sll	r16,r17,r16
   1238c:	002b883a 	mov	r21,zero
   12390:	003eb406 	br	11e64 <__alt_data_end+0xffff1e64>
   12394:	d9800215 	stw	r6,8(sp)
   12398:	d9c00515 	stw	r7,20(sp)
   1239c:	da000415 	stw	r8,16(sp)
   123a0:	00129a00 	call	129a0 <__clzsi2>
   123a4:	10800804 	addi	r2,r2,32
   123a8:	da000417 	ldw	r8,16(sp)
   123ac:	d9c00517 	ldw	r7,20(sp)
   123b0:	d9800217 	ldw	r6,8(sp)
   123b4:	003ea106 	br	11e3c <__alt_data_end+0xffff1e3c>
   123b8:	147ff604 	addi	r17,r2,-40
   123bc:	3462983a 	sll	r17,r6,r17
   123c0:	0029883a 	mov	r20,zero
   123c4:	003ec906 	br	11eec <__alt_data_end+0xffff1eec>
   123c8:	3009883a 	mov	r4,r6
   123cc:	d9400115 	stw	r5,4(sp)
   123d0:	d9800215 	stw	r6,8(sp)
   123d4:	da000415 	stw	r8,16(sp)
   123d8:	da400315 	stw	r9,12(sp)
   123dc:	00129a00 	call	129a0 <__clzsi2>
   123e0:	10800804 	addi	r2,r2,32
   123e4:	da400317 	ldw	r9,12(sp)
   123e8:	da000417 	ldw	r8,16(sp)
   123ec:	d9800217 	ldw	r6,8(sp)
   123f0:	d9400117 	ldw	r5,4(sp)
   123f4:	003eb306 	br	11ec4 <__alt_data_end+0xffff1ec4>
   123f8:	d9800017 	ldw	r6,0(sp)
   123fc:	a9ab883a 	add	r21,r21,r6
   12400:	a98b803a 	cmpltu	r5,r21,r6
   12404:	2d8b883a 	add	r5,r5,r22
   12408:	2a11883a 	add	r8,r5,r8
   1240c:	897fffc4 	addi	r5,r17,-1
   12410:	b2000c2e 	bgeu	r22,r8,12444 <__divdf3+0x808>
   12414:	41003f36 	bltu	r8,r4,12514 <__divdf3+0x8d8>
   12418:	22006c26 	beq	r4,r8,125cc <__divdf3+0x990>
   1241c:	4109c83a 	sub	r4,r8,r4
   12420:	2823883a 	mov	r17,r5
   12424:	003f3b06 	br	12114 <__alt_data_end+0xffff2114>
   12428:	ad3ed336 	bltu	r21,r20,11f78 <__alt_data_end+0xffff1f78>
   1242c:	a804d07a 	srli	r2,r21,1
   12430:	802e97fa 	slli	r23,r16,31
   12434:	a82a97fa 	slli	r21,r21,31
   12438:	8020d07a 	srli	r16,r16,1
   1243c:	b8aeb03a 	or	r23,r23,r2
   12440:	003ed006 	br	11f84 <__alt_data_end+0xffff1f84>
   12444:	b23ff51e 	bne	r22,r8,1241c <__alt_data_end+0xffff241c>
   12448:	d9800017 	ldw	r6,0(sp)
   1244c:	a9bff12e 	bgeu	r21,r6,12414 <__alt_data_end+0xffff2414>
   12450:	b109c83a 	sub	r4,r22,r4
   12454:	2823883a 	mov	r17,r5
   12458:	003f2e06 	br	12114 <__alt_data_end+0xffff2114>
   1245c:	2021883a 	mov	r16,r4
   12460:	003eff06 	br	12060 <__alt_data_end+0xffff2060>
   12464:	2023883a 	mov	r17,r4
   12468:	003ee406 	br	11ffc <__alt_data_end+0xffff1ffc>
   1246c:	a8bfe236 	bltu	r21,r2,123f8 <__alt_data_end+0xffff23f8>
   12470:	0009883a 	mov	r4,zero
   12474:	003f2706 	br	12114 <__alt_data_end+0xffff2114>
   12478:	81002d36 	bltu	r16,r4,12530 <__divdf3+0x8f4>
   1247c:	24005626 	beq	r4,r16,125d8 <__divdf3+0x99c>
   12480:	2829883a 	mov	r20,r5
   12484:	003f8006 	br	12288 <__alt_data_end+0xffff2288>
   12488:	053fffc4 	movi	r20,-1
   1248c:	003f7f06 	br	1228c <__alt_data_end+0xffff228c>
   12490:	200f883a 	mov	r7,r4
   12494:	003f3c06 	br	12188 <__alt_data_end+0xffff2188>
   12498:	1011883a 	mov	r8,r2
   1249c:	003f5506 	br	121f4 <__alt_data_end+0xffff21f4>
   124a0:	e027883a 	mov	r19,fp
   124a4:	003f7906 	br	1228c <__alt_data_end+0xffff228c>
   124a8:	010007c4 	movi	r4,31
   124ac:	20c02816 	blt	r4,r3,12550 <__divdf3+0x914>
   124b0:	00800804 	movi	r2,32
   124b4:	10c5c83a 	sub	r2,r2,r3
   124b8:	888a983a 	sll	r5,r17,r2
   124bc:	a0c8d83a 	srl	r4,r20,r3
   124c0:	a084983a 	sll	r2,r20,r2
   124c4:	88e2d83a 	srl	r17,r17,r3
   124c8:	2906b03a 	or	r3,r5,r4
   124cc:	1004c03a 	cmpne	r2,r2,zero
   124d0:	1886b03a 	or	r3,r3,r2
   124d4:	188001cc 	andi	r2,r3,7
   124d8:	10000726 	beq	r2,zero,124f8 <__divdf3+0x8bc>
   124dc:	188003cc 	andi	r2,r3,15
   124e0:	01000104 	movi	r4,4
   124e4:	11000426 	beq	r2,r4,124f8 <__divdf3+0x8bc>
   124e8:	1805883a 	mov	r2,r3
   124ec:	10c00104 	addi	r3,r2,4
   124f0:	1885803a 	cmpltu	r2,r3,r2
   124f4:	88a3883a 	add	r17,r17,r2
   124f8:	8880202c 	andhi	r2,r17,128
   124fc:	10002926 	beq	r2,zero,125a4 <__divdf3+0x968>
   12500:	9900004c 	andi	r4,r19,1
   12504:	00800044 	movi	r2,1
   12508:	0021883a 	mov	r16,zero
   1250c:	002b883a 	mov	r21,zero
   12510:	003e2906 	br	11db8 <__alt_data_end+0xffff1db8>
   12514:	d9800017 	ldw	r6,0(sp)
   12518:	8c7fff84 	addi	r17,r17,-2
   1251c:	a9ab883a 	add	r21,r21,r6
   12520:	a98b803a 	cmpltu	r5,r21,r6
   12524:	2d8b883a 	add	r5,r5,r22
   12528:	2a11883a 	add	r8,r5,r8
   1252c:	003ef806 	br	12110 <__alt_data_end+0xffff2110>
   12530:	d9800017 	ldw	r6,0(sp)
   12534:	318f883a 	add	r7,r6,r6
   12538:	398b803a 	cmpltu	r5,r7,r6
   1253c:	2d8d883a 	add	r6,r5,r22
   12540:	81a1883a 	add	r16,r16,r6
   12544:	a17fff84 	addi	r5,r20,-2
   12548:	d9c00015 	stw	r7,0(sp)
   1254c:	003f8806 	br	12370 <__alt_data_end+0xffff2370>
   12550:	013ff844 	movi	r4,-31
   12554:	2085c83a 	sub	r2,r4,r2
   12558:	8888d83a 	srl	r4,r17,r2
   1255c:	00800804 	movi	r2,32
   12560:	18802126 	beq	r3,r2,125e8 <__divdf3+0x9ac>
   12564:	04001004 	movi	r16,64
   12568:	80c7c83a 	sub	r3,r16,r3
   1256c:	88e0983a 	sll	r16,r17,r3
   12570:	8504b03a 	or	r2,r16,r20
   12574:	1004c03a 	cmpne	r2,r2,zero
   12578:	2084b03a 	or	r2,r4,r2
   1257c:	144001cc 	andi	r17,r2,7
   12580:	88000d1e 	bne	r17,zero,125b8 <__divdf3+0x97c>
   12584:	0021883a 	mov	r16,zero
   12588:	102ad0fa 	srli	r21,r2,3
   1258c:	9900004c 	andi	r4,r19,1
   12590:	0005883a 	mov	r2,zero
   12594:	ac6ab03a 	or	r21,r21,r17
   12598:	003e0706 	br	11db8 <__alt_data_end+0xffff1db8>
   1259c:	1007883a 	mov	r3,r2
   125a0:	0023883a 	mov	r17,zero
   125a4:	8820927a 	slli	r16,r17,9
   125a8:	1805883a 	mov	r2,r3
   125ac:	8822977a 	slli	r17,r17,29
   125b0:	8020d33a 	srli	r16,r16,12
   125b4:	003ff406 	br	12588 <__alt_data_end+0xffff2588>
   125b8:	10c003cc 	andi	r3,r2,15
   125bc:	01000104 	movi	r4,4
   125c0:	193ff626 	beq	r3,r4,1259c <__alt_data_end+0xffff259c>
   125c4:	0023883a 	mov	r17,zero
   125c8:	003fc806 	br	124ec <__alt_data_end+0xffff24ec>
   125cc:	a8bfd136 	bltu	r21,r2,12514 <__alt_data_end+0xffff2514>
   125d0:	2823883a 	mov	r17,r5
   125d4:	003fa606 	br	12470 <__alt_data_end+0xffff2470>
   125d8:	d9800017 	ldw	r6,0(sp)
   125dc:	30bfd436 	bltu	r6,r2,12530 <__alt_data_end+0xffff2530>
   125e0:	2829883a 	mov	r20,r5
   125e4:	003f6406 	br	12378 <__alt_data_end+0xffff2378>
   125e8:	0021883a 	mov	r16,zero
   125ec:	003fe006 	br	12570 <__alt_data_end+0xffff2570>
   125f0:	00800434 	movhi	r2,16
   125f4:	8c000234 	orhi	r16,r17,8
   125f8:	10bfffc4 	addi	r2,r2,-1
   125fc:	e009883a 	mov	r4,fp
   12600:	80a0703a 	and	r16,r16,r2
   12604:	a02b883a 	mov	r21,r20
   12608:	003e4e06 	br	11f44 <__alt_data_end+0xffff1f44>

0001260c <__floatsidf>:
   1260c:	defffd04 	addi	sp,sp,-12
   12610:	dfc00215 	stw	ra,8(sp)
   12614:	dc400115 	stw	r17,4(sp)
   12618:	dc000015 	stw	r16,0(sp)
   1261c:	20002b26 	beq	r4,zero,126cc <__floatsidf+0xc0>
   12620:	2023883a 	mov	r17,r4
   12624:	2020d7fa 	srli	r16,r4,31
   12628:	20002d16 	blt	r4,zero,126e0 <__floatsidf+0xd4>
   1262c:	8809883a 	mov	r4,r17
   12630:	00129a00 	call	129a0 <__clzsi2>
   12634:	01410784 	movi	r5,1054
   12638:	288bc83a 	sub	r5,r5,r2
   1263c:	01010cc4 	movi	r4,1075
   12640:	2149c83a 	sub	r4,r4,r5
   12644:	00c007c4 	movi	r3,31
   12648:	1900160e 	bge	r3,r4,126a4 <__floatsidf+0x98>
   1264c:	00c104c4 	movi	r3,1043
   12650:	1947c83a 	sub	r3,r3,r5
   12654:	88c6983a 	sll	r3,r17,r3
   12658:	00800434 	movhi	r2,16
   1265c:	10bfffc4 	addi	r2,r2,-1
   12660:	1886703a 	and	r3,r3,r2
   12664:	2941ffcc 	andi	r5,r5,2047
   12668:	800d883a 	mov	r6,r16
   1266c:	0005883a 	mov	r2,zero
   12670:	280a953a 	slli	r5,r5,20
   12674:	31803fcc 	andi	r6,r6,255
   12678:	01000434 	movhi	r4,16
   1267c:	300c97fa 	slli	r6,r6,31
   12680:	213fffc4 	addi	r4,r4,-1
   12684:	1906703a 	and	r3,r3,r4
   12688:	1946b03a 	or	r3,r3,r5
   1268c:	1986b03a 	or	r3,r3,r6
   12690:	dfc00217 	ldw	ra,8(sp)
   12694:	dc400117 	ldw	r17,4(sp)
   12698:	dc000017 	ldw	r16,0(sp)
   1269c:	dec00304 	addi	sp,sp,12
   126a0:	f800283a 	ret
   126a4:	00c002c4 	movi	r3,11
   126a8:	1887c83a 	sub	r3,r3,r2
   126ac:	88c6d83a 	srl	r3,r17,r3
   126b0:	8904983a 	sll	r2,r17,r4
   126b4:	01000434 	movhi	r4,16
   126b8:	213fffc4 	addi	r4,r4,-1
   126bc:	2941ffcc 	andi	r5,r5,2047
   126c0:	1906703a 	and	r3,r3,r4
   126c4:	800d883a 	mov	r6,r16
   126c8:	003fe906 	br	12670 <__alt_data_end+0xffff2670>
   126cc:	000d883a 	mov	r6,zero
   126d0:	000b883a 	mov	r5,zero
   126d4:	0007883a 	mov	r3,zero
   126d8:	0005883a 	mov	r2,zero
   126dc:	003fe406 	br	12670 <__alt_data_end+0xffff2670>
   126e0:	0123c83a 	sub	r17,zero,r4
   126e4:	003fd106 	br	1262c <__alt_data_end+0xffff262c>

000126e8 <__extendsfdf2>:
   126e8:	200ad5fa 	srli	r5,r4,23
   126ec:	defffd04 	addi	sp,sp,-12
   126f0:	dc400115 	stw	r17,4(sp)
   126f4:	29403fcc 	andi	r5,r5,255
   126f8:	29800044 	addi	r6,r5,1
   126fc:	04402034 	movhi	r17,128
   12700:	dc000015 	stw	r16,0(sp)
   12704:	8c7fffc4 	addi	r17,r17,-1
   12708:	dfc00215 	stw	ra,8(sp)
   1270c:	31803fcc 	andi	r6,r6,255
   12710:	00800044 	movi	r2,1
   12714:	8922703a 	and	r17,r17,r4
   12718:	2020d7fa 	srli	r16,r4,31
   1271c:	1180110e 	bge	r2,r6,12764 <__extendsfdf2+0x7c>
   12720:	880cd0fa 	srli	r6,r17,3
   12724:	8822977a 	slli	r17,r17,29
   12728:	2940e004 	addi	r5,r5,896
   1272c:	2941ffcc 	andi	r5,r5,2047
   12730:	2804953a 	slli	r2,r5,20
   12734:	01400434 	movhi	r5,16
   12738:	800697fa 	slli	r3,r16,31
   1273c:	297fffc4 	addi	r5,r5,-1
   12740:	314a703a 	and	r5,r6,r5
   12744:	288ab03a 	or	r5,r5,r2
   12748:	28c6b03a 	or	r3,r5,r3
   1274c:	8805883a 	mov	r2,r17
   12750:	dfc00217 	ldw	ra,8(sp)
   12754:	dc400117 	ldw	r17,4(sp)
   12758:	dc000017 	ldw	r16,0(sp)
   1275c:	dec00304 	addi	sp,sp,12
   12760:	f800283a 	ret
   12764:	2800111e 	bne	r5,zero,127ac <__extendsfdf2+0xc4>
   12768:	88001c26 	beq	r17,zero,127dc <__extendsfdf2+0xf4>
   1276c:	8809883a 	mov	r4,r17
   12770:	00129a00 	call	129a0 <__clzsi2>
   12774:	00c00284 	movi	r3,10
   12778:	18801b16 	blt	r3,r2,127e8 <__extendsfdf2+0x100>
   1277c:	018002c4 	movi	r6,11
   12780:	308dc83a 	sub	r6,r6,r2
   12784:	11000544 	addi	r4,r2,21
   12788:	8986d83a 	srl	r3,r17,r6
   1278c:	8922983a 	sll	r17,r17,r4
   12790:	0180e244 	movi	r6,905
   12794:	01400434 	movhi	r5,16
   12798:	3085c83a 	sub	r2,r6,r2
   1279c:	297fffc4 	addi	r5,r5,-1
   127a0:	194c703a 	and	r6,r3,r5
   127a4:	1141ffcc 	andi	r5,r2,2047
   127a8:	003fe006 	br	1272c <__alt_data_end+0xffff272c>
   127ac:	88000826 	beq	r17,zero,127d0 <__extendsfdf2+0xe8>
   127b0:	880cd0fa 	srli	r6,r17,3
   127b4:	00800434 	movhi	r2,16
   127b8:	10bfffc4 	addi	r2,r2,-1
   127bc:	31800234 	orhi	r6,r6,8
   127c0:	8822977a 	slli	r17,r17,29
   127c4:	308c703a 	and	r6,r6,r2
   127c8:	0141ffc4 	movi	r5,2047
   127cc:	003fd706 	br	1272c <__alt_data_end+0xffff272c>
   127d0:	0141ffc4 	movi	r5,2047
   127d4:	000d883a 	mov	r6,zero
   127d8:	003fd406 	br	1272c <__alt_data_end+0xffff272c>
   127dc:	000b883a 	mov	r5,zero
   127e0:	000d883a 	mov	r6,zero
   127e4:	003fd106 	br	1272c <__alt_data_end+0xffff272c>
   127e8:	11bffd44 	addi	r6,r2,-11
   127ec:	8986983a 	sll	r3,r17,r6
   127f0:	0023883a 	mov	r17,zero
   127f4:	003fe606 	br	12790 <__alt_data_end+0xffff2790>

000127f8 <__truncdfsf2>:
   127f8:	2810d53a 	srli	r8,r5,20
   127fc:	01c00434 	movhi	r7,16
   12800:	39ffffc4 	addi	r7,r7,-1
   12804:	29ce703a 	and	r7,r5,r7
   12808:	4201ffcc 	andi	r8,r8,2047
   1280c:	380e90fa 	slli	r7,r7,3
   12810:	200cd77a 	srli	r6,r4,29
   12814:	42400044 	addi	r9,r8,1
   12818:	4a41ffcc 	andi	r9,r9,2047
   1281c:	00c00044 	movi	r3,1
   12820:	280ad7fa 	srli	r5,r5,31
   12824:	31ceb03a 	or	r7,r6,r7
   12828:	200490fa 	slli	r2,r4,3
   1282c:	1a40230e 	bge	r3,r9,128bc <__truncdfsf2+0xc4>
   12830:	40ff2004 	addi	r3,r8,-896
   12834:	01803f84 	movi	r6,254
   12838:	30c01516 	blt	r6,r3,12890 <__truncdfsf2+0x98>
   1283c:	00c0380e 	bge	zero,r3,12920 <__truncdfsf2+0x128>
   12840:	200c91ba 	slli	r6,r4,6
   12844:	380e90fa 	slli	r7,r7,3
   12848:	1004d77a 	srli	r2,r2,29
   1284c:	300cc03a 	cmpne	r6,r6,zero
   12850:	31ccb03a 	or	r6,r6,r7
   12854:	308cb03a 	or	r6,r6,r2
   12858:	308001cc 	andi	r2,r6,7
   1285c:	10000426 	beq	r2,zero,12870 <__truncdfsf2+0x78>
   12860:	308003cc 	andi	r2,r6,15
   12864:	01000104 	movi	r4,4
   12868:	11000126 	beq	r2,r4,12870 <__truncdfsf2+0x78>
   1286c:	31800104 	addi	r6,r6,4
   12870:	3081002c 	andhi	r2,r6,1024
   12874:	10001626 	beq	r2,zero,128d0 <__truncdfsf2+0xd8>
   12878:	18c00044 	addi	r3,r3,1
   1287c:	00803fc4 	movi	r2,255
   12880:	18800326 	beq	r3,r2,12890 <__truncdfsf2+0x98>
   12884:	300c91ba 	slli	r6,r6,6
   12888:	300cd27a 	srli	r6,r6,9
   1288c:	00000206 	br	12898 <__truncdfsf2+0xa0>
   12890:	00ffffc4 	movi	r3,-1
   12894:	000d883a 	mov	r6,zero
   12898:	18c03fcc 	andi	r3,r3,255
   1289c:	180895fa 	slli	r4,r3,23
   128a0:	00c02034 	movhi	r3,128
   128a4:	280a97fa 	slli	r5,r5,31
   128a8:	18ffffc4 	addi	r3,r3,-1
   128ac:	30c6703a 	and	r3,r6,r3
   128b0:	1906b03a 	or	r3,r3,r4
   128b4:	1944b03a 	or	r2,r3,r5
   128b8:	f800283a 	ret
   128bc:	40000b1e 	bne	r8,zero,128ec <__truncdfsf2+0xf4>
   128c0:	388cb03a 	or	r6,r7,r2
   128c4:	0007883a 	mov	r3,zero
   128c8:	30000426 	beq	r6,zero,128dc <__truncdfsf2+0xe4>
   128cc:	01800144 	movi	r6,5
   128d0:	00803fc4 	movi	r2,255
   128d4:	300cd0fa 	srli	r6,r6,3
   128d8:	18800a26 	beq	r3,r2,12904 <__truncdfsf2+0x10c>
   128dc:	00802034 	movhi	r2,128
   128e0:	10bfffc4 	addi	r2,r2,-1
   128e4:	308c703a 	and	r6,r6,r2
   128e8:	003feb06 	br	12898 <__alt_data_end+0xffff2898>
   128ec:	3888b03a 	or	r4,r7,r2
   128f0:	203fe726 	beq	r4,zero,12890 <__alt_data_end+0xffff2890>
   128f4:	380c90fa 	slli	r6,r7,3
   128f8:	00c03fc4 	movi	r3,255
   128fc:	31808034 	orhi	r6,r6,512
   12900:	003fd506 	br	12858 <__alt_data_end+0xffff2858>
   12904:	303fe226 	beq	r6,zero,12890 <__alt_data_end+0xffff2890>
   12908:	00802034 	movhi	r2,128
   1290c:	31801034 	orhi	r6,r6,64
   12910:	10bfffc4 	addi	r2,r2,-1
   12914:	00ffffc4 	movi	r3,-1
   12918:	308c703a 	and	r6,r6,r2
   1291c:	003fde06 	br	12898 <__alt_data_end+0xffff2898>
   12920:	013ffa44 	movi	r4,-23
   12924:	19000e16 	blt	r3,r4,12960 <__truncdfsf2+0x168>
   12928:	01000784 	movi	r4,30
   1292c:	20c9c83a 	sub	r4,r4,r3
   12930:	018007c4 	movi	r6,31
   12934:	39c02034 	orhi	r7,r7,128
   12938:	31000b16 	blt	r6,r4,12968 <__truncdfsf2+0x170>
   1293c:	423f2084 	addi	r8,r8,-894
   12940:	120c983a 	sll	r6,r2,r8
   12944:	3a0e983a 	sll	r7,r7,r8
   12948:	1104d83a 	srl	r2,r2,r4
   1294c:	300cc03a 	cmpne	r6,r6,zero
   12950:	31ceb03a 	or	r7,r6,r7
   12954:	388cb03a 	or	r6,r7,r2
   12958:	0007883a 	mov	r3,zero
   1295c:	003fbe06 	br	12858 <__alt_data_end+0xffff2858>
   12960:	0007883a 	mov	r3,zero
   12964:	003fd906 	br	128cc <__alt_data_end+0xffff28cc>
   12968:	01bfff84 	movi	r6,-2
   1296c:	30cdc83a 	sub	r6,r6,r3
   12970:	00c00804 	movi	r3,32
   12974:	398cd83a 	srl	r6,r7,r6
   12978:	20c00726 	beq	r4,r3,12998 <__truncdfsf2+0x1a0>
   1297c:	423f2884 	addi	r8,r8,-862
   12980:	3a0e983a 	sll	r7,r7,r8
   12984:	3884b03a 	or	r2,r7,r2
   12988:	1004c03a 	cmpne	r2,r2,zero
   1298c:	118cb03a 	or	r6,r2,r6
   12990:	0007883a 	mov	r3,zero
   12994:	003fb006 	br	12858 <__alt_data_end+0xffff2858>
   12998:	000f883a 	mov	r7,zero
   1299c:	003ff906 	br	12984 <__alt_data_end+0xffff2984>

000129a0 <__clzsi2>:
   129a0:	00bfffd4 	movui	r2,65535
   129a4:	11000536 	bltu	r2,r4,129bc <__clzsi2+0x1c>
   129a8:	00803fc4 	movi	r2,255
   129ac:	11000f36 	bltu	r2,r4,129ec <__clzsi2+0x4c>
   129b0:	00800804 	movi	r2,32
   129b4:	0007883a 	mov	r3,zero
   129b8:	00000506 	br	129d0 <__clzsi2+0x30>
   129bc:	00804034 	movhi	r2,256
   129c0:	10bfffc4 	addi	r2,r2,-1
   129c4:	11000c2e 	bgeu	r2,r4,129f8 <__clzsi2+0x58>
   129c8:	00800204 	movi	r2,8
   129cc:	00c00604 	movi	r3,24
   129d0:	20c8d83a 	srl	r4,r4,r3
   129d4:	00c00074 	movhi	r3,1
   129d8:	18cdbd04 	addi	r3,r3,14068
   129dc:	1909883a 	add	r4,r3,r4
   129e0:	20c00003 	ldbu	r3,0(r4)
   129e4:	10c5c83a 	sub	r2,r2,r3
   129e8:	f800283a 	ret
   129ec:	00800604 	movi	r2,24
   129f0:	00c00204 	movi	r3,8
   129f4:	003ff606 	br	129d0 <__alt_data_end+0xffff29d0>
   129f8:	00800404 	movi	r2,16
   129fc:	1007883a 	mov	r3,r2
   12a00:	003ff306 	br	129d0 <__alt_data_end+0xffff29d0>

00012a04 <__divsi3>:
   12a04:	20001b16 	blt	r4,zero,12a74 <__divsi3+0x70>
   12a08:	000f883a 	mov	r7,zero
   12a0c:	28001616 	blt	r5,zero,12a68 <__divsi3+0x64>
   12a10:	200d883a 	mov	r6,r4
   12a14:	29001a2e 	bgeu	r5,r4,12a80 <__divsi3+0x7c>
   12a18:	00800804 	movi	r2,32
   12a1c:	00c00044 	movi	r3,1
   12a20:	00000106 	br	12a28 <__divsi3+0x24>
   12a24:	10000d26 	beq	r2,zero,12a5c <__divsi3+0x58>
   12a28:	294b883a 	add	r5,r5,r5
   12a2c:	10bfffc4 	addi	r2,r2,-1
   12a30:	18c7883a 	add	r3,r3,r3
   12a34:	293ffb36 	bltu	r5,r4,12a24 <__alt_data_end+0xffff2a24>
   12a38:	0005883a 	mov	r2,zero
   12a3c:	18000726 	beq	r3,zero,12a5c <__divsi3+0x58>
   12a40:	0005883a 	mov	r2,zero
   12a44:	31400236 	bltu	r6,r5,12a50 <__divsi3+0x4c>
   12a48:	314dc83a 	sub	r6,r6,r5
   12a4c:	10c4b03a 	or	r2,r2,r3
   12a50:	1806d07a 	srli	r3,r3,1
   12a54:	280ad07a 	srli	r5,r5,1
   12a58:	183ffa1e 	bne	r3,zero,12a44 <__alt_data_end+0xffff2a44>
   12a5c:	38000126 	beq	r7,zero,12a64 <__divsi3+0x60>
   12a60:	0085c83a 	sub	r2,zero,r2
   12a64:	f800283a 	ret
   12a68:	014bc83a 	sub	r5,zero,r5
   12a6c:	39c0005c 	xori	r7,r7,1
   12a70:	003fe706 	br	12a10 <__alt_data_end+0xffff2a10>
   12a74:	0109c83a 	sub	r4,zero,r4
   12a78:	01c00044 	movi	r7,1
   12a7c:	003fe306 	br	12a0c <__alt_data_end+0xffff2a0c>
   12a80:	00c00044 	movi	r3,1
   12a84:	003fee06 	br	12a40 <__alt_data_end+0xffff2a40>

00012a88 <__modsi3>:
   12a88:	20001716 	blt	r4,zero,12ae8 <__modsi3+0x60>
   12a8c:	000f883a 	mov	r7,zero
   12a90:	2005883a 	mov	r2,r4
   12a94:	28001216 	blt	r5,zero,12ae0 <__modsi3+0x58>
   12a98:	2900162e 	bgeu	r5,r4,12af4 <__modsi3+0x6c>
   12a9c:	01800804 	movi	r6,32
   12aa0:	00c00044 	movi	r3,1
   12aa4:	00000106 	br	12aac <__modsi3+0x24>
   12aa8:	30000a26 	beq	r6,zero,12ad4 <__modsi3+0x4c>
   12aac:	294b883a 	add	r5,r5,r5
   12ab0:	31bfffc4 	addi	r6,r6,-1
   12ab4:	18c7883a 	add	r3,r3,r3
   12ab8:	293ffb36 	bltu	r5,r4,12aa8 <__alt_data_end+0xffff2aa8>
   12abc:	18000526 	beq	r3,zero,12ad4 <__modsi3+0x4c>
   12ac0:	1806d07a 	srli	r3,r3,1
   12ac4:	11400136 	bltu	r2,r5,12acc <__modsi3+0x44>
   12ac8:	1145c83a 	sub	r2,r2,r5
   12acc:	280ad07a 	srli	r5,r5,1
   12ad0:	183ffb1e 	bne	r3,zero,12ac0 <__alt_data_end+0xffff2ac0>
   12ad4:	38000126 	beq	r7,zero,12adc <__modsi3+0x54>
   12ad8:	0085c83a 	sub	r2,zero,r2
   12adc:	f800283a 	ret
   12ae0:	014bc83a 	sub	r5,zero,r5
   12ae4:	003fec06 	br	12a98 <__alt_data_end+0xffff2a98>
   12ae8:	0109c83a 	sub	r4,zero,r4
   12aec:	01c00044 	movi	r7,1
   12af0:	003fe706 	br	12a90 <__alt_data_end+0xffff2a90>
   12af4:	00c00044 	movi	r3,1
   12af8:	003ff106 	br	12ac0 <__alt_data_end+0xffff2ac0>

00012afc <__udivsi3>:
   12afc:	200d883a 	mov	r6,r4
   12b00:	2900152e 	bgeu	r5,r4,12b58 <__udivsi3+0x5c>
   12b04:	28001416 	blt	r5,zero,12b58 <__udivsi3+0x5c>
   12b08:	00800804 	movi	r2,32
   12b0c:	00c00044 	movi	r3,1
   12b10:	00000206 	br	12b1c <__udivsi3+0x20>
   12b14:	10000e26 	beq	r2,zero,12b50 <__udivsi3+0x54>
   12b18:	28000516 	blt	r5,zero,12b30 <__udivsi3+0x34>
   12b1c:	294b883a 	add	r5,r5,r5
   12b20:	10bfffc4 	addi	r2,r2,-1
   12b24:	18c7883a 	add	r3,r3,r3
   12b28:	293ffa36 	bltu	r5,r4,12b14 <__alt_data_end+0xffff2b14>
   12b2c:	18000826 	beq	r3,zero,12b50 <__udivsi3+0x54>
   12b30:	0005883a 	mov	r2,zero
   12b34:	31400236 	bltu	r6,r5,12b40 <__udivsi3+0x44>
   12b38:	314dc83a 	sub	r6,r6,r5
   12b3c:	10c4b03a 	or	r2,r2,r3
   12b40:	1806d07a 	srli	r3,r3,1
   12b44:	280ad07a 	srli	r5,r5,1
   12b48:	183ffa1e 	bne	r3,zero,12b34 <__alt_data_end+0xffff2b34>
   12b4c:	f800283a 	ret
   12b50:	0005883a 	mov	r2,zero
   12b54:	f800283a 	ret
   12b58:	00c00044 	movi	r3,1
   12b5c:	003ff406 	br	12b30 <__alt_data_end+0xffff2b30>

00012b60 <__umodsi3>:
   12b60:	2005883a 	mov	r2,r4
   12b64:	2900122e 	bgeu	r5,r4,12bb0 <__umodsi3+0x50>
   12b68:	28001116 	blt	r5,zero,12bb0 <__umodsi3+0x50>
   12b6c:	01800804 	movi	r6,32
   12b70:	00c00044 	movi	r3,1
   12b74:	00000206 	br	12b80 <__umodsi3+0x20>
   12b78:	30000c26 	beq	r6,zero,12bac <__umodsi3+0x4c>
   12b7c:	28000516 	blt	r5,zero,12b94 <__umodsi3+0x34>
   12b80:	294b883a 	add	r5,r5,r5
   12b84:	31bfffc4 	addi	r6,r6,-1
   12b88:	18c7883a 	add	r3,r3,r3
   12b8c:	293ffa36 	bltu	r5,r4,12b78 <__alt_data_end+0xffff2b78>
   12b90:	18000626 	beq	r3,zero,12bac <__umodsi3+0x4c>
   12b94:	1806d07a 	srli	r3,r3,1
   12b98:	11400136 	bltu	r2,r5,12ba0 <__umodsi3+0x40>
   12b9c:	1145c83a 	sub	r2,r2,r5
   12ba0:	280ad07a 	srli	r5,r5,1
   12ba4:	183ffb1e 	bne	r3,zero,12b94 <__alt_data_end+0xffff2b94>
   12ba8:	f800283a 	ret
   12bac:	f800283a 	ret
   12bb0:	00c00044 	movi	r3,1
   12bb4:	003ff706 	br	12b94 <__alt_data_end+0xffff2b94>

00012bb8 <__mulsi3>:
   12bb8:	0005883a 	mov	r2,zero
   12bbc:	20000726 	beq	r4,zero,12bdc <__mulsi3+0x24>
   12bc0:	20c0004c 	andi	r3,r4,1
   12bc4:	2008d07a 	srli	r4,r4,1
   12bc8:	18000126 	beq	r3,zero,12bd0 <__mulsi3+0x18>
   12bcc:	1145883a 	add	r2,r2,r5
   12bd0:	294b883a 	add	r5,r5,r5
   12bd4:	203ffa1e 	bne	r4,zero,12bc0 <__alt_data_end+0xffff2bc0>
   12bd8:	f800283a 	ret
   12bdc:	f800283a 	ret

00012be0 <_printf_r>:
   12be0:	defffd04 	addi	sp,sp,-12
   12be4:	dfc00015 	stw	ra,0(sp)
   12be8:	d9800115 	stw	r6,4(sp)
   12bec:	d9c00215 	stw	r7,8(sp)
   12bf0:	20c00217 	ldw	r3,8(r4)
   12bf4:	01800074 	movhi	r6,1
   12bf8:	318cb304 	addi	r6,r6,13004
   12bfc:	19800115 	stw	r6,4(r3)
   12c00:	280d883a 	mov	r6,r5
   12c04:	21400217 	ldw	r5,8(r4)
   12c08:	d9c00104 	addi	r7,sp,4
   12c0c:	0012d840 	call	12d84 <___vfprintf_internal_r>
   12c10:	dfc00017 	ldw	ra,0(sp)
   12c14:	dec00304 	addi	sp,sp,12
   12c18:	f800283a 	ret

00012c1c <printf>:
   12c1c:	defffc04 	addi	sp,sp,-16
   12c20:	dfc00015 	stw	ra,0(sp)
   12c24:	d9400115 	stw	r5,4(sp)
   12c28:	d9800215 	stw	r6,8(sp)
   12c2c:	d9c00315 	stw	r7,12(sp)
   12c30:	00800074 	movhi	r2,1
   12c34:	108e3604 	addi	r2,r2,14552
   12c38:	10800017 	ldw	r2,0(r2)
   12c3c:	01400074 	movhi	r5,1
   12c40:	294cb304 	addi	r5,r5,13004
   12c44:	10c00217 	ldw	r3,8(r2)
   12c48:	d9800104 	addi	r6,sp,4
   12c4c:	19400115 	stw	r5,4(r3)
   12c50:	200b883a 	mov	r5,r4
   12c54:	11000217 	ldw	r4,8(r2)
   12c58:	00132b00 	call	132b0 <__vfprintf_internal>
   12c5c:	dfc00017 	ldw	ra,0(sp)
   12c60:	dec00404 	addi	sp,sp,16
   12c64:	f800283a 	ret

00012c68 <_puts_r>:
   12c68:	defffd04 	addi	sp,sp,-12
   12c6c:	dc000015 	stw	r16,0(sp)
   12c70:	2021883a 	mov	r16,r4
   12c74:	2809883a 	mov	r4,r5
   12c78:	dfc00215 	stw	ra,8(sp)
   12c7c:	dc400115 	stw	r17,4(sp)
   12c80:	2823883a 	mov	r17,r5
   12c84:	0012cfc0 	call	12cfc <strlen>
   12c88:	81400217 	ldw	r5,8(r16)
   12c8c:	01000074 	movhi	r4,1
   12c90:	210cb304 	addi	r4,r4,13004
   12c94:	29000115 	stw	r4,4(r5)
   12c98:	100f883a 	mov	r7,r2
   12c9c:	880d883a 	mov	r6,r17
   12ca0:	8009883a 	mov	r4,r16
   12ca4:	00132cc0 	call	132cc <__sfvwrite_small_dev>
   12ca8:	00ffffc4 	movi	r3,-1
   12cac:	10c00926 	beq	r2,r3,12cd4 <_puts_r+0x6c>
   12cb0:	81400217 	ldw	r5,8(r16)
   12cb4:	01800074 	movhi	r6,1
   12cb8:	01c00044 	movi	r7,1
   12cbc:	28800117 	ldw	r2,4(r5)
   12cc0:	318da504 	addi	r6,r6,13972
   12cc4:	8009883a 	mov	r4,r16
   12cc8:	103ee83a 	callr	r2
   12ccc:	10bfffe0 	cmpeqi	r2,r2,-1
   12cd0:	0085c83a 	sub	r2,zero,r2
   12cd4:	dfc00217 	ldw	ra,8(sp)
   12cd8:	dc400117 	ldw	r17,4(sp)
   12cdc:	dc000017 	ldw	r16,0(sp)
   12ce0:	dec00304 	addi	sp,sp,12
   12ce4:	f800283a 	ret

00012ce8 <puts>:
   12ce8:	00800074 	movhi	r2,1
   12cec:	108e3604 	addi	r2,r2,14552
   12cf0:	200b883a 	mov	r5,r4
   12cf4:	11000017 	ldw	r4,0(r2)
   12cf8:	0012c681 	jmpi	12c68 <_puts_r>

00012cfc <strlen>:
   12cfc:	2005883a 	mov	r2,r4
   12d00:	10c00007 	ldb	r3,0(r2)
   12d04:	18000226 	beq	r3,zero,12d10 <strlen+0x14>
   12d08:	10800044 	addi	r2,r2,1
   12d0c:	003ffc06 	br	12d00 <__alt_data_end+0xffff2d00>
   12d10:	1105c83a 	sub	r2,r2,r4
   12d14:	f800283a 	ret

00012d18 <print_repeat>:
   12d18:	defffb04 	addi	sp,sp,-20
   12d1c:	dc800315 	stw	r18,12(sp)
   12d20:	dc400215 	stw	r17,8(sp)
   12d24:	dc000115 	stw	r16,4(sp)
   12d28:	dfc00415 	stw	ra,16(sp)
   12d2c:	2025883a 	mov	r18,r4
   12d30:	2823883a 	mov	r17,r5
   12d34:	d9800005 	stb	r6,0(sp)
   12d38:	3821883a 	mov	r16,r7
   12d3c:	04000a0e 	bge	zero,r16,12d68 <print_repeat+0x50>
   12d40:	88800117 	ldw	r2,4(r17)
   12d44:	01c00044 	movi	r7,1
   12d48:	d80d883a 	mov	r6,sp
   12d4c:	880b883a 	mov	r5,r17
   12d50:	9009883a 	mov	r4,r18
   12d54:	103ee83a 	callr	r2
   12d58:	843fffc4 	addi	r16,r16,-1
   12d5c:	103ff726 	beq	r2,zero,12d3c <__alt_data_end+0xffff2d3c>
   12d60:	00bfffc4 	movi	r2,-1
   12d64:	00000106 	br	12d6c <print_repeat+0x54>
   12d68:	0005883a 	mov	r2,zero
   12d6c:	dfc00417 	ldw	ra,16(sp)
   12d70:	dc800317 	ldw	r18,12(sp)
   12d74:	dc400217 	ldw	r17,8(sp)
   12d78:	dc000117 	ldw	r16,4(sp)
   12d7c:	dec00504 	addi	sp,sp,20
   12d80:	f800283a 	ret

00012d84 <___vfprintf_internal_r>:
   12d84:	deffe504 	addi	sp,sp,-108
   12d88:	d8c00804 	addi	r3,sp,32
   12d8c:	ddc01815 	stw	r23,96(sp)
   12d90:	dd801715 	stw	r22,92(sp)
   12d94:	dd401615 	stw	r21,88(sp)
   12d98:	dd001515 	stw	r20,84(sp)
   12d9c:	dcc01415 	stw	r19,80(sp)
   12da0:	dc801315 	stw	r18,76(sp)
   12da4:	dc401215 	stw	r17,72(sp)
   12da8:	dc001115 	stw	r16,68(sp)
   12dac:	dfc01a15 	stw	ra,104(sp)
   12db0:	df001915 	stw	fp,100(sp)
   12db4:	2029883a 	mov	r20,r4
   12db8:	2823883a 	mov	r17,r5
   12dbc:	382d883a 	mov	r22,r7
   12dc0:	d9800f15 	stw	r6,60(sp)
   12dc4:	0021883a 	mov	r16,zero
   12dc8:	d8000e15 	stw	zero,56(sp)
   12dcc:	d8000a15 	stw	zero,40(sp)
   12dd0:	002b883a 	mov	r21,zero
   12dd4:	0027883a 	mov	r19,zero
   12dd8:	0025883a 	mov	r18,zero
   12ddc:	d8000c15 	stw	zero,48(sp)
   12de0:	d8000b15 	stw	zero,44(sp)
   12de4:	002f883a 	mov	r23,zero
   12de8:	d8c00915 	stw	r3,36(sp)
   12dec:	d8c00f17 	ldw	r3,60(sp)
   12df0:	19000003 	ldbu	r4,0(r3)
   12df4:	20803fcc 	andi	r2,r4,255
   12df8:	1080201c 	xori	r2,r2,128
   12dfc:	10bfe004 	addi	r2,r2,-128
   12e00:	10011e26 	beq	r2,zero,1327c <___vfprintf_internal_r+0x4f8>
   12e04:	00c00044 	movi	r3,1
   12e08:	b8c01426 	beq	r23,r3,12e5c <___vfprintf_internal_r+0xd8>
   12e0c:	1dc00216 	blt	r3,r23,12e18 <___vfprintf_internal_r+0x94>
   12e10:	b8000626 	beq	r23,zero,12e2c <___vfprintf_internal_r+0xa8>
   12e14:	00011506 	br	1326c <___vfprintf_internal_r+0x4e8>
   12e18:	01400084 	movi	r5,2
   12e1c:	b9401d26 	beq	r23,r5,12e94 <___vfprintf_internal_r+0x110>
   12e20:	014000c4 	movi	r5,3
   12e24:	b9402b26 	beq	r23,r5,12ed4 <___vfprintf_internal_r+0x150>
   12e28:	00011006 	br	1326c <___vfprintf_internal_r+0x4e8>
   12e2c:	01400944 	movi	r5,37
   12e30:	1140fc26 	beq	r2,r5,13224 <___vfprintf_internal_r+0x4a0>
   12e34:	88800117 	ldw	r2,4(r17)
   12e38:	d9000005 	stb	r4,0(sp)
   12e3c:	01c00044 	movi	r7,1
   12e40:	d80d883a 	mov	r6,sp
   12e44:	880b883a 	mov	r5,r17
   12e48:	a009883a 	mov	r4,r20
   12e4c:	103ee83a 	callr	r2
   12e50:	1000d81e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   12e54:	84000044 	addi	r16,r16,1
   12e58:	00010406 	br	1326c <___vfprintf_internal_r+0x4e8>
   12e5c:	01400c04 	movi	r5,48
   12e60:	1140fa26 	beq	r2,r5,1324c <___vfprintf_internal_r+0x4c8>
   12e64:	01400944 	movi	r5,37
   12e68:	11400a1e 	bne	r2,r5,12e94 <___vfprintf_internal_r+0x110>
   12e6c:	d8800005 	stb	r2,0(sp)
   12e70:	88800117 	ldw	r2,4(r17)
   12e74:	b80f883a 	mov	r7,r23
   12e78:	d80d883a 	mov	r6,sp
   12e7c:	880b883a 	mov	r5,r17
   12e80:	a009883a 	mov	r4,r20
   12e84:	103ee83a 	callr	r2
   12e88:	1000ca1e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   12e8c:	84000044 	addi	r16,r16,1
   12e90:	0000f506 	br	13268 <___vfprintf_internal_r+0x4e4>
   12e94:	25fff404 	addi	r23,r4,-48
   12e98:	bdc03fcc 	andi	r23,r23,255
   12e9c:	00c00244 	movi	r3,9
   12ea0:	1dc00936 	bltu	r3,r23,12ec8 <___vfprintf_internal_r+0x144>
   12ea4:	00bfffc4 	movi	r2,-1
   12ea8:	90800426 	beq	r18,r2,12ebc <___vfprintf_internal_r+0x138>
   12eac:	01400284 	movi	r5,10
   12eb0:	9009883a 	mov	r4,r18
   12eb4:	0012bb80 	call	12bb8 <__mulsi3>
   12eb8:	00000106 	br	12ec0 <___vfprintf_internal_r+0x13c>
   12ebc:	0005883a 	mov	r2,zero
   12ec0:	b8a5883a 	add	r18,r23,r2
   12ec4:	0000e206 	br	13250 <___vfprintf_internal_r+0x4cc>
   12ec8:	01400b84 	movi	r5,46
   12ecc:	1140e426 	beq	r2,r5,13260 <___vfprintf_internal_r+0x4dc>
   12ed0:	05c00084 	movi	r23,2
   12ed4:	213ff404 	addi	r4,r4,-48
   12ed8:	27003fcc 	andi	fp,r4,255
   12edc:	00c00244 	movi	r3,9
   12ee0:	1f000936 	bltu	r3,fp,12f08 <___vfprintf_internal_r+0x184>
   12ee4:	00bfffc4 	movi	r2,-1
   12ee8:	98800426 	beq	r19,r2,12efc <___vfprintf_internal_r+0x178>
   12eec:	01400284 	movi	r5,10
   12ef0:	9809883a 	mov	r4,r19
   12ef4:	0012bb80 	call	12bb8 <__mulsi3>
   12ef8:	00000106 	br	12f00 <___vfprintf_internal_r+0x17c>
   12efc:	0005883a 	mov	r2,zero
   12f00:	e0a7883a 	add	r19,fp,r2
   12f04:	0000d906 	br	1326c <___vfprintf_internal_r+0x4e8>
   12f08:	00c01b04 	movi	r3,108
   12f0c:	10c0d226 	beq	r2,r3,13258 <___vfprintf_internal_r+0x4d4>
   12f10:	013fffc4 	movi	r4,-1
   12f14:	99000226 	beq	r19,r4,12f20 <___vfprintf_internal_r+0x19c>
   12f18:	d8000b15 	stw	zero,44(sp)
   12f1c:	00000106 	br	12f24 <___vfprintf_internal_r+0x1a0>
   12f20:	04c00044 	movi	r19,1
   12f24:	01001a44 	movi	r4,105
   12f28:	11001626 	beq	r2,r4,12f84 <___vfprintf_internal_r+0x200>
   12f2c:	20800916 	blt	r4,r2,12f54 <___vfprintf_internal_r+0x1d0>
   12f30:	010018c4 	movi	r4,99
   12f34:	11008826 	beq	r2,r4,13158 <___vfprintf_internal_r+0x3d4>
   12f38:	01001904 	movi	r4,100
   12f3c:	11001126 	beq	r2,r4,12f84 <___vfprintf_internal_r+0x200>
   12f40:	01001604 	movi	r4,88
   12f44:	1100c81e 	bne	r2,r4,13268 <___vfprintf_internal_r+0x4e4>
   12f48:	00c00044 	movi	r3,1
   12f4c:	d8c00e15 	stw	r3,56(sp)
   12f50:	00001506 	br	12fa8 <___vfprintf_internal_r+0x224>
   12f54:	01001cc4 	movi	r4,115
   12f58:	11009826 	beq	r2,r4,131bc <___vfprintf_internal_r+0x438>
   12f5c:	20800416 	blt	r4,r2,12f70 <___vfprintf_internal_r+0x1ec>
   12f60:	01001bc4 	movi	r4,111
   12f64:	1100c01e 	bne	r2,r4,13268 <___vfprintf_internal_r+0x4e4>
   12f68:	05400204 	movi	r21,8
   12f6c:	00000f06 	br	12fac <___vfprintf_internal_r+0x228>
   12f70:	01001d44 	movi	r4,117
   12f74:	11000d26 	beq	r2,r4,12fac <___vfprintf_internal_r+0x228>
   12f78:	01001e04 	movi	r4,120
   12f7c:	11000a26 	beq	r2,r4,12fa8 <___vfprintf_internal_r+0x224>
   12f80:	0000b906 	br	13268 <___vfprintf_internal_r+0x4e4>
   12f84:	d8c00a17 	ldw	r3,40(sp)
   12f88:	b7000104 	addi	fp,r22,4
   12f8c:	18000726 	beq	r3,zero,12fac <___vfprintf_internal_r+0x228>
   12f90:	df000d15 	stw	fp,52(sp)
   12f94:	b5c00017 	ldw	r23,0(r22)
   12f98:	b800080e 	bge	r23,zero,12fbc <___vfprintf_internal_r+0x238>
   12f9c:	05efc83a 	sub	r23,zero,r23
   12fa0:	02400044 	movi	r9,1
   12fa4:	00000606 	br	12fc0 <___vfprintf_internal_r+0x23c>
   12fa8:	05400404 	movi	r21,16
   12fac:	b0c00104 	addi	r3,r22,4
   12fb0:	d8c00d15 	stw	r3,52(sp)
   12fb4:	b5c00017 	ldw	r23,0(r22)
   12fb8:	d8000a15 	stw	zero,40(sp)
   12fbc:	0013883a 	mov	r9,zero
   12fc0:	d839883a 	mov	fp,sp
   12fc4:	b8001726 	beq	r23,zero,13024 <___vfprintf_internal_r+0x2a0>
   12fc8:	a80b883a 	mov	r5,r21
   12fcc:	b809883a 	mov	r4,r23
   12fd0:	da401015 	stw	r9,64(sp)
   12fd4:	0012afc0 	call	12afc <__udivsi3>
   12fd8:	a80b883a 	mov	r5,r21
   12fdc:	1009883a 	mov	r4,r2
   12fe0:	102d883a 	mov	r22,r2
   12fe4:	0012bb80 	call	12bb8 <__mulsi3>
   12fe8:	b885c83a 	sub	r2,r23,r2
   12fec:	00c00244 	movi	r3,9
   12ff0:	da401017 	ldw	r9,64(sp)
   12ff4:	18800216 	blt	r3,r2,13000 <___vfprintf_internal_r+0x27c>
   12ff8:	10800c04 	addi	r2,r2,48
   12ffc:	00000506 	br	13014 <___vfprintf_internal_r+0x290>
   13000:	d8c00e17 	ldw	r3,56(sp)
   13004:	18000226 	beq	r3,zero,13010 <___vfprintf_internal_r+0x28c>
   13008:	10800dc4 	addi	r2,r2,55
   1300c:	00000106 	br	13014 <___vfprintf_internal_r+0x290>
   13010:	108015c4 	addi	r2,r2,87
   13014:	e0800005 	stb	r2,0(fp)
   13018:	b02f883a 	mov	r23,r22
   1301c:	e7000044 	addi	fp,fp,1
   13020:	003fe806 	br	12fc4 <__alt_data_end+0xffff2fc4>
   13024:	e6efc83a 	sub	r23,fp,sp
   13028:	9dc5c83a 	sub	r2,r19,r23
   1302c:	0080090e 	bge	zero,r2,13054 <___vfprintf_internal_r+0x2d0>
   13030:	e085883a 	add	r2,fp,r2
   13034:	01400c04 	movi	r5,48
   13038:	d8c00917 	ldw	r3,36(sp)
   1303c:	e009883a 	mov	r4,fp
   13040:	e0c0032e 	bgeu	fp,r3,13050 <___vfprintf_internal_r+0x2cc>
   13044:	e7000044 	addi	fp,fp,1
   13048:	21400005 	stb	r5,0(r4)
   1304c:	e0bffa1e 	bne	fp,r2,13038 <__alt_data_end+0xffff3038>
   13050:	e6efc83a 	sub	r23,fp,sp
   13054:	d8c00b17 	ldw	r3,44(sp)
   13058:	4dd1883a 	add	r8,r9,r23
   1305c:	922dc83a 	sub	r22,r18,r8
   13060:	18001626 	beq	r3,zero,130bc <___vfprintf_internal_r+0x338>
   13064:	48000a26 	beq	r9,zero,13090 <___vfprintf_internal_r+0x30c>
   13068:	00800b44 	movi	r2,45
   1306c:	d8800805 	stb	r2,32(sp)
   13070:	88800117 	ldw	r2,4(r17)
   13074:	01c00044 	movi	r7,1
   13078:	d9800804 	addi	r6,sp,32
   1307c:	880b883a 	mov	r5,r17
   13080:	a009883a 	mov	r4,r20
   13084:	103ee83a 	callr	r2
   13088:	10004a1e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   1308c:	84000044 	addi	r16,r16,1
   13090:	0580070e 	bge	zero,r22,130b0 <___vfprintf_internal_r+0x32c>
   13094:	b00f883a 	mov	r7,r22
   13098:	01800c04 	movi	r6,48
   1309c:	880b883a 	mov	r5,r17
   130a0:	a009883a 	mov	r4,r20
   130a4:	0012d180 	call	12d18 <print_repeat>
   130a8:	1000421e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   130ac:	85a1883a 	add	r16,r16,r22
   130b0:	e02d883a 	mov	r22,fp
   130b4:	bf2fc83a 	sub	r23,r23,fp
   130b8:	00002006 	br	1313c <___vfprintf_internal_r+0x3b8>
   130bc:	0580090e 	bge	zero,r22,130e4 <___vfprintf_internal_r+0x360>
   130c0:	b00f883a 	mov	r7,r22
   130c4:	01800804 	movi	r6,32
   130c8:	880b883a 	mov	r5,r17
   130cc:	a009883a 	mov	r4,r20
   130d0:	da401015 	stw	r9,64(sp)
   130d4:	0012d180 	call	12d18 <print_repeat>
   130d8:	da401017 	ldw	r9,64(sp)
   130dc:	1000351e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   130e0:	85a1883a 	add	r16,r16,r22
   130e4:	483ff226 	beq	r9,zero,130b0 <__alt_data_end+0xffff30b0>
   130e8:	00800b44 	movi	r2,45
   130ec:	d8800805 	stb	r2,32(sp)
   130f0:	88800117 	ldw	r2,4(r17)
   130f4:	01c00044 	movi	r7,1
   130f8:	d9800804 	addi	r6,sp,32
   130fc:	880b883a 	mov	r5,r17
   13100:	a009883a 	mov	r4,r20
   13104:	103ee83a 	callr	r2
   13108:	10002a1e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   1310c:	84000044 	addi	r16,r16,1
   13110:	003fe706 	br	130b0 <__alt_data_end+0xffff30b0>
   13114:	b5bfffc4 	addi	r22,r22,-1
   13118:	b0800003 	ldbu	r2,0(r22)
   1311c:	01c00044 	movi	r7,1
   13120:	d9800804 	addi	r6,sp,32
   13124:	d8800805 	stb	r2,32(sp)
   13128:	88800117 	ldw	r2,4(r17)
   1312c:	880b883a 	mov	r5,r17
   13130:	a009883a 	mov	r4,r20
   13134:	103ee83a 	callr	r2
   13138:	10001e1e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   1313c:	8585c83a 	sub	r2,r16,r22
   13140:	b5c9883a 	add	r4,r22,r23
   13144:	e085883a 	add	r2,fp,r2
   13148:	013ff216 	blt	zero,r4,13114 <__alt_data_end+0xffff3114>
   1314c:	1021883a 	mov	r16,r2
   13150:	dd800d17 	ldw	r22,52(sp)
   13154:	00004406 	br	13268 <___vfprintf_internal_r+0x4e4>
   13158:	00800044 	movi	r2,1
   1315c:	1480080e 	bge	r2,r18,13180 <___vfprintf_internal_r+0x3fc>
   13160:	95ffffc4 	addi	r23,r18,-1
   13164:	b80f883a 	mov	r7,r23
   13168:	01800804 	movi	r6,32
   1316c:	880b883a 	mov	r5,r17
   13170:	a009883a 	mov	r4,r20
   13174:	0012d180 	call	12d18 <print_repeat>
   13178:	10000e1e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   1317c:	85e1883a 	add	r16,r16,r23
   13180:	b0800017 	ldw	r2,0(r22)
   13184:	01c00044 	movi	r7,1
   13188:	d80d883a 	mov	r6,sp
   1318c:	d8800005 	stb	r2,0(sp)
   13190:	88800117 	ldw	r2,4(r17)
   13194:	880b883a 	mov	r5,r17
   13198:	a009883a 	mov	r4,r20
   1319c:	b5c00104 	addi	r23,r22,4
   131a0:	103ee83a 	callr	r2
   131a4:	1000031e 	bne	r2,zero,131b4 <___vfprintf_internal_r+0x430>
   131a8:	84000044 	addi	r16,r16,1
   131ac:	b82d883a 	mov	r22,r23
   131b0:	00002d06 	br	13268 <___vfprintf_internal_r+0x4e4>
   131b4:	00bfffc4 	movi	r2,-1
   131b8:	00003106 	br	13280 <___vfprintf_internal_r+0x4fc>
   131bc:	b5c00017 	ldw	r23,0(r22)
   131c0:	b7000104 	addi	fp,r22,4
   131c4:	b809883a 	mov	r4,r23
   131c8:	0012cfc0 	call	12cfc <strlen>
   131cc:	9091c83a 	sub	r8,r18,r2
   131d0:	102d883a 	mov	r22,r2
   131d4:	0200090e 	bge	zero,r8,131fc <___vfprintf_internal_r+0x478>
   131d8:	400f883a 	mov	r7,r8
   131dc:	01800804 	movi	r6,32
   131e0:	880b883a 	mov	r5,r17
   131e4:	a009883a 	mov	r4,r20
   131e8:	da001015 	stw	r8,64(sp)
   131ec:	0012d180 	call	12d18 <print_repeat>
   131f0:	da001017 	ldw	r8,64(sp)
   131f4:	103fef1e 	bne	r2,zero,131b4 <__alt_data_end+0xffff31b4>
   131f8:	8221883a 	add	r16,r16,r8
   131fc:	88800117 	ldw	r2,4(r17)
   13200:	b00f883a 	mov	r7,r22
   13204:	b80d883a 	mov	r6,r23
   13208:	880b883a 	mov	r5,r17
   1320c:	a009883a 	mov	r4,r20
   13210:	103ee83a 	callr	r2
   13214:	103fe71e 	bne	r2,zero,131b4 <__alt_data_end+0xffff31b4>
   13218:	85a1883a 	add	r16,r16,r22
   1321c:	e02d883a 	mov	r22,fp
   13220:	00001106 	br	13268 <___vfprintf_internal_r+0x4e4>
   13224:	00c00044 	movi	r3,1
   13228:	04ffffc4 	movi	r19,-1
   1322c:	d8000e15 	stw	zero,56(sp)
   13230:	d8c00a15 	stw	r3,40(sp)
   13234:	05400284 	movi	r21,10
   13238:	9825883a 	mov	r18,r19
   1323c:	d8000c15 	stw	zero,48(sp)
   13240:	d8000b15 	stw	zero,44(sp)
   13244:	182f883a 	mov	r23,r3
   13248:	00000806 	br	1326c <___vfprintf_internal_r+0x4e8>
   1324c:	ddc00b15 	stw	r23,44(sp)
   13250:	05c00084 	movi	r23,2
   13254:	00000506 	br	1326c <___vfprintf_internal_r+0x4e8>
   13258:	00c00044 	movi	r3,1
   1325c:	d8c00c15 	stw	r3,48(sp)
   13260:	05c000c4 	movi	r23,3
   13264:	00000106 	br	1326c <___vfprintf_internal_r+0x4e8>
   13268:	002f883a 	mov	r23,zero
   1326c:	d8c00f17 	ldw	r3,60(sp)
   13270:	18c00044 	addi	r3,r3,1
   13274:	d8c00f15 	stw	r3,60(sp)
   13278:	003edc06 	br	12dec <__alt_data_end+0xffff2dec>
   1327c:	8005883a 	mov	r2,r16
   13280:	dfc01a17 	ldw	ra,104(sp)
   13284:	df001917 	ldw	fp,100(sp)
   13288:	ddc01817 	ldw	r23,96(sp)
   1328c:	dd801717 	ldw	r22,92(sp)
   13290:	dd401617 	ldw	r21,88(sp)
   13294:	dd001517 	ldw	r20,84(sp)
   13298:	dcc01417 	ldw	r19,80(sp)
   1329c:	dc801317 	ldw	r18,76(sp)
   132a0:	dc401217 	ldw	r17,72(sp)
   132a4:	dc001117 	ldw	r16,68(sp)
   132a8:	dec01b04 	addi	sp,sp,108
   132ac:	f800283a 	ret

000132b0 <__vfprintf_internal>:
   132b0:	00800074 	movhi	r2,1
   132b4:	108e3604 	addi	r2,r2,14552
   132b8:	300f883a 	mov	r7,r6
   132bc:	280d883a 	mov	r6,r5
   132c0:	200b883a 	mov	r5,r4
   132c4:	11000017 	ldw	r4,0(r2)
   132c8:	0012d841 	jmpi	12d84 <___vfprintf_internal_r>

000132cc <__sfvwrite_small_dev>:
   132cc:	2880000b 	ldhu	r2,0(r5)
   132d0:	1080020c 	andi	r2,r2,8
   132d4:	10002126 	beq	r2,zero,1335c <__sfvwrite_small_dev+0x90>
   132d8:	2880008f 	ldh	r2,2(r5)
   132dc:	defffa04 	addi	sp,sp,-24
   132e0:	dc000015 	stw	r16,0(sp)
   132e4:	dfc00515 	stw	ra,20(sp)
   132e8:	dd000415 	stw	r20,16(sp)
   132ec:	dcc00315 	stw	r19,12(sp)
   132f0:	dc800215 	stw	r18,8(sp)
   132f4:	dc400115 	stw	r17,4(sp)
   132f8:	2821883a 	mov	r16,r5
   132fc:	10001216 	blt	r2,zero,13348 <__sfvwrite_small_dev+0x7c>
   13300:	2027883a 	mov	r19,r4
   13304:	3025883a 	mov	r18,r6
   13308:	3823883a 	mov	r17,r7
   1330c:	05010004 	movi	r20,1024
   13310:	04400b0e 	bge	zero,r17,13340 <__sfvwrite_small_dev+0x74>
   13314:	880f883a 	mov	r7,r17
   13318:	a440010e 	bge	r20,r17,13320 <__sfvwrite_small_dev+0x54>
   1331c:	01c10004 	movi	r7,1024
   13320:	8140008f 	ldh	r5,2(r16)
   13324:	900d883a 	mov	r6,r18
   13328:	9809883a 	mov	r4,r19
   1332c:	00133840 	call	13384 <_write_r>
   13330:	0080050e 	bge	zero,r2,13348 <__sfvwrite_small_dev+0x7c>
   13334:	88a3c83a 	sub	r17,r17,r2
   13338:	90a5883a 	add	r18,r18,r2
   1333c:	003ff406 	br	13310 <__alt_data_end+0xffff3310>
   13340:	0005883a 	mov	r2,zero
   13344:	00000706 	br	13364 <__sfvwrite_small_dev+0x98>
   13348:	8080000b 	ldhu	r2,0(r16)
   1334c:	10801014 	ori	r2,r2,64
   13350:	8080000d 	sth	r2,0(r16)
   13354:	00bfffc4 	movi	r2,-1
   13358:	00000206 	br	13364 <__sfvwrite_small_dev+0x98>
   1335c:	00bfffc4 	movi	r2,-1
   13360:	f800283a 	ret
   13364:	dfc00517 	ldw	ra,20(sp)
   13368:	dd000417 	ldw	r20,16(sp)
   1336c:	dcc00317 	ldw	r19,12(sp)
   13370:	dc800217 	ldw	r18,8(sp)
   13374:	dc400117 	ldw	r17,4(sp)
   13378:	dc000017 	ldw	r16,0(sp)
   1337c:	dec00604 	addi	sp,sp,24
   13380:	f800283a 	ret

00013384 <_write_r>:
   13384:	defffd04 	addi	sp,sp,-12
   13388:	dc000015 	stw	r16,0(sp)
   1338c:	04000074 	movhi	r16,1
   13390:	dc400115 	stw	r17,4(sp)
   13394:	840e7e04 	addi	r16,r16,14840
   13398:	2023883a 	mov	r17,r4
   1339c:	2809883a 	mov	r4,r5
   133a0:	300b883a 	mov	r5,r6
   133a4:	380d883a 	mov	r6,r7
   133a8:	dfc00215 	stw	ra,8(sp)
   133ac:	80000015 	stw	zero,0(r16)
   133b0:	00135240 	call	13524 <write>
   133b4:	00ffffc4 	movi	r3,-1
   133b8:	10c0031e 	bne	r2,r3,133c8 <_write_r+0x44>
   133bc:	80c00017 	ldw	r3,0(r16)
   133c0:	18000126 	beq	r3,zero,133c8 <_write_r+0x44>
   133c4:	88c00015 	stw	r3,0(r17)
   133c8:	dfc00217 	ldw	ra,8(sp)
   133cc:	dc400117 	ldw	r17,4(sp)
   133d0:	dc000017 	ldw	r16,0(sp)
   133d4:	dec00304 	addi	sp,sp,12
   133d8:	f800283a 	ret

000133dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   133dc:	deffff04 	addi	sp,sp,-4
   133e0:	01000074 	movhi	r4,1
   133e4:	01400074 	movhi	r5,1
   133e8:	dfc00015 	stw	ra,0(sp)
   133ec:	210dfd04 	addi	r4,r4,14324
   133f0:	294e3904 	addi	r5,r5,14564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   133f4:	2140061e 	bne	r4,r5,13410 <alt_load+0x34>
   133f8:	01000074 	movhi	r4,1
   133fc:	01400074 	movhi	r5,1
   13400:	21000804 	addi	r4,r4,32
   13404:	29400804 	addi	r5,r5,32
   13408:	2140121e 	bne	r4,r5,13454 <alt_load+0x78>
   1340c:	00000b06 	br	1343c <alt_load+0x60>
   13410:	00c00074 	movhi	r3,1
   13414:	18ce3904 	addi	r3,r3,14564
   13418:	1907c83a 	sub	r3,r3,r4
   1341c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13420:	10fff526 	beq	r2,r3,133f8 <__alt_data_end+0xffff33f8>
    {
      *to++ = *from++;
   13424:	114f883a 	add	r7,r2,r5
   13428:	39c00017 	ldw	r7,0(r7)
   1342c:	110d883a 	add	r6,r2,r4
   13430:	10800104 	addi	r2,r2,4
   13434:	31c00015 	stw	r7,0(r6)
   13438:	003ff906 	br	13420 <__alt_data_end+0xffff3420>
   1343c:	01000074 	movhi	r4,1
   13440:	01400074 	movhi	r5,1
   13444:	210d9d04 	addi	r4,r4,13940
   13448:	294d9d04 	addi	r5,r5,13940

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1344c:	2140101e 	bne	r4,r5,13490 <alt_load+0xb4>
   13450:	00000b06 	br	13480 <alt_load+0xa4>
   13454:	00c00074 	movhi	r3,1
   13458:	18c00804 	addi	r3,r3,32
   1345c:	1907c83a 	sub	r3,r3,r4
   13460:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13464:	10fff526 	beq	r2,r3,1343c <__alt_data_end+0xffff343c>
    {
      *to++ = *from++;
   13468:	114f883a 	add	r7,r2,r5
   1346c:	39c00017 	ldw	r7,0(r7)
   13470:	110d883a 	add	r6,r2,r4
   13474:	10800104 	addi	r2,r2,4
   13478:	31c00015 	stw	r7,0(r6)
   1347c:	003ff906 	br	13464 <__alt_data_end+0xffff3464>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13480:	00136640 	call	13664 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   13484:	dfc00017 	ldw	ra,0(sp)
   13488:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1348c:	00136681 	jmpi	13668 <alt_icache_flush_all>
   13490:	00c00074 	movhi	r3,1
   13494:	18cdfd04 	addi	r3,r3,14324
   13498:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1349c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   134a0:	18bff726 	beq	r3,r2,13480 <__alt_data_end+0xffff3480>
    {
      *to++ = *from++;
   134a4:	114f883a 	add	r7,r2,r5
   134a8:	39c00017 	ldw	r7,0(r7)
   134ac:	110d883a 	add	r6,r2,r4
   134b0:	10800104 	addi	r2,r2,4
   134b4:	31c00015 	stw	r7,0(r6)
   134b8:	003ff906 	br	134a0 <__alt_data_end+0xffff34a0>

000134bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134c8:	00135840 	call	13584 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   134cc:	00135a40 	call	135a4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   134d0:	d1a04a17 	ldw	r6,-32472(gp)
   134d4:	d1604b17 	ldw	r5,-32468(gp)
   134d8:	d1204c17 	ldw	r4,-32464(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   134dc:	dfc00017 	ldw	ra,0(sp)
   134e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   134e4:	00105341 	jmpi	10534 <main>

000134e8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   134e8:	defffe04 	addi	sp,sp,-8
   134ec:	dc000015 	stw	r16,0(sp)
   134f0:	dfc00115 	stw	ra,4(sp)
   134f4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   134f8:	0012cfc0 	call	12cfc <strlen>
   134fc:	01000074 	movhi	r4,1
   13500:	000f883a 	mov	r7,zero
   13504:	100d883a 	mov	r6,r2
   13508:	800b883a 	mov	r5,r16
   1350c:	210e3704 	addi	r4,r4,14556
#else
    return fputs(str, stdout);
#endif
#endif
}
   13510:	dfc00117 	ldw	ra,4(sp)
   13514:	dc000017 	ldw	r16,0(sp)
   13518:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1351c:	00135a81 	jmpi	135a8 <altera_avalon_jtag_uart_write>

00013520 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   13520:	00135dc1 	jmpi	135dc <alt_busy_sleep>

00013524 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   13524:	00800044 	movi	r2,1
   13528:	20800226 	beq	r4,r2,13534 <write+0x10>
   1352c:	00800084 	movi	r2,2
   13530:	2080041e 	bne	r4,r2,13544 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   13534:	01000074 	movhi	r4,1
   13538:	000f883a 	mov	r7,zero
   1353c:	210e3704 	addi	r4,r4,14556
   13540:	00135a81 	jmpi	135a8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   13544:	d0a00317 	ldw	r2,-32756(gp)
   13548:	10000926 	beq	r2,zero,13570 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1354c:	deffff04 	addi	sp,sp,-4
   13550:	dfc00015 	stw	ra,0(sp)
   13554:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13558:	00c01444 	movi	r3,81
   1355c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   13560:	00bfffc4 	movi	r2,-1
   13564:	dfc00017 	ldw	ra,0(sp)
   13568:	dec00104 	addi	sp,sp,4
   1356c:	f800283a 	ret
   13570:	d0a04904 	addi	r2,gp,-32476
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13574:	00c01444 	movi	r3,81
   13578:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   1357c:	00bfffc4 	movi	r2,-1
   13580:	f800283a 	ret

00013584 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13584:	deffff04 	addi	sp,sp,-4
   13588:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1358c:	001366c0 	call	1366c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13590:	00800044 	movi	r2,1
   13594:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13598:	dfc00017 	ldw	ra,0(sp)
   1359c:	dec00104 	addi	sp,sp,4
   135a0:	f800283a 	ret

000135a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   135a4:	f800283a 	ret

000135a8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   135a8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   135ac:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   135b0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   135b4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   135b8:	2980072e 	bgeu	r5,r6,135d8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   135bc:	38c00037 	ldwio	r3,0(r7)
   135c0:	18ffffec 	andhi	r3,r3,65535
   135c4:	183ffc26 	beq	r3,zero,135b8 <__alt_data_end+0xffff35b8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   135c8:	28c00007 	ldb	r3,0(r5)
   135cc:	20c00035 	stwio	r3,0(r4)
   135d0:	29400044 	addi	r5,r5,1
   135d4:	003ff806 	br	135b8 <__alt_data_end+0xffff35b8>

  return count;
}
   135d8:	f800283a 	ret

000135dc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   135dc:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   135e0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   135e4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   135e8:	dc000015 	stw	r16,0(sp)
   135ec:	dfc00115 	stw	ra,4(sp)
   135f0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   135f4:	0012afc0 	call	12afc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   135f8:	10001026 	beq	r2,zero,1363c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   135fc:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13600:	013999b4 	movhi	r4,58982
   13604:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   13608:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1360c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   13610:	297fffc4 	addi	r5,r5,-1
   13614:	283ffe1e 	bne	r5,zero,13610 <__alt_data_end+0xffff3610>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13618:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1361c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13620:	18bffb16 	blt	r3,r2,13610 <__alt_data_end+0xffff3610>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13624:	01400144 	movi	r5,5
   13628:	8009883a 	mov	r4,r16
   1362c:	0012bb80 	call	12bb8 <__mulsi3>
   13630:	10bfffc4 	addi	r2,r2,-1
   13634:	103ffe1e 	bne	r2,zero,13630 <__alt_data_end+0xffff3630>
   13638:	00000506 	br	13650 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1363c:	01400144 	movi	r5,5
   13640:	8009883a 	mov	r4,r16
   13644:	0012bb80 	call	12bb8 <__mulsi3>
   13648:	10bfffc4 	addi	r2,r2,-1
   1364c:	00bffe16 	blt	zero,r2,13648 <__alt_data_end+0xffff3648>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   13650:	0005883a 	mov	r2,zero
   13654:	dfc00117 	ldw	ra,4(sp)
   13658:	dc000017 	ldw	r16,0(sp)
   1365c:	dec00204 	addi	sp,sp,8
   13660:	f800283a 	ret

00013664 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13664:	f800283a 	ret

00013668 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13668:	f800283a 	ret

0001366c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1366c:	000170fa 	wrctl	ienable,zero
   13670:	f800283a 	ret
