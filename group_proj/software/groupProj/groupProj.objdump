
groupProj.elf:     file format elf32-littlenios2
groupProj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002634 memsz 0x00002634 flags r-x
    LOAD off    0x00003654 vaddr 0x00012654 paddr 0x00012828 align 2**12
         filesz 0x000001d4 memsz 0x000001d4 flags rw-
    LOAD off    0x000039fc vaddr 0x000129fc paddr 0x000129fc align 2**12
         filesz 0x00000000 memsz 0x00000034 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00003828  2**0
                  CONTENTS
  2 .text         00002584  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  000125a4  000125a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001d4  00012654  00012828  00003654  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000034  000129fc  000129fc  000039fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012a30  00012a30  00003828  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000450  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000073f7  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002536  00000000  00000000  0000b097  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000286a  00000000  00000000  0000d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b34  00000000  00000000  0000fe38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e4f  00000000  00000000  0001096c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fc1  00000000  00000000  000127bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001577c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  000157e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00017779  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001777c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001777f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017780  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00017781  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001778a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00017793  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0001779c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  000177a3  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00068d3e  00000000  00000000  000177cf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000125a4 l    d  .rodata	00000000 .rodata
00012654 l    d  .rwdata	00000000 .rwdata
000129fc l    d  .bss	00000000 .bss
00012a30 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../groupProj_bsp//obj/HAL/src/crt0.o
000100a8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 MPU6050.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000104bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012654 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001276c l     O .rwdata	0000009c vic_0
00012734 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00011790 l     F .text	000000b8 optional_irq_callback
000116d0 l     F .text	00000078 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012068 l     F .text	00000054 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00012634 l     O .rodata	00000020 VEC_SIZE_ARRAY.1850
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00010e0c g     F .text	0000002c alt_main
0001040c g     F .text	00000080 _puts_r
00010118 g     F .text	0000006c write_reg_MPU
00012828 g       *ABS*	00000000 __flash_rwdata_start
000103c0 g     F .text	0000004c printf
00011150 g     F .text	00000080 alt_avalon_i2c_rx_read
00011670 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00010190 g     F .text	000000f0 init_MPU
00011030 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
00011cc8 g     F .text	00000170 alt_avalon_i2c_master_transmit_using_interrupts
00012810 g     O .rwdata	00000004 jtag_uart
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012a00 g     O .bss	00000004 errno
00012a08 g     O .bss	00000004 alt_argv
0001a808 g       *ABS*	00000000 _gp
00010e38 g     F .text	00000004 usleep
0001192c g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
00011108 g     F .text	00000010 alt_avalon_i2c_is_busy
00010fd8 g     F .text	00000058 alt_avalon_i2c_master_config_set
00012104 g       .text	00000000 VIC_0_VECTOR_TABLE
000123c0 g     F .text	00000074 alt_find_dev
0001035c g     F .text	00000028 memcpy
00010280 g     F .text	0000003c get_x_accel_MPU
0001135c g     F .text	00000138 alt_avalon_i2c_master_transmit
0001048c g     F .text	00000014 puts
00010384 g     F .text	0000003c _printf_r
00010c70 g     F .text	00000064 .hidden __udivsi3
0001253c g     F .text	00000038 alt_icache_flush
00010f30 g     F .text	00000048 alt_avalon_i2c_enable
00011684 g     F .text	0000004c alt_avalon_i2c_int_disable
00011494 g     F .text	000001a8 alt_avalon_i2c_master_receive
00011748 g     F .text	00000048 alt_avalon_i2c_int_enable
00012808 g     O .rwdata	00000004 _global_impure_ptr
00012a30 g       *ABS*	00000000 __bss_end
00012484 g     F .text	000000b8 alt_tick
0001163c g     F .text	00000018 alt_avalon_i2c_int_status_get
00012440 g     F .text	00000044 alt_alarm_stop
00010f18 g     F .text	00000010 alt_avalon_i2c_register_callback
00011c18 g     F .text	000000b0 alt_avalon_i2c_init
0001233c g     F .text	00000018 alt_dcache_flush_all
00012184 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00012828 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010e3c g     F .text	00000060 write
00011200 g     F .text	0000001c alt_avalon_i2c_check_arblost
00011664 g     F .text	0000000c alt_avalon_i2c_int_clear
00012654 g       *ABS*	00000000 __ram_rodata_end
00012814 g     O .rwdata	00000008 alt_avalon_i2c_list
00010cd4 g     F .text	00000058 .hidden __umodsi3
00012a30 g       *ABS*	00000000 end
00010f28 g     F .text	00000008 alt_avalon_i2c_open
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011e38 g     F .text	000000c4 alt_avalon_i2c_master_tx
000120bc g     F .text	00000048 alt_avalon_timer_sc_init
00012034 g     F .text	00000034 altera_avalon_jtag_uart_write
00010528 g     F .text	00000524 ___vfprintf_internal_r
00012a1c g     O .bss	00000014 wr_buf
00010efc g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00010020 g     F .text	0000008c _start
00012a18 g     O .bss	00000004 _alt_tick_rate
000102e4 g     F .text	00000028 get_z_accel_MPU
0001196c g     F .text	00000180 alt_avalon_i2c_master_receive_using_interrupts
00011944 g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
00012a14 g     O .bss	00000004 _alt_nticks
00010ec8 g     F .text	00000034 alt_sys_init
00011efc g     F .text	00000138 alt_avalon_i2c_master_tx_rx
00012654 g       *ABS*	00000000 __ram_rwdata_start
000125a4 g       *ABS*	00000000 __ram_rodata_start
00010184 g     F .text	0000000c write_byte_MPU
000102bc g     F .text	00000028 get_y_accel_MPU
000122c4 g     F .text	00000078 alt_busy_sleep
00012574 g     F .text	00000030 memcmp
00011118 g     F .text	00000038 alt_avalon_i2c_rx_read_available
00012a30 g       *ABS*	00000000 __alt_stack_base
000129fc g     O .bss	00000004 i2c_dev
00012354 g     F .text	0000006c alt_dev_llist_insert
00011848 g     F .text	000000e4 alt_avalon_i2c_interrupt_transaction_status
000100d8 g     F .text	00000034 read_reg_MPU
000111e4 g     F .text	0000001c alt_avalon_i2c_check_nack
00010a68 g     F .text	000000b8 __sfvwrite_small_dev
000129fc g       *ABS*	00000000 __bss_start
0001030c g     F .text	00000050 main
000111dc g     F .text	00000008 alt_avalon_i2c_master_target_set
00012a04 g     O .bss	00000004 alt_envp
00011654 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
0001281c g     O .rwdata	00000004 alt_errno
00010b78 g     F .text	00000084 .hidden __divsi3
00012a10 g     O .bss	00000004 alt_vic_dev_list
000125a4 g       *ABS*	00000000 __flash_rodata_start
00010e9c g     F .text	0000002c alt_irq_init
00010b20 g     F .text	00000058 _write_r
0001280c g     O .rwdata	00000004 _impure_ptr
00012a0c g     O .bss	00000004 alt_argc
000111d0 g     F .text	0000000c alt_avalon_i2c_master_target_get
000112e4 g     F .text	00000078 alt_avalon_i2c_send_address
0001219c g     F .text	000000b0 alt_vic_irq_init
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011bec g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0001224c g     F .text	00000078 alt_ic_isr_register
00010f78 g     F .text	0000001c alt_avalon_i2c_disable
00012828 g       *ABS*	00000000 _edata
00012a30 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010f94 g     F .text	00000044 alt_avalon_i2c_master_config_get
00010bfc g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001107c g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
0001121c g     F .text	000000c8 alt_avalon_i2c_cmd_write
0001001c g       .entry	00000000 _exit
000104a0 g     F .text	0000001c strlen
00012434 g     F .text	0000000c alt_icache_flush_all
00010a4c g     F .text	0000001c __vfprintf_internal
00012820 g     O .rwdata	00000008 alt_alarm_list
00011bd4 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0001010c g     F .text	0000000c read_byte_MPU
00010d2c g     F .text	000000e0 alt_load
000100ac g     F .text	0000002c check_MPU
00011aec g     F .text	000000e8 alt_avalon_i2c_master_rx



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>

Disassembly of section .text:

00010020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
   10020:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
   10024:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
   10028:	10000426 	beq	r2,zero,1003c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
   1002c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
   10030:	07400074 	movhi	ea,1
    ori ea, ea, %lo(0f)
   10034:	ef400f14 	ori	ea,ea,60
    eret
   10038:	ef80083a 	eret

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   1003c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10040:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10044:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10048:	00bffd16 	blt	zero,r2,10040 <__alt_data_end+0xffff0040>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1004c:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10050:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10054:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10058:	d6aa0214 	ori	gp,gp,43016
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
   1005c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
   10060:	00c00114 	movui	r3,4
    movhi r4, 1     /* Constant to increment STATUS.PRS */
   10064:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
   10068:	1105883a 	add	r2,r2,r4
    wrctl status, r2
   1006c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
   10070:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
   10074:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
   10078:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
   1007c:	183ffa1e 	bne	r3,zero,10068 <__alt_data_end+0xffff0068>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10080:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10084:	108a7f14 	ori	r2,r2,10748

    movhi r3, %hi(__bss_end)
   10088:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1008c:	18ca8c14 	ori	r3,r3,10800

    beq r2, r3, 1f
   10090:	10c00326 	beq	r2,r3,100a0 <_start+0x80>

0:
    stw zero, (r2)
   10094:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10098:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1009c:	10fffd36 	bltu	r2,r3,10094 <__alt_data_end+0xffff0094>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   100a0:	0010d2c0 	call	10d2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   100a4:	0010e0c0 	call	10e0c <alt_main>

000100a8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   100a8:	003fff06 	br	100a8 <__alt_data_end+0xffff00a8>

000100ac <check_MPU>:



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   100ac:	d1207d17 	ldw	r4,-32268(gp)

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
   100b0:	defffe04 	addi	sp,sp,-8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   100b4:	000f883a 	mov	r7,zero
   100b8:	000d883a 	mov	r6,zero
   100bc:	d80b883a 	mov	r5,sp

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
   100c0:	dfc00115 	stw	ra,4(sp)
	alt_u8 buff_nil = 0;
   100c4:	d8000005 	stb	zero,0(sp)
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   100c8:	0011e380 	call	11e38 <alt_avalon_i2c_master_tx>
	return ret;
}
   100cc:	dfc00117 	ldw	ra,4(sp)
   100d0:	dec00204 	addi	sp,sp,8
   100d4:	f800283a 	ret

000100d8 <read_reg_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
   100d8:	defffc04 	addi	sp,sp,-16
   100dc:	d9000205 	stb	r4,8(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
   100e0:	d1207d17 	ldw	r4,-32268(gp)
   100e4:	d9800015 	stw	r6,0(sp)
   100e8:	280f883a 	mov	r7,r5
   100ec:	d8000115 	stw	zero,4(sp)
   100f0:	01800044 	movi	r6,1
   100f4:	d9400204 	addi	r5,sp,8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
	return ret;
}

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
   100f8:	dfc00315 	stw	ra,12(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
   100fc:	0011efc0 	call	11efc <alt_avalon_i2c_master_tx_rx>
}
   10100:	dfc00317 	ldw	ra,12(sp)
   10104:	dec00404 	addi	sp,sp,16
   10108:	f800283a 	ret

0001010c <read_byte_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
   1010c:	01800044 	movi	r6,1
   10110:	21003fcc 	andi	r4,r4,255
   10114:	00100d81 	jmpi	100d8 <read_reg_MPU>

00010118 <write_reg_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   10118:	defffd04 	addi	sp,sp,-12
	wr_buf[0] = reg;
   1011c:	00800074 	movhi	r2,1

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   10120:	dc400115 	stw	r17,4(sp)
   10124:	dc000015 	stw	r16,0(sp)
   10128:	dfc00215 	stw	ra,8(sp)
	wr_buf[0] = reg;
   1012c:	108a8704 	addi	r2,r2,10780
   10130:	11000005 	stb	r4,0(r2)
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
   10134:	04400504 	movi	r17,20

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   10138:	3021883a 	mov	r16,r6
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
   1013c:	8980012e 	bgeu	r17,r6,10144 <write_reg_MPU+0x2c>
   10140:	880d883a 	mov	r6,r17
   10144:	01000074 	movhi	r4,1
   10148:	210a8c04 	addi	r4,r4,10800
   1014c:	001035c0 	call	1035c <memcpy>
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
   10150:	d1207d17 	ldw	r4,-32268(gp)
   10154:	8c000236 	bltu	r17,r16,10160 <write_reg_MPU+0x48>
   10158:	81800044 	addi	r6,r16,1
   1015c:	00000106 	br	10164 <write_reg_MPU+0x4c>
   10160:	01800504 	movi	r6,20
   10164:	01400074 	movhi	r5,1
   10168:	000f883a 	mov	r7,zero
   1016c:	294a8704 	addi	r5,r5,10780
}
   10170:	dfc00217 	ldw	ra,8(sp)
   10174:	dc400117 	ldw	r17,4(sp)
   10178:	dc000017 	ldw	r16,0(sp)
   1017c:	dec00304 	addi	sp,sp,12
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
   10180:	0011e381 	jmpi	11e38 <alt_avalon_i2c_master_tx>

00010184 <write_byte_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
   10184:	01800044 	movi	r6,1
   10188:	21003fcc 	andi	r4,r4,255
   1018c:	00101181 	jmpi	10118 <write_reg_MPU>

00010190 <init_MPU>:
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   10190:	01000074 	movhi	r4,1
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   10194:	defffd04 	addi	sp,sp,-12
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   10198:	21096904 	addi	r4,r4,9636
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   1019c:	dfc00215 	stw	ra,8(sp)
   101a0:	dc000115 	stw	r16,4(sp)
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   101a4:	0010f280 	call	10f28 <alt_avalon_i2c_open>
   101a8:	d0a07d15 	stw	r2,-32268(gp)
	if (NULL==i2c_dev)
   101ac:	1000051e 	bne	r2,zero,101c4 <init_MPU+0x34>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
   101b0:	01000074 	movhi	r4,1
   101b4:	21096c04 	addi	r4,r4,9648
   101b8:	001048c0 	call	1048c <puts>
		return 1;
   101bc:	00800044 	movi	r2,1
   101c0:	00002b06 	br	10270 <init_MPU+0xe0>
	}
	alt_avalon_i2c_master_target_set(i2c_dev,MPU_I2C_ADDR);
   101c4:	04001a04 	movi	r16,104
   101c8:	800b883a 	mov	r5,r16
   101cc:	1009883a 	mov	r4,r2
   101d0:	00111dc0 	call	111dc <alt_avalon_i2c_master_target_set>
	alt_u8 buf = 0x00;
   101d4:	d8000085 	stb	zero,2(sp)
	if (check_MPU() < 0){
   101d8:	00100ac0 	call	100ac <check_MPU>
		printf("Device Not Found\n");
		return 1;
	}else{
		printf("Device Found\n");
   101dc:	01000074 	movhi	r4,1
   101e0:	21097404 	addi	r4,r4,9680
   101e4:	001048c0 	call	1048c <puts>
	}
	read_reg_MPU(117, &buf, 1);
   101e8:	d9400084 	addi	r5,sp,2
   101ec:	01800044 	movi	r6,1
   101f0:	01001d44 	movi	r4,117
   101f4:	00100d80 	call	100d8 <read_reg_MPU>

	if (buf == 0x68){
   101f8:	d9400083 	ldbu	r5,2(sp)
   101fc:	2c00041e 	bne	r5,r16,10210 <init_MPU+0x80>
		printf("WhoAmI Passed\n");
   10200:	01000074 	movhi	r4,1
   10204:	21097804 	addi	r4,r4,9696
   10208:	001048c0 	call	1048c <puts>
   1020c:	00000306 	br	1021c <init_MPU+0x8c>
	}else{
		printf("WhoAmI Failed: %d\n", buf);
   10210:	01000074 	movhi	r4,1
   10214:	21097c04 	addi	r4,r4,9712
   10218:	00103c00 	call	103c0 <printf>
	}
	alt_u8 clear = 0;
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   1021c:	d9400044 	addi	r5,sp,1
   10220:	01001ac4 	movi	r4,107
	if (buf == 0x68){
		printf("WhoAmI Passed\n");
	}else{
		printf("WhoAmI Failed: %d\n", buf);
	}
	alt_u8 clear = 0;
   10224:	d8000045 	stb	zero,1(sp)
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   10228:	00101840 	call	10184 <write_byte_MPU>
	alt_u8 sleep;
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   1022c:	d80b883a 	mov	r5,sp
   10230:	01001ac4 	movi	r4,107
   10234:	001010c0 	call	1010c <read_byte_MPU>
	printf("Sleep Status: %d\n", sleep);
   10238:	d9400003 	ldbu	r5,0(sp)
   1023c:	01000074 	movhi	r4,1
   10240:	21098104 	addi	r4,r4,9732
   10244:	00103c00 	call	103c0 <printf>
	if ((sleep & 0x20)!=0){
   10248:	d8800003 	ldbu	r2,0(sp)
   1024c:	1080080c 	andi	r2,r2,32
   10250:	10000326 	beq	r2,zero,10260 <init_MPU+0xd0>
		printf("It's Sleeping\n");
   10254:	01000074 	movhi	r4,1
   10258:	21098604 	addi	r4,r4,9752
   1025c:	001048c0 	call	1048c <puts>
	}
	write_byte_MPU(28, &clear);
   10260:	d9400044 	addi	r5,sp,1
   10264:	01000704 	movi	r4,28
   10268:	00101840 	call	10184 <write_byte_MPU>
	return 0;
   1026c:	0005883a 	mov	r2,zero
}
   10270:	dfc00217 	ldw	ra,8(sp)
   10274:	dc000117 	ldw	r16,4(sp)
   10278:	dec00304 	addi	sp,sp,12
   1027c:	f800283a 	ret

00010280 <get_x_accel_MPU>:

alt_u16 get_x_accel_MPU(){
   10280:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(59, &msb);
   10284:	d80b883a 	mov	r5,sp
   10288:	01000ec4 	movi	r4,59
	}
	write_byte_MPU(28, &clear);
	return 0;
}

alt_u16 get_x_accel_MPU(){
   1028c:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(59, &msb);
   10290:	001010c0 	call	1010c <read_byte_MPU>
	read_byte_MPU(60, &lsb);
   10294:	d9400044 	addi	r5,sp,1
   10298:	01000f04 	movi	r4,60
   1029c:	001010c0 	call	1010c <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   102a0:	d8800003 	ldbu	r2,0(sp)
   102a4:	d8c00043 	ldbu	r3,1(sp)
   102a8:	1004923a 	slli	r2,r2,8
	return ret;
}
   102ac:	10c4b03a 	or	r2,r2,r3
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	dec00204 	addi	sp,sp,8
   102b8:	f800283a 	ret

000102bc <get_y_accel_MPU>:

alt_u16 get_y_accel_MPU(){
   102bc:	defffe04 	addi	sp,sp,-8
	alt_u16 ret;
	read_reg_MPU(MPU_REG_ACCEL_Y, &ret, 2);
   102c0:	01800084 	movi	r6,2
   102c4:	d80b883a 	mov	r5,sp
   102c8:	01000f44 	movi	r4,61
	read_byte_MPU(60, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return ret;
}

alt_u16 get_y_accel_MPU(){
   102cc:	dfc00115 	stw	ra,4(sp)
	alt_u16 ret;
	read_reg_MPU(MPU_REG_ACCEL_Y, &ret, 2);
   102d0:	00100d80 	call	100d8 <read_reg_MPU>
	return ret;
}
   102d4:	d880000b 	ldhu	r2,0(sp)
   102d8:	dfc00117 	ldw	ra,4(sp)
   102dc:	dec00204 	addi	sp,sp,8
   102e0:	f800283a 	ret

000102e4 <get_z_accel_MPU>:

alt_u16 get_z_accel_MPU(){
   102e4:	defffe04 	addi	sp,sp,-8
	alt_u16 ret;
	read_reg_MPU(MPU_REG_ACCEL_Z, &ret, 2);
   102e8:	01800084 	movi	r6,2
   102ec:	d80b883a 	mov	r5,sp
   102f0:	01000fc4 	movi	r4,63
	alt_u16 ret;
	read_reg_MPU(MPU_REG_ACCEL_Y, &ret, 2);
	return ret;
}

alt_u16 get_z_accel_MPU(){
   102f4:	dfc00115 	stw	ra,4(sp)
	alt_u16 ret;
	read_reg_MPU(MPU_REG_ACCEL_Z, &ret, 2);
   102f8:	00100d80 	call	100d8 <read_reg_MPU>
	return ret;
}
   102fc:	d880000b 	ldhu	r2,0(sp)
   10300:	dfc00117 	ldw	ra,4(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <main>:
#include "unistd.h"

#include "MPU6050.h"

int main()
{
   1030c:	defffe04 	addi	sp,sp,-8
   10310:	dc000015 	stw	r16,0(sp)
   10314:	dfc00115 	stw	ra,4(sp)
   10318:	04003204 	movi	r16,200
	for(int i = 0; i < 200; i++){
		printf("Start\n");
   1031c:	01000074 	movhi	r4,1
   10320:	21098a04 	addi	r4,r4,9768
   10324:	843fffc4 	addi	r16,r16,-1
   10328:	001048c0 	call	1048c <puts>

#include "MPU6050.h"

int main()
{
	for(int i = 0; i < 200; i++){
   1032c:	803ffb1e 	bne	r16,zero,1031c <__alt_data_end+0xffff031c>
		printf("Start\n");
	}


	init_MPU();
   10330:	00101900 	call	10190 <init_MPU>
	while(1){
		//printf("%d, %d, %d\n",  get_x_accel_MPU(),get_x_accel_MPU(),get_x_accel_MPU());
		alt_u16 ret = get_x_accel_MPU();
   10334:	00102800 	call	10280 <get_x_accel_MPU>
		printf("%d\n", *(alt_16 *) &ret );
   10338:	117fffcc 	andi	r5,r2,65535
   1033c:	2960001c 	xori	r5,r5,32768
   10340:	01000074 	movhi	r4,1
   10344:	29600004 	addi	r5,r5,-32768
   10348:	21098c04 	addi	r4,r4,9776
   1034c:	00103c00 	call	103c0 <printf>
		usleep(10000);
   10350:	0109c404 	movi	r4,10000
   10354:	0010e380 	call	10e38 <usleep>
   10358:	003ff606 	br	10334 <__alt_data_end+0xffff0334>

0001035c <memcpy>:
   1035c:	2005883a 	mov	r2,r4
   10360:	2007883a 	mov	r3,r4
   10364:	218d883a 	add	r6,r4,r6
   10368:	19800526 	beq	r3,r6,10380 <memcpy+0x24>
   1036c:	29000003 	ldbu	r4,0(r5)
   10370:	18c00044 	addi	r3,r3,1
   10374:	29400044 	addi	r5,r5,1
   10378:	193fffc5 	stb	r4,-1(r3)
   1037c:	003ffa06 	br	10368 <__alt_data_end+0xffff0368>
   10380:	f800283a 	ret

00010384 <_printf_r>:
   10384:	defffd04 	addi	sp,sp,-12
   10388:	dfc00015 	stw	ra,0(sp)
   1038c:	d9800115 	stw	r6,4(sp)
   10390:	d9c00215 	stw	r7,8(sp)
   10394:	20c00217 	ldw	r3,8(r4)
   10398:	01800074 	movhi	r6,1
   1039c:	31829a04 	addi	r6,r6,2664
   103a0:	19800115 	stw	r6,4(r3)
   103a4:	280d883a 	mov	r6,r5
   103a8:	21400217 	ldw	r5,8(r4)
   103ac:	d9c00104 	addi	r7,sp,4
   103b0:	00105280 	call	10528 <___vfprintf_internal_r>
   103b4:	dfc00017 	ldw	ra,0(sp)
   103b8:	dec00304 	addi	sp,sp,12
   103bc:	f800283a 	ret

000103c0 <printf>:
   103c0:	defffc04 	addi	sp,sp,-16
   103c4:	dfc00015 	stw	ra,0(sp)
   103c8:	d9400115 	stw	r5,4(sp)
   103cc:	d9800215 	stw	r6,8(sp)
   103d0:	d9c00315 	stw	r7,12(sp)
   103d4:	00800074 	movhi	r2,1
   103d8:	108a0304 	addi	r2,r2,10252
   103dc:	10800017 	ldw	r2,0(r2)
   103e0:	01400074 	movhi	r5,1
   103e4:	29429a04 	addi	r5,r5,2664
   103e8:	10c00217 	ldw	r3,8(r2)
   103ec:	d9800104 	addi	r6,sp,4
   103f0:	19400115 	stw	r5,4(r3)
   103f4:	200b883a 	mov	r5,r4
   103f8:	11000217 	ldw	r4,8(r2)
   103fc:	0010a4c0 	call	10a4c <__vfprintf_internal>
   10400:	dfc00017 	ldw	ra,0(sp)
   10404:	dec00404 	addi	sp,sp,16
   10408:	f800283a 	ret

0001040c <_puts_r>:
   1040c:	defffd04 	addi	sp,sp,-12
   10410:	dc000015 	stw	r16,0(sp)
   10414:	2021883a 	mov	r16,r4
   10418:	2809883a 	mov	r4,r5
   1041c:	dfc00215 	stw	ra,8(sp)
   10420:	dc400115 	stw	r17,4(sp)
   10424:	2823883a 	mov	r17,r5
   10428:	00104a00 	call	104a0 <strlen>
   1042c:	81400217 	ldw	r5,8(r16)
   10430:	01000074 	movhi	r4,1
   10434:	21029a04 	addi	r4,r4,2664
   10438:	29000115 	stw	r4,4(r5)
   1043c:	100f883a 	mov	r7,r2
   10440:	880d883a 	mov	r6,r17
   10444:	8009883a 	mov	r4,r16
   10448:	0010a680 	call	10a68 <__sfvwrite_small_dev>
   1044c:	00ffffc4 	movi	r3,-1
   10450:	10c00926 	beq	r2,r3,10478 <_puts_r+0x6c>
   10454:	81400217 	ldw	r5,8(r16)
   10458:	01800074 	movhi	r6,1
   1045c:	01c00044 	movi	r7,1
   10460:	28800117 	ldw	r2,4(r5)
   10464:	31898504 	addi	r6,r6,9748
   10468:	8009883a 	mov	r4,r16
   1046c:	103ee83a 	callr	r2
   10470:	10bfffe0 	cmpeqi	r2,r2,-1
   10474:	0085c83a 	sub	r2,zero,r2
   10478:	dfc00217 	ldw	ra,8(sp)
   1047c:	dc400117 	ldw	r17,4(sp)
   10480:	dc000017 	ldw	r16,0(sp)
   10484:	dec00304 	addi	sp,sp,12
   10488:	f800283a 	ret

0001048c <puts>:
   1048c:	00800074 	movhi	r2,1
   10490:	108a0304 	addi	r2,r2,10252
   10494:	200b883a 	mov	r5,r4
   10498:	11000017 	ldw	r4,0(r2)
   1049c:	001040c1 	jmpi	1040c <_puts_r>

000104a0 <strlen>:
   104a0:	2005883a 	mov	r2,r4
   104a4:	10c00007 	ldb	r3,0(r2)
   104a8:	18000226 	beq	r3,zero,104b4 <strlen+0x14>
   104ac:	10800044 	addi	r2,r2,1
   104b0:	003ffc06 	br	104a4 <__alt_data_end+0xffff04a4>
   104b4:	1105c83a 	sub	r2,r2,r4
   104b8:	f800283a 	ret

000104bc <print_repeat>:
   104bc:	defffb04 	addi	sp,sp,-20
   104c0:	dc800315 	stw	r18,12(sp)
   104c4:	dc400215 	stw	r17,8(sp)
   104c8:	dc000115 	stw	r16,4(sp)
   104cc:	dfc00415 	stw	ra,16(sp)
   104d0:	2025883a 	mov	r18,r4
   104d4:	2823883a 	mov	r17,r5
   104d8:	d9800005 	stb	r6,0(sp)
   104dc:	3821883a 	mov	r16,r7
   104e0:	04000a0e 	bge	zero,r16,1050c <print_repeat+0x50>
   104e4:	88800117 	ldw	r2,4(r17)
   104e8:	01c00044 	movi	r7,1
   104ec:	d80d883a 	mov	r6,sp
   104f0:	880b883a 	mov	r5,r17
   104f4:	9009883a 	mov	r4,r18
   104f8:	103ee83a 	callr	r2
   104fc:	843fffc4 	addi	r16,r16,-1
   10500:	103ff726 	beq	r2,zero,104e0 <__alt_data_end+0xffff04e0>
   10504:	00bfffc4 	movi	r2,-1
   10508:	00000106 	br	10510 <print_repeat+0x54>
   1050c:	0005883a 	mov	r2,zero
   10510:	dfc00417 	ldw	ra,16(sp)
   10514:	dc800317 	ldw	r18,12(sp)
   10518:	dc400217 	ldw	r17,8(sp)
   1051c:	dc000117 	ldw	r16,4(sp)
   10520:	dec00504 	addi	sp,sp,20
   10524:	f800283a 	ret

00010528 <___vfprintf_internal_r>:
   10528:	deffe504 	addi	sp,sp,-108
   1052c:	d8c00804 	addi	r3,sp,32
   10530:	df001915 	stw	fp,100(sp)
   10534:	ddc01815 	stw	r23,96(sp)
   10538:	dd801715 	stw	r22,92(sp)
   1053c:	dd401615 	stw	r21,88(sp)
   10540:	dd001515 	stw	r20,84(sp)
   10544:	dcc01415 	stw	r19,80(sp)
   10548:	dc801315 	stw	r18,76(sp)
   1054c:	dc401215 	stw	r17,72(sp)
   10550:	dc001115 	stw	r16,68(sp)
   10554:	dfc01a15 	stw	ra,104(sp)
   10558:	2027883a 	mov	r19,r4
   1055c:	2839883a 	mov	fp,r5
   10560:	382d883a 	mov	r22,r7
   10564:	d9800f15 	stw	r6,60(sp)
   10568:	0021883a 	mov	r16,zero
   1056c:	d8000e15 	stw	zero,56(sp)
   10570:	002f883a 	mov	r23,zero
   10574:	002b883a 	mov	r21,zero
   10578:	0025883a 	mov	r18,zero
   1057c:	0023883a 	mov	r17,zero
   10580:	d8000c15 	stw	zero,48(sp)
   10584:	d8000b15 	stw	zero,44(sp)
   10588:	0029883a 	mov	r20,zero
   1058c:	d8c00915 	stw	r3,36(sp)
   10590:	d8c00f17 	ldw	r3,60(sp)
   10594:	19000003 	ldbu	r4,0(r3)
   10598:	20803fcc 	andi	r2,r4,255
   1059c:	1080201c 	xori	r2,r2,128
   105a0:	10bfe004 	addi	r2,r2,-128
   105a4:	10011c26 	beq	r2,zero,10a18 <___vfprintf_internal_r+0x4f0>
   105a8:	00c00044 	movi	r3,1
   105ac:	a0c01426 	beq	r20,r3,10600 <___vfprintf_internal_r+0xd8>
   105b0:	1d000216 	blt	r3,r20,105bc <___vfprintf_internal_r+0x94>
   105b4:	a0000626 	beq	r20,zero,105d0 <___vfprintf_internal_r+0xa8>
   105b8:	00011306 	br	10a08 <___vfprintf_internal_r+0x4e0>
   105bc:	01400084 	movi	r5,2
   105c0:	a1401d26 	beq	r20,r5,10638 <___vfprintf_internal_r+0x110>
   105c4:	014000c4 	movi	r5,3
   105c8:	a1402926 	beq	r20,r5,10670 <___vfprintf_internal_r+0x148>
   105cc:	00010e06 	br	10a08 <___vfprintf_internal_r+0x4e0>
   105d0:	01400944 	movi	r5,37
   105d4:	1140fb26 	beq	r2,r5,109c4 <___vfprintf_internal_r+0x49c>
   105d8:	e0800117 	ldw	r2,4(fp)
   105dc:	d9000005 	stb	r4,0(sp)
   105e0:	01c00044 	movi	r7,1
   105e4:	d80d883a 	mov	r6,sp
   105e8:	e00b883a 	mov	r5,fp
   105ec:	9809883a 	mov	r4,r19
   105f0:	103ee83a 	callr	r2
   105f4:	1000d61e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   105f8:	84000044 	addi	r16,r16,1
   105fc:	00010206 	br	10a08 <___vfprintf_internal_r+0x4e0>
   10600:	01400c04 	movi	r5,48
   10604:	1140f826 	beq	r2,r5,109e8 <___vfprintf_internal_r+0x4c0>
   10608:	01400944 	movi	r5,37
   1060c:	11400a1e 	bne	r2,r5,10638 <___vfprintf_internal_r+0x110>
   10610:	d8800005 	stb	r2,0(sp)
   10614:	e0800117 	ldw	r2,4(fp)
   10618:	a00f883a 	mov	r7,r20
   1061c:	d80d883a 	mov	r6,sp
   10620:	e00b883a 	mov	r5,fp
   10624:	9809883a 	mov	r4,r19
   10628:	103ee83a 	callr	r2
   1062c:	1000c81e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   10630:	84000044 	addi	r16,r16,1
   10634:	0000f306 	br	10a04 <___vfprintf_internal_r+0x4dc>
   10638:	217ff404 	addi	r5,r4,-48
   1063c:	29403fcc 	andi	r5,r5,255
   10640:	00c00244 	movi	r3,9
   10644:	19400736 	bltu	r3,r5,10664 <___vfprintf_internal_r+0x13c>
   10648:	00bfffc4 	movi	r2,-1
   1064c:	88800226 	beq	r17,r2,10658 <___vfprintf_internal_r+0x130>
   10650:	8c4002a4 	muli	r17,r17,10
   10654:	00000106 	br	1065c <___vfprintf_internal_r+0x134>
   10658:	0023883a 	mov	r17,zero
   1065c:	2c63883a 	add	r17,r5,r17
   10660:	0000e206 	br	109ec <___vfprintf_internal_r+0x4c4>
   10664:	01400b84 	movi	r5,46
   10668:	1140e426 	beq	r2,r5,109fc <___vfprintf_internal_r+0x4d4>
   1066c:	05000084 	movi	r20,2
   10670:	213ff404 	addi	r4,r4,-48
   10674:	21003fcc 	andi	r4,r4,255
   10678:	00c00244 	movi	r3,9
   1067c:	19000736 	bltu	r3,r4,1069c <___vfprintf_internal_r+0x174>
   10680:	00bfffc4 	movi	r2,-1
   10684:	90800226 	beq	r18,r2,10690 <___vfprintf_internal_r+0x168>
   10688:	948002a4 	muli	r18,r18,10
   1068c:	00000106 	br	10694 <___vfprintf_internal_r+0x16c>
   10690:	0025883a 	mov	r18,zero
   10694:	24a5883a 	add	r18,r4,r18
   10698:	0000db06 	br	10a08 <___vfprintf_internal_r+0x4e0>
   1069c:	00c01b04 	movi	r3,108
   106a0:	10c0d426 	beq	r2,r3,109f4 <___vfprintf_internal_r+0x4cc>
   106a4:	013fffc4 	movi	r4,-1
   106a8:	91000226 	beq	r18,r4,106b4 <___vfprintf_internal_r+0x18c>
   106ac:	d8000b15 	stw	zero,44(sp)
   106b0:	00000106 	br	106b8 <___vfprintf_internal_r+0x190>
   106b4:	04800044 	movi	r18,1
   106b8:	01001a44 	movi	r4,105
   106bc:	11001626 	beq	r2,r4,10718 <___vfprintf_internal_r+0x1f0>
   106c0:	20800916 	blt	r4,r2,106e8 <___vfprintf_internal_r+0x1c0>
   106c4:	010018c4 	movi	r4,99
   106c8:	11008a26 	beq	r2,r4,108f4 <___vfprintf_internal_r+0x3cc>
   106cc:	01001904 	movi	r4,100
   106d0:	11001126 	beq	r2,r4,10718 <___vfprintf_internal_r+0x1f0>
   106d4:	01001604 	movi	r4,88
   106d8:	1100ca1e 	bne	r2,r4,10a04 <___vfprintf_internal_r+0x4dc>
   106dc:	00c00044 	movi	r3,1
   106e0:	d8c00e15 	stw	r3,56(sp)
   106e4:	00001406 	br	10738 <___vfprintf_internal_r+0x210>
   106e8:	01001cc4 	movi	r4,115
   106ec:	11009a26 	beq	r2,r4,10958 <___vfprintf_internal_r+0x430>
   106f0:	20800416 	blt	r4,r2,10704 <___vfprintf_internal_r+0x1dc>
   106f4:	01001bc4 	movi	r4,111
   106f8:	1100c21e 	bne	r2,r4,10a04 <___vfprintf_internal_r+0x4dc>
   106fc:	05400204 	movi	r21,8
   10700:	00000e06 	br	1073c <___vfprintf_internal_r+0x214>
   10704:	01001d44 	movi	r4,117
   10708:	11000c26 	beq	r2,r4,1073c <___vfprintf_internal_r+0x214>
   1070c:	01001e04 	movi	r4,120
   10710:	11000926 	beq	r2,r4,10738 <___vfprintf_internal_r+0x210>
   10714:	0000bb06 	br	10a04 <___vfprintf_internal_r+0x4dc>
   10718:	b5000104 	addi	r20,r22,4
   1071c:	b8000726 	beq	r23,zero,1073c <___vfprintf_internal_r+0x214>
   10720:	dd000d15 	stw	r20,52(sp)
   10724:	b5800017 	ldw	r22,0(r22)
   10728:	b000080e 	bge	r22,zero,1074c <___vfprintf_internal_r+0x224>
   1072c:	05adc83a 	sub	r22,zero,r22
   10730:	02800044 	movi	r10,1
   10734:	00000606 	br	10750 <___vfprintf_internal_r+0x228>
   10738:	05400404 	movi	r21,16
   1073c:	b0c00104 	addi	r3,r22,4
   10740:	d8c00d15 	stw	r3,52(sp)
   10744:	b5800017 	ldw	r22,0(r22)
   10748:	002f883a 	mov	r23,zero
   1074c:	0015883a 	mov	r10,zero
   10750:	d829883a 	mov	r20,sp
   10754:	b0001426 	beq	r22,zero,107a8 <___vfprintf_internal_r+0x280>
   10758:	b009883a 	mov	r4,r22
   1075c:	a80b883a 	mov	r5,r21
   10760:	da801015 	stw	r10,64(sp)
   10764:	0010c700 	call	10c70 <__udivsi3>
   10768:	1549383a 	mul	r4,r2,r21
   1076c:	00c00244 	movi	r3,9
   10770:	da801017 	ldw	r10,64(sp)
   10774:	b12dc83a 	sub	r22,r22,r4
   10778:	1d800216 	blt	r3,r22,10784 <___vfprintf_internal_r+0x25c>
   1077c:	b5800c04 	addi	r22,r22,48
   10780:	00000506 	br	10798 <___vfprintf_internal_r+0x270>
   10784:	d8c00e17 	ldw	r3,56(sp)
   10788:	18000226 	beq	r3,zero,10794 <___vfprintf_internal_r+0x26c>
   1078c:	b5800dc4 	addi	r22,r22,55
   10790:	00000106 	br	10798 <___vfprintf_internal_r+0x270>
   10794:	b58015c4 	addi	r22,r22,87
   10798:	a5800005 	stb	r22,0(r20)
   1079c:	a5000044 	addi	r20,r20,1
   107a0:	102d883a 	mov	r22,r2
   107a4:	003feb06 	br	10754 <__alt_data_end+0xffff0754>
   107a8:	a6c7c83a 	sub	r3,r20,sp
   107ac:	d8c00a15 	stw	r3,40(sp)
   107b0:	90c5c83a 	sub	r2,r18,r3
   107b4:	00800a0e 	bge	zero,r2,107e0 <___vfprintf_internal_r+0x2b8>
   107b8:	a085883a 	add	r2,r20,r2
   107bc:	01400c04 	movi	r5,48
   107c0:	d8c00917 	ldw	r3,36(sp)
   107c4:	a009883a 	mov	r4,r20
   107c8:	a0c0032e 	bgeu	r20,r3,107d8 <___vfprintf_internal_r+0x2b0>
   107cc:	a5000044 	addi	r20,r20,1
   107d0:	21400005 	stb	r5,0(r4)
   107d4:	a0bffa1e 	bne	r20,r2,107c0 <__alt_data_end+0xffff07c0>
   107d8:	a6c7c83a 	sub	r3,r20,sp
   107dc:	d8c00a15 	stw	r3,40(sp)
   107e0:	d8c00a17 	ldw	r3,40(sp)
   107e4:	50d3883a 	add	r9,r10,r3
   107e8:	d8c00b17 	ldw	r3,44(sp)
   107ec:	8a6dc83a 	sub	r22,r17,r9
   107f0:	18001726 	beq	r3,zero,10850 <___vfprintf_internal_r+0x328>
   107f4:	50000a26 	beq	r10,zero,10820 <___vfprintf_internal_r+0x2f8>
   107f8:	00800b44 	movi	r2,45
   107fc:	d8800805 	stb	r2,32(sp)
   10800:	e0800117 	ldw	r2,4(fp)
   10804:	01c00044 	movi	r7,1
   10808:	d9800804 	addi	r6,sp,32
   1080c:	e00b883a 	mov	r5,fp
   10810:	9809883a 	mov	r4,r19
   10814:	103ee83a 	callr	r2
   10818:	10004d1e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   1081c:	84000044 	addi	r16,r16,1
   10820:	0580070e 	bge	zero,r22,10840 <___vfprintf_internal_r+0x318>
   10824:	b00f883a 	mov	r7,r22
   10828:	01800c04 	movi	r6,48
   1082c:	e00b883a 	mov	r5,fp
   10830:	9809883a 	mov	r4,r19
   10834:	00104bc0 	call	104bc <print_repeat>
   10838:	1000451e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   1083c:	85a1883a 	add	r16,r16,r22
   10840:	d8c00a17 	ldw	r3,40(sp)
   10844:	a013883a 	mov	r9,r20
   10848:	1d2dc83a 	sub	r22,r3,r20
   1084c:	00002206 	br	108d8 <___vfprintf_internal_r+0x3b0>
   10850:	0580090e 	bge	zero,r22,10878 <___vfprintf_internal_r+0x350>
   10854:	b00f883a 	mov	r7,r22
   10858:	01800804 	movi	r6,32
   1085c:	e00b883a 	mov	r5,fp
   10860:	9809883a 	mov	r4,r19
   10864:	da801015 	stw	r10,64(sp)
   10868:	00104bc0 	call	104bc <print_repeat>
   1086c:	da801017 	ldw	r10,64(sp)
   10870:	1000371e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   10874:	85a1883a 	add	r16,r16,r22
   10878:	503ff126 	beq	r10,zero,10840 <__alt_data_end+0xffff0840>
   1087c:	00800b44 	movi	r2,45
   10880:	d8800805 	stb	r2,32(sp)
   10884:	e0800117 	ldw	r2,4(fp)
   10888:	01c00044 	movi	r7,1
   1088c:	d9800804 	addi	r6,sp,32
   10890:	e00b883a 	mov	r5,fp
   10894:	9809883a 	mov	r4,r19
   10898:	103ee83a 	callr	r2
   1089c:	10002c1e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   108a0:	84000044 	addi	r16,r16,1
   108a4:	003fe606 	br	10840 <__alt_data_end+0xffff0840>
   108a8:	4a7fffc4 	addi	r9,r9,-1
   108ac:	48800003 	ldbu	r2,0(r9)
   108b0:	01c00044 	movi	r7,1
   108b4:	d9800804 	addi	r6,sp,32
   108b8:	d8800805 	stb	r2,32(sp)
   108bc:	e0800117 	ldw	r2,4(fp)
   108c0:	e00b883a 	mov	r5,fp
   108c4:	da401015 	stw	r9,64(sp)
   108c8:	9809883a 	mov	r4,r19
   108cc:	103ee83a 	callr	r2
   108d0:	da401017 	ldw	r9,64(sp)
   108d4:	10001e1e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   108d8:	8245c83a 	sub	r2,r16,r9
   108dc:	4d89883a 	add	r4,r9,r22
   108e0:	a085883a 	add	r2,r20,r2
   108e4:	013ff016 	blt	zero,r4,108a8 <__alt_data_end+0xffff08a8>
   108e8:	1021883a 	mov	r16,r2
   108ec:	dd800d17 	ldw	r22,52(sp)
   108f0:	00004406 	br	10a04 <___vfprintf_internal_r+0x4dc>
   108f4:	00800044 	movi	r2,1
   108f8:	1440080e 	bge	r2,r17,1091c <___vfprintf_internal_r+0x3f4>
   108fc:	8d3fffc4 	addi	r20,r17,-1
   10900:	a00f883a 	mov	r7,r20
   10904:	01800804 	movi	r6,32
   10908:	e00b883a 	mov	r5,fp
   1090c:	9809883a 	mov	r4,r19
   10910:	00104bc0 	call	104bc <print_repeat>
   10914:	10000e1e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   10918:	8521883a 	add	r16,r16,r20
   1091c:	b0800017 	ldw	r2,0(r22)
   10920:	01c00044 	movi	r7,1
   10924:	d80d883a 	mov	r6,sp
   10928:	d8800005 	stb	r2,0(sp)
   1092c:	e0800117 	ldw	r2,4(fp)
   10930:	e00b883a 	mov	r5,fp
   10934:	9809883a 	mov	r4,r19
   10938:	b5000104 	addi	r20,r22,4
   1093c:	103ee83a 	callr	r2
   10940:	1000031e 	bne	r2,zero,10950 <___vfprintf_internal_r+0x428>
   10944:	84000044 	addi	r16,r16,1
   10948:	a02d883a 	mov	r22,r20
   1094c:	00002d06 	br	10a04 <___vfprintf_internal_r+0x4dc>
   10950:	00bfffc4 	movi	r2,-1
   10954:	00003106 	br	10a1c <___vfprintf_internal_r+0x4f4>
   10958:	b5000017 	ldw	r20,0(r22)
   1095c:	b0c00104 	addi	r3,r22,4
   10960:	d8c00a15 	stw	r3,40(sp)
   10964:	a009883a 	mov	r4,r20
   10968:	00104a00 	call	104a0 <strlen>
   1096c:	8893c83a 	sub	r9,r17,r2
   10970:	102d883a 	mov	r22,r2
   10974:	0240090e 	bge	zero,r9,1099c <___vfprintf_internal_r+0x474>
   10978:	480f883a 	mov	r7,r9
   1097c:	01800804 	movi	r6,32
   10980:	e00b883a 	mov	r5,fp
   10984:	9809883a 	mov	r4,r19
   10988:	da401015 	stw	r9,64(sp)
   1098c:	00104bc0 	call	104bc <print_repeat>
   10990:	da401017 	ldw	r9,64(sp)
   10994:	103fee1e 	bne	r2,zero,10950 <__alt_data_end+0xffff0950>
   10998:	8261883a 	add	r16,r16,r9
   1099c:	e0800117 	ldw	r2,4(fp)
   109a0:	b00f883a 	mov	r7,r22
   109a4:	a00d883a 	mov	r6,r20
   109a8:	e00b883a 	mov	r5,fp
   109ac:	9809883a 	mov	r4,r19
   109b0:	103ee83a 	callr	r2
   109b4:	103fe61e 	bne	r2,zero,10950 <__alt_data_end+0xffff0950>
   109b8:	85a1883a 	add	r16,r16,r22
   109bc:	dd800a17 	ldw	r22,40(sp)
   109c0:	00001006 	br	10a04 <___vfprintf_internal_r+0x4dc>
   109c4:	05c00044 	movi	r23,1
   109c8:	04bfffc4 	movi	r18,-1
   109cc:	d8000e15 	stw	zero,56(sp)
   109d0:	05400284 	movi	r21,10
   109d4:	9023883a 	mov	r17,r18
   109d8:	d8000c15 	stw	zero,48(sp)
   109dc:	d8000b15 	stw	zero,44(sp)
   109e0:	b829883a 	mov	r20,r23
   109e4:	00000806 	br	10a08 <___vfprintf_internal_r+0x4e0>
   109e8:	dd000b15 	stw	r20,44(sp)
   109ec:	05000084 	movi	r20,2
   109f0:	00000506 	br	10a08 <___vfprintf_internal_r+0x4e0>
   109f4:	00c00044 	movi	r3,1
   109f8:	d8c00c15 	stw	r3,48(sp)
   109fc:	050000c4 	movi	r20,3
   10a00:	00000106 	br	10a08 <___vfprintf_internal_r+0x4e0>
   10a04:	0029883a 	mov	r20,zero
   10a08:	d8c00f17 	ldw	r3,60(sp)
   10a0c:	18c00044 	addi	r3,r3,1
   10a10:	d8c00f15 	stw	r3,60(sp)
   10a14:	003ede06 	br	10590 <__alt_data_end+0xffff0590>
   10a18:	8005883a 	mov	r2,r16
   10a1c:	dfc01a17 	ldw	ra,104(sp)
   10a20:	df001917 	ldw	fp,100(sp)
   10a24:	ddc01817 	ldw	r23,96(sp)
   10a28:	dd801717 	ldw	r22,92(sp)
   10a2c:	dd401617 	ldw	r21,88(sp)
   10a30:	dd001517 	ldw	r20,84(sp)
   10a34:	dcc01417 	ldw	r19,80(sp)
   10a38:	dc801317 	ldw	r18,76(sp)
   10a3c:	dc401217 	ldw	r17,72(sp)
   10a40:	dc001117 	ldw	r16,68(sp)
   10a44:	dec01b04 	addi	sp,sp,108
   10a48:	f800283a 	ret

00010a4c <__vfprintf_internal>:
   10a4c:	00800074 	movhi	r2,1
   10a50:	108a0304 	addi	r2,r2,10252
   10a54:	300f883a 	mov	r7,r6
   10a58:	280d883a 	mov	r6,r5
   10a5c:	200b883a 	mov	r5,r4
   10a60:	11000017 	ldw	r4,0(r2)
   10a64:	00105281 	jmpi	10528 <___vfprintf_internal_r>

00010a68 <__sfvwrite_small_dev>:
   10a68:	2880000b 	ldhu	r2,0(r5)
   10a6c:	1080020c 	andi	r2,r2,8
   10a70:	10002126 	beq	r2,zero,10af8 <__sfvwrite_small_dev+0x90>
   10a74:	2880008f 	ldh	r2,2(r5)
   10a78:	defffa04 	addi	sp,sp,-24
   10a7c:	dc000015 	stw	r16,0(sp)
   10a80:	dfc00515 	stw	ra,20(sp)
   10a84:	dd000415 	stw	r20,16(sp)
   10a88:	dcc00315 	stw	r19,12(sp)
   10a8c:	dc800215 	stw	r18,8(sp)
   10a90:	dc400115 	stw	r17,4(sp)
   10a94:	2821883a 	mov	r16,r5
   10a98:	10001216 	blt	r2,zero,10ae4 <__sfvwrite_small_dev+0x7c>
   10a9c:	2027883a 	mov	r19,r4
   10aa0:	3025883a 	mov	r18,r6
   10aa4:	3823883a 	mov	r17,r7
   10aa8:	05010004 	movi	r20,1024
   10aac:	04400b0e 	bge	zero,r17,10adc <__sfvwrite_small_dev+0x74>
   10ab0:	880f883a 	mov	r7,r17
   10ab4:	a440010e 	bge	r20,r17,10abc <__sfvwrite_small_dev+0x54>
   10ab8:	01c10004 	movi	r7,1024
   10abc:	8140008f 	ldh	r5,2(r16)
   10ac0:	900d883a 	mov	r6,r18
   10ac4:	9809883a 	mov	r4,r19
   10ac8:	0010b200 	call	10b20 <_write_r>
   10acc:	0080050e 	bge	zero,r2,10ae4 <__sfvwrite_small_dev+0x7c>
   10ad0:	88a3c83a 	sub	r17,r17,r2
   10ad4:	90a5883a 	add	r18,r18,r2
   10ad8:	003ff406 	br	10aac <__alt_data_end+0xffff0aac>
   10adc:	0005883a 	mov	r2,zero
   10ae0:	00000706 	br	10b00 <__sfvwrite_small_dev+0x98>
   10ae4:	8080000b 	ldhu	r2,0(r16)
   10ae8:	10801014 	ori	r2,r2,64
   10aec:	8080000d 	sth	r2,0(r16)
   10af0:	00bfffc4 	movi	r2,-1
   10af4:	00000206 	br	10b00 <__sfvwrite_small_dev+0x98>
   10af8:	00bfffc4 	movi	r2,-1
   10afc:	f800283a 	ret
   10b00:	dfc00517 	ldw	ra,20(sp)
   10b04:	dd000417 	ldw	r20,16(sp)
   10b08:	dcc00317 	ldw	r19,12(sp)
   10b0c:	dc800217 	ldw	r18,8(sp)
   10b10:	dc400117 	ldw	r17,4(sp)
   10b14:	dc000017 	ldw	r16,0(sp)
   10b18:	dec00604 	addi	sp,sp,24
   10b1c:	f800283a 	ret

00010b20 <_write_r>:
   10b20:	defffd04 	addi	sp,sp,-12
   10b24:	dc000015 	stw	r16,0(sp)
   10b28:	04000074 	movhi	r16,1
   10b2c:	dc400115 	stw	r17,4(sp)
   10b30:	840a8004 	addi	r16,r16,10752
   10b34:	2023883a 	mov	r17,r4
   10b38:	2809883a 	mov	r4,r5
   10b3c:	300b883a 	mov	r5,r6
   10b40:	380d883a 	mov	r6,r7
   10b44:	dfc00215 	stw	ra,8(sp)
   10b48:	80000015 	stw	zero,0(r16)
   10b4c:	0010e3c0 	call	10e3c <write>
   10b50:	00ffffc4 	movi	r3,-1
   10b54:	10c0031e 	bne	r2,r3,10b64 <_write_r+0x44>
   10b58:	80c00017 	ldw	r3,0(r16)
   10b5c:	18000126 	beq	r3,zero,10b64 <_write_r+0x44>
   10b60:	88c00015 	stw	r3,0(r17)
   10b64:	dfc00217 	ldw	ra,8(sp)
   10b68:	dc400117 	ldw	r17,4(sp)
   10b6c:	dc000017 	ldw	r16,0(sp)
   10b70:	dec00304 	addi	sp,sp,12
   10b74:	f800283a 	ret

00010b78 <__divsi3>:
   10b78:	20001b16 	blt	r4,zero,10be8 <__divsi3+0x70>
   10b7c:	000f883a 	mov	r7,zero
   10b80:	28001616 	blt	r5,zero,10bdc <__divsi3+0x64>
   10b84:	200d883a 	mov	r6,r4
   10b88:	29001a2e 	bgeu	r5,r4,10bf4 <__divsi3+0x7c>
   10b8c:	00800804 	movi	r2,32
   10b90:	00c00044 	movi	r3,1
   10b94:	00000106 	br	10b9c <__divsi3+0x24>
   10b98:	10000d26 	beq	r2,zero,10bd0 <__divsi3+0x58>
   10b9c:	294b883a 	add	r5,r5,r5
   10ba0:	10bfffc4 	addi	r2,r2,-1
   10ba4:	18c7883a 	add	r3,r3,r3
   10ba8:	293ffb36 	bltu	r5,r4,10b98 <__alt_data_end+0xffff0b98>
   10bac:	0005883a 	mov	r2,zero
   10bb0:	18000726 	beq	r3,zero,10bd0 <__divsi3+0x58>
   10bb4:	0005883a 	mov	r2,zero
   10bb8:	31400236 	bltu	r6,r5,10bc4 <__divsi3+0x4c>
   10bbc:	314dc83a 	sub	r6,r6,r5
   10bc0:	10c4b03a 	or	r2,r2,r3
   10bc4:	1806d07a 	srli	r3,r3,1
   10bc8:	280ad07a 	srli	r5,r5,1
   10bcc:	183ffa1e 	bne	r3,zero,10bb8 <__alt_data_end+0xffff0bb8>
   10bd0:	38000126 	beq	r7,zero,10bd8 <__divsi3+0x60>
   10bd4:	0085c83a 	sub	r2,zero,r2
   10bd8:	f800283a 	ret
   10bdc:	014bc83a 	sub	r5,zero,r5
   10be0:	39c0005c 	xori	r7,r7,1
   10be4:	003fe706 	br	10b84 <__alt_data_end+0xffff0b84>
   10be8:	0109c83a 	sub	r4,zero,r4
   10bec:	01c00044 	movi	r7,1
   10bf0:	003fe306 	br	10b80 <__alt_data_end+0xffff0b80>
   10bf4:	00c00044 	movi	r3,1
   10bf8:	003fee06 	br	10bb4 <__alt_data_end+0xffff0bb4>

00010bfc <__modsi3>:
   10bfc:	20001716 	blt	r4,zero,10c5c <__modsi3+0x60>
   10c00:	000f883a 	mov	r7,zero
   10c04:	2005883a 	mov	r2,r4
   10c08:	28001216 	blt	r5,zero,10c54 <__modsi3+0x58>
   10c0c:	2900162e 	bgeu	r5,r4,10c68 <__modsi3+0x6c>
   10c10:	01800804 	movi	r6,32
   10c14:	00c00044 	movi	r3,1
   10c18:	00000106 	br	10c20 <__modsi3+0x24>
   10c1c:	30000a26 	beq	r6,zero,10c48 <__modsi3+0x4c>
   10c20:	294b883a 	add	r5,r5,r5
   10c24:	31bfffc4 	addi	r6,r6,-1
   10c28:	18c7883a 	add	r3,r3,r3
   10c2c:	293ffb36 	bltu	r5,r4,10c1c <__alt_data_end+0xffff0c1c>
   10c30:	18000526 	beq	r3,zero,10c48 <__modsi3+0x4c>
   10c34:	1806d07a 	srli	r3,r3,1
   10c38:	11400136 	bltu	r2,r5,10c40 <__modsi3+0x44>
   10c3c:	1145c83a 	sub	r2,r2,r5
   10c40:	280ad07a 	srli	r5,r5,1
   10c44:	183ffb1e 	bne	r3,zero,10c34 <__alt_data_end+0xffff0c34>
   10c48:	38000126 	beq	r7,zero,10c50 <__modsi3+0x54>
   10c4c:	0085c83a 	sub	r2,zero,r2
   10c50:	f800283a 	ret
   10c54:	014bc83a 	sub	r5,zero,r5
   10c58:	003fec06 	br	10c0c <__alt_data_end+0xffff0c0c>
   10c5c:	0109c83a 	sub	r4,zero,r4
   10c60:	01c00044 	movi	r7,1
   10c64:	003fe706 	br	10c04 <__alt_data_end+0xffff0c04>
   10c68:	00c00044 	movi	r3,1
   10c6c:	003ff106 	br	10c34 <__alt_data_end+0xffff0c34>

00010c70 <__udivsi3>:
   10c70:	200d883a 	mov	r6,r4
   10c74:	2900152e 	bgeu	r5,r4,10ccc <__udivsi3+0x5c>
   10c78:	28001416 	blt	r5,zero,10ccc <__udivsi3+0x5c>
   10c7c:	00800804 	movi	r2,32
   10c80:	00c00044 	movi	r3,1
   10c84:	00000206 	br	10c90 <__udivsi3+0x20>
   10c88:	10000e26 	beq	r2,zero,10cc4 <__udivsi3+0x54>
   10c8c:	28000516 	blt	r5,zero,10ca4 <__udivsi3+0x34>
   10c90:	294b883a 	add	r5,r5,r5
   10c94:	10bfffc4 	addi	r2,r2,-1
   10c98:	18c7883a 	add	r3,r3,r3
   10c9c:	293ffa36 	bltu	r5,r4,10c88 <__alt_data_end+0xffff0c88>
   10ca0:	18000826 	beq	r3,zero,10cc4 <__udivsi3+0x54>
   10ca4:	0005883a 	mov	r2,zero
   10ca8:	31400236 	bltu	r6,r5,10cb4 <__udivsi3+0x44>
   10cac:	314dc83a 	sub	r6,r6,r5
   10cb0:	10c4b03a 	or	r2,r2,r3
   10cb4:	1806d07a 	srli	r3,r3,1
   10cb8:	280ad07a 	srli	r5,r5,1
   10cbc:	183ffa1e 	bne	r3,zero,10ca8 <__alt_data_end+0xffff0ca8>
   10cc0:	f800283a 	ret
   10cc4:	0005883a 	mov	r2,zero
   10cc8:	f800283a 	ret
   10ccc:	00c00044 	movi	r3,1
   10cd0:	003ff406 	br	10ca4 <__alt_data_end+0xffff0ca4>

00010cd4 <__umodsi3>:
   10cd4:	2005883a 	mov	r2,r4
   10cd8:	2900122e 	bgeu	r5,r4,10d24 <__umodsi3+0x50>
   10cdc:	28001116 	blt	r5,zero,10d24 <__umodsi3+0x50>
   10ce0:	01800804 	movi	r6,32
   10ce4:	00c00044 	movi	r3,1
   10ce8:	00000206 	br	10cf4 <__umodsi3+0x20>
   10cec:	30000c26 	beq	r6,zero,10d20 <__umodsi3+0x4c>
   10cf0:	28000516 	blt	r5,zero,10d08 <__umodsi3+0x34>
   10cf4:	294b883a 	add	r5,r5,r5
   10cf8:	31bfffc4 	addi	r6,r6,-1
   10cfc:	18c7883a 	add	r3,r3,r3
   10d00:	293ffa36 	bltu	r5,r4,10cec <__alt_data_end+0xffff0cec>
   10d04:	18000626 	beq	r3,zero,10d20 <__umodsi3+0x4c>
   10d08:	1806d07a 	srli	r3,r3,1
   10d0c:	11400136 	bltu	r2,r5,10d14 <__umodsi3+0x40>
   10d10:	1145c83a 	sub	r2,r2,r5
   10d14:	280ad07a 	srli	r5,r5,1
   10d18:	183ffb1e 	bne	r3,zero,10d08 <__alt_data_end+0xffff0d08>
   10d1c:	f800283a 	ret
   10d20:	f800283a 	ret
   10d24:	00c00044 	movi	r3,1
   10d28:	003ff706 	br	10d08 <__alt_data_end+0xffff0d08>

00010d2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d2c:	deffff04 	addi	sp,sp,-4
   10d30:	01000074 	movhi	r4,1
   10d34:	01400074 	movhi	r5,1
   10d38:	dfc00015 	stw	ra,0(sp)
   10d3c:	21099504 	addi	r4,r4,9812
   10d40:	294a0a04 	addi	r5,r5,10280

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10d44:	2140061e 	bne	r4,r5,10d60 <alt_load+0x34>
   10d48:	01000074 	movhi	r4,1
   10d4c:	01400074 	movhi	r5,1
   10d50:	21000804 	addi	r4,r4,32
   10d54:	29400804 	addi	r5,r5,32
   10d58:	2140121e 	bne	r4,r5,10da4 <alt_load+0x78>
   10d5c:	00000b06 	br	10d8c <alt_load+0x60>
   10d60:	00c00074 	movhi	r3,1
   10d64:	18ca0a04 	addi	r3,r3,10280
   10d68:	1907c83a 	sub	r3,r3,r4
   10d6c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10d70:	10fff526 	beq	r2,r3,10d48 <__alt_data_end+0xffff0d48>
    {
      *to++ = *from++;
   10d74:	114f883a 	add	r7,r2,r5
   10d78:	39c00017 	ldw	r7,0(r7)
   10d7c:	110d883a 	add	r6,r2,r4
   10d80:	10800104 	addi	r2,r2,4
   10d84:	31c00015 	stw	r7,0(r6)
   10d88:	003ff906 	br	10d70 <__alt_data_end+0xffff0d70>
   10d8c:	01000074 	movhi	r4,1
   10d90:	01400074 	movhi	r5,1
   10d94:	21096904 	addi	r4,r4,9636
   10d98:	29496904 	addi	r5,r5,9636

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10d9c:	2140101e 	bne	r4,r5,10de0 <alt_load+0xb4>
   10da0:	00000b06 	br	10dd0 <alt_load+0xa4>
   10da4:	00c00074 	movhi	r3,1
   10da8:	18c00804 	addi	r3,r3,32
   10dac:	1907c83a 	sub	r3,r3,r4
   10db0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10db4:	10fff526 	beq	r2,r3,10d8c <__alt_data_end+0xffff0d8c>
    {
      *to++ = *from++;
   10db8:	114f883a 	add	r7,r2,r5
   10dbc:	39c00017 	ldw	r7,0(r7)
   10dc0:	110d883a 	add	r6,r2,r4
   10dc4:	10800104 	addi	r2,r2,4
   10dc8:	31c00015 	stw	r7,0(r6)
   10dcc:	003ff906 	br	10db4 <__alt_data_end+0xffff0db4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10dd0:	001233c0 	call	1233c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10dd4:	dfc00017 	ldw	ra,0(sp)
   10dd8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10ddc:	00124341 	jmpi	12434 <alt_icache_flush_all>
   10de0:	00c00074 	movhi	r3,1
   10de4:	18c99504 	addi	r3,r3,9812
   10de8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10dec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10df0:	18bff726 	beq	r3,r2,10dd0 <__alt_data_end+0xffff0dd0>
    {
      *to++ = *from++;
   10df4:	114f883a 	add	r7,r2,r5
   10df8:	39c00017 	ldw	r7,0(r7)
   10dfc:	110d883a 	add	r6,r2,r4
   10e00:	10800104 	addi	r2,r2,4
   10e04:	31c00015 	stw	r7,0(r6)
   10e08:	003ff906 	br	10df0 <__alt_data_end+0xffff0df0>

00010e0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10e0c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10e10:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10e14:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10e18:	0010e9c0 	call	10e9c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10e1c:	0010ec80 	call	10ec8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10e20:	d1a07f17 	ldw	r6,-32260(gp)
   10e24:	d1608017 	ldw	r5,-32256(gp)
   10e28:	d1208117 	ldw	r4,-32252(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10e2c:	dfc00017 	ldw	ra,0(sp)
   10e30:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10e34:	001030c1 	jmpi	1030c <main>

00010e38 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   10e38:	00122c41 	jmpi	122c4 <alt_busy_sleep>

00010e3c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10e3c:	00800044 	movi	r2,1
   10e40:	20800226 	beq	r4,r2,10e4c <write+0x10>
   10e44:	00800084 	movi	r2,2
   10e48:	2080041e 	bne	r4,r2,10e5c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10e4c:	01000074 	movhi	r4,1
   10e50:	000f883a 	mov	r7,zero
   10e54:	210a0404 	addi	r4,r4,10256
   10e58:	00120341 	jmpi	12034 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10e5c:	d0a00517 	ldw	r2,-32748(gp)
   10e60:	10000926 	beq	r2,zero,10e88 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10e64:	deffff04 	addi	sp,sp,-4
   10e68:	dfc00015 	stw	ra,0(sp)
   10e6c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10e70:	00c01444 	movi	r3,81
   10e74:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10e78:	00bfffc4 	movi	r2,-1
   10e7c:	dfc00017 	ldw	ra,0(sp)
   10e80:	dec00104 	addi	sp,sp,4
   10e84:	f800283a 	ret
   10e88:	d0a07e04 	addi	r2,gp,-32264
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10e8c:	00c01444 	movi	r3,81
   10e90:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10e94:	00bfffc4 	movi	r2,-1
   10e98:	f800283a 	ret

00010e9c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   10e9c:	01000074 	movhi	r4,1
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ea0:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   10ea4:	2109db04 	addi	r4,r4,10092
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ea8:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   10eac:	001219c0 	call	1219c <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10eb0:	00802034 	movhi	r2,128
   10eb4:	10800044 	addi	r2,r2,1
   10eb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10ebc:	dfc00017 	ldw	ra,0(sp)
   10ec0:	dec00104 	addi	sp,sp,4
   10ec4:	f800283a 	ret

00010ec8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10ec8:	010000b4 	movhi	r4,2
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ecc:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10ed0:	01c0fa04 	movi	r7,1000
   10ed4:	018000c4 	movi	r6,3
   10ed8:	000b883a 	mov	r5,zero
   10edc:	21051004 	addi	r4,r4,5184
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ee0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10ee4:	00120bc0 	call	120bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   10ee8:	01000074 	movhi	r4,1
   10eec:	2109cd04 	addi	r4,r4,10036
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
   10ef0:	dfc00017 	ldw	ra,0(sp)
   10ef4:	dec00104 	addi	sp,sp,4

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   10ef8:	0011c181 	jmpi	11c18 <alt_avalon_i2c_init>

00010efc <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   10efc:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
   10f00:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   10f04:	1085e404 	addi	r2,r2,6032
   10f08:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
   10f0c:	21400715 	stw	r5,28(r4)
    dev->control          = control;
   10f10:	20000815 	stw	zero,32(r4)
   10f14:	f800283a 	ret

00010f18 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   10f18:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
   10f1c:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
   10f20:	21800815 	stw	r6,32(r4)
   10f24:	f800283a 	ret

00010f28 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   10f28:	d1600304 	addi	r5,gp,-32756
   10f2c:	00123c01 	jmpi	123c0 <alt_find_dev>

00010f30 <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   10f30:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   10f34:	20800317 	ldw	r2,12(r4)
   10f38:	10c00237 	ldwio	r3,8(r2)
   if (enable_status)
   10f3c:	18c0004c 	andi	r3,r3,1
   10f40:	18000b1e 	bne	r3,zero,10f70 <alt_avalon_i2c_enable+0x40>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   10f44:	21000617 	ldw	r4,24(r4)
   10f48:	00c00074 	movhi	r3,1
   10f4c:	18c5e404 	addi	r3,r3,6032
   10f50:	20c0011e 	bne	r4,r3,10f58 <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
   10f54:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   10f58:	10800204 	addi	r2,r2,8
   10f5c:	10c00037 	ldwio	r3,0(r2)
   10f60:	18c00054 	ori	r3,r3,1
   10f64:	10c00035 	stwio	r3,0(r2)
   10f68:	0005883a 	mov	r2,zero
   10f6c:	f800283a 	ret
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   if (enable_status)
   {
     return ALT_AVALON_I2C_BUSY;
   10f70:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
   10f74:	f800283a 	ret

00010f78 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   10f78:	20800317 	ldw	r2,12(r4)
   10f7c:	10800204 	addi	r2,r2,8
   10f80:	11000037 	ldwio	r4,0(r2)
   10f84:	00ffff84 	movi	r3,-2
   10f88:	20c6703a 	and	r3,r4,r3
   10f8c:	10c00035 	stwio	r3,0(r2)
   10f90:	f800283a 	ret

00010f94 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
   10f94:	20800d17 	ldw	r2,52(r4)
   10f98:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   10f9c:	20800317 	ldw	r2,12(r4)
   10fa0:	10800237 	ldwio	r2,8(r2)
   10fa4:	1080008c 	andi	r2,r2,2
   10fa8:	1005d07a 	srai	r2,r2,1
   10fac:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   10fb0:	20800317 	ldw	r2,12(r4)
   10fb4:	10800937 	ldwio	r2,36(r2)
   10fb8:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   10fbc:	20800317 	ldw	r2,12(r4)
   10fc0:	10800837 	ldwio	r2,32(r2)
   10fc4:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   10fc8:	20800317 	ldw	r2,12(r4)
   10fcc:	10800a37 	ldwio	r2,40(r2)
   10fd0:	2880030d 	sth	r2,12(r5)
   10fd4:	f800283a 	ret

00010fd8 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   10fd8:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   10fdc:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   10fe0:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   10fe4:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   10fe8:	31c00037 	ldwio	r7,0(r6)
   10fec:	00ffff44 	movi	r3,-3
   10ff0:	28800117 	ldw	r2,4(r5)
   10ff4:	38c6703a 	and	r3,r7,r3
   10ff8:	1085883a 	add	r2,r2,r2
   10ffc:	1080008c 	andi	r2,r2,2
   11000:	10c4b03a 	or	r2,r2,r3
   11004:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   11008:	20800317 	ldw	r2,12(r4)
   1100c:	28c0020b 	ldhu	r3,8(r5)
   11010:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   11014:	20800317 	ldw	r2,12(r4)
   11018:	28c0028b 	ldhu	r3,10(r5)
   1101c:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   11020:	20800317 	ldw	r2,12(r4)
   11024:	28c0030b 	ldhu	r3,12(r5)
   11028:	10c00a35 	stwio	r3,40(r2)
   1102c:	f800283a 	ret

00011030 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   11030:	28c0028b 	ldhu	r3,10(r5)
   11034:	18000f26 	beq	r3,zero,11074 <alt_avalon_i2c_master_config_speed_get+0x44>
   11038:	2940020b 	ldhu	r5,8(r5)
   1103c:	28000d26 	beq	r5,zero,11074 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11040:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   11044:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11048:	194b883a 	add	r5,r3,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   1104c:	dc000015 	stw	r16,0(sp)
   11050:	dfc00115 	stw	ra,4(sp)
   11054:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11058:	0010c700 	call	10c70 <__udivsi3>
   1105c:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
   11060:	0005883a 	mov	r2,zero
}
   11064:	dfc00117 	ldw	ra,4(sp)
   11068:	dc000017 	ldw	r16,0(sp)
   1106c:	dec00204 	addi	sp,sp,8
   11070:	f800283a 	ret
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   11074:	00bfff44 	movi	r2,-3
   11078:	f800283a 	ret

0001107c <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   1107c:	00c001b4 	movhi	r3,6
   11080:	30bfffc4 	addi	r2,r6,-1
   11084:	18c69fc4 	addi	r3,r3,6783
   11088:	18801d36 	bltu	r3,r2,11100 <alt_avalon_i2c_master_config_speed_set+0x84>
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1108c:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   11090:	defffd04 	addi	sp,sp,-12
   11094:	dc000015 	stw	r16,0(sp)
   11098:	2821883a 	mov	r16,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   1109c:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   110a0:	dc400115 	stw	r17,4(sp)
   110a4:	dfc00215 	stw	ra,8(sp)
   110a8:	3023883a 	mov	r17,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   110ac:	0010c700 	call	10c70 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   110b0:	010000b4 	movhi	r4,2
   110b4:	2121a804 	addi	r4,r4,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   110b8:	10c00f04 	addi	r3,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   110bc:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   110c0:	2440032e 	bgeu	r4,r17,110d0 <alt_avalon_i2c_master_config_speed_set+0x54>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   110c4:	01000044 	movi	r4,1
   110c8:	81000115 	stw	r4,4(r16)
   110cc:	00000106 	br	110d4 <alt_avalon_i2c_master_config_speed_set+0x58>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   110d0:	80000115 	stw	zero,4(r16)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
   110d4:	80c0020d 	sth	r3,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   110d8:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
   110dc:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   110e0:	10c5c83a 	sub	r2,r2,r3
   110e4:	8080030d 	sth	r2,12(r16)
   110e8:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
   110ec:	dfc00217 	ldw	ra,8(sp)
   110f0:	dc400117 	ldw	r17,4(sp)
   110f4:	dc000017 	ldw	r16,0(sp)
   110f8:	dec00304 	addi	sp,sp,12
   110fc:	f800283a 	ret
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    {
        return ALT_AVALON_I2C_RANGE;
   11100:	00bfff04 	movi	r2,-4
   11104:	f800283a 	ret

00011108 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   11108:	20800317 	ldw	r2,12(r4)
   1110c:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
   11110:	1080004c 	andi	r2,r2,1
   11114:	f800283a 	ret

00011118 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
   11118:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1111c:	20c00317 	ldw	r3,12(r4)
   11120:	18800737 	ldwio	r2,28(r3)
   11124:	10000926 	beq	r2,zero,1114c <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11128:	38800017 	ldw	r2,0(r7)
   1112c:	2885883a 	add	r2,r5,r2
   11130:	18c00137 	ldwio	r3,4(r3)
   11134:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   11138:	38800017 	ldw	r2,0(r7)
   1113c:	10800044 	addi	r2,r2,1
   11140:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   11144:	11bff51e 	bne	r2,r6,1111c <__alt_data_end+0xffff111c>
   11148:	303ff426 	beq	r6,zero,1111c <__alt_data_end+0xffff111c>
   1114c:	f800283a 	ret

00011150 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   11150:	defffb04 	addi	sp,sp,-20
   11154:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11158:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   1115c:	dcc00315 	stw	r19,12(sp)
   11160:	dc800215 	stw	r18,8(sp)
   11164:	dc400115 	stw	r17,4(sp)
   11168:	dfc00415 	stw	ra,16(sp)
   1116c:	2023883a 	mov	r17,r4
   11170:	2825883a 	mov	r18,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11174:	8421a804 	addi	r16,r16,-31072
    {
      if (timeout<10) alt_busy_sleep(10000);
   11178:	04c00244 	movi	r19,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   1117c:	88800317 	ldw	r2,12(r17)
   11180:	10800737 	ldwio	r2,28(r2)
   11184:	1000071e 	bne	r2,zero,111a4 <alt_avalon_i2c_rx_read+0x54>
    {
      if (timeout<10) alt_busy_sleep(10000);
   11188:	9c000236 	bltu	r19,r16,11194 <alt_avalon_i2c_rx_read+0x44>
   1118c:	0109c404 	movi	r4,10000
   11190:	00122c40 	call	122c4 <alt_busy_sleep>
   11194:	843fffc4 	addi	r16,r16,-1
      if (--timeout == 0)
   11198:	803ff81e 	bne	r16,zero,1117c <__alt_data_end+0xffff117c>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   1119c:	00bfff84 	movi	r2,-2
   111a0:	00000106 	br	111a8 <alt_avalon_i2c_rx_read+0x58>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   111a4:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   111a8:	88c00317 	ldw	r3,12(r17)
   111ac:	18c00137 	ldwio	r3,4(r3)
   111b0:	90c00005 	stb	r3,0(r18)
        
    return status;
}
   111b4:	dfc00417 	ldw	ra,16(sp)
   111b8:	dcc00317 	ldw	r19,12(sp)
   111bc:	dc800217 	ldw	r18,8(sp)
   111c0:	dc400117 	ldw	r17,4(sp)
   111c4:	dc000017 	ldw	r16,0(sp)
   111c8:	dec00504 	addi	sp,sp,20
   111cc:	f800283a 	ret

000111d0 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
   111d0:	20800917 	ldw	r2,36(r4)
   111d4:	28800015 	stw	r2,0(r5)
   111d8:	f800283a 	ret

000111dc <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
   111dc:	21400915 	stw	r5,36(r4)
   111e0:	f800283a 	ret

000111e4 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   111e4:	20800317 	ldw	r2,12(r4)
   111e8:	10800437 	ldwio	r2,16(r2)
   111ec:	1080010c 	andi	r2,r2,4
   111f0:	10000226 	beq	r2,zero,111fc <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   111f4:	00bffec4 	movi	r2,-5
   111f8:	28800015 	stw	r2,0(r5)
   111fc:	f800283a 	ret

00011200 <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   11200:	20800317 	ldw	r2,12(r4)
   11204:	10800437 	ldwio	r2,16(r2)
   11208:	1080020c 	andi	r2,r2,8
   1120c:	10000226 	beq	r2,zero,11218 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   11210:	00bffe84 	movi	r2,-6
   11214:	28800015 	stw	r2,0(r5)
   11218:	f800283a 	ret

0001121c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   1121c:	defff804 	addi	sp,sp,-32
   11220:	dd400615 	stw	r21,24(sp)
   11224:	dd000515 	stw	r20,20(sp)
   11228:	dcc00415 	stw	r19,16(sp)
   1122c:	dc800315 	stw	r18,12(sp)
   11230:	dc400215 	stw	r17,8(sp)
   11234:	dc000115 	stw	r16,4(sp)
   11238:	dfc00715 	stw	ra,28(sp)
   1123c:	2029883a 	mov	r20,r4
   11240:	2823883a 	mov	r17,r5
   11244:	3025883a 	mov	r18,r6
   11248:	3821883a 	mov	r16,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1124c:	d8000015 	stw	zero,0(sp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11250:	04c9c404 	movi	r19,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
   11254:	05400244 	movi	r21,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11258:	a0c00317 	ldw	r3,12(r20)
   1125c:	18800437 	ldwio	r2,16(r3)
   11260:	1080004c 	andi	r2,r2,1
   11264:	1000071e 	bne	r2,zero,11284 <alt_avalon_i2c_cmd_write+0x68>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   11268:	acc00236 	bltu	r21,r19,11274 <alt_avalon_i2c_cmd_write+0x58>
   1126c:	0109c404 	movi	r4,10000
   11270:	00122c40 	call	122c4 <alt_busy_sleep>
   11274:	9cffffc4 	addi	r19,r19,-1
      if (--timeout == 0)
   11278:	983ff71e 	bne	r19,zero,11258 <__alt_data_end+0xffff1258>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   1127c:	00bfff84 	movi	r2,-2
   11280:	00000f06 	br	112c0 <alt_avalon_i2c_cmd_write+0xa4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   11284:	94803fcc 	andi	r18,r18,255
   11288:	9024927a 	slli	r18,r18,9
   1128c:	84003fcc 	andi	r16,r16,255
   11290:	8020923a 	slli	r16,r16,8
   11294:	8c403fcc 	andi	r17,r17,255
   11298:	9462b03a 	or	r17,r18,r17
   1129c:	8c20b03a 	or	r16,r17,r16
   112a0:	1c000035 	stwio	r16,0(r3)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   112a4:	d80b883a 	mov	r5,sp
   112a8:	a009883a 	mov	r4,r20
   112ac:	00111e40 	call	111e4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   112b0:	d80b883a 	mov	r5,sp
   112b4:	a009883a 	mov	r4,r20
   112b8:	00112000 	call	11200 <alt_avalon_i2c_check_arblost>
    
    return status;
   112bc:	d8800017 	ldw	r2,0(sp)
}
   112c0:	dfc00717 	ldw	ra,28(sp)
   112c4:	dd400617 	ldw	r21,24(sp)
   112c8:	dd000517 	ldw	r20,20(sp)
   112cc:	dcc00417 	ldw	r19,16(sp)
   112d0:	dc800317 	ldw	r18,12(sp)
   112d4:	dc400217 	ldw	r17,8(sp)
   112d8:	dc000117 	ldw	r16,4(sp)
   112dc:	dec00804 	addi	sp,sp,32
   112e0:	f800283a 	ret

000112e4 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   112e4:	22000d17 	ldw	r8,52(r4)
   112e8:	01c00044 	movi	r7,1
   112ec:	31803fcc 	andi	r6,r6,255
   112f0:	20800917 	ldw	r2,36(r4)
   112f4:	41c0141e 	bne	r8,r7,11348 <alt_avalon_i2c_send_address+0x64>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   112f8:	10de0014 	ori	r3,r2,30720
   112fc:	1806d1fa 	srli	r3,r3,7
   11300:	00bfff84 	movi	r2,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11304:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11308:	1886703a 	and	r3,r3,r2
   1130c:	194ab03a 	or	r5,r3,r5
   11310:	000f883a 	mov	r7,zero
   11314:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11318:	dc000015 	stw	r16,0(sp)
   1131c:	dfc00115 	stw	ra,4(sp)
   11320:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11324:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   11328:	81400903 	ldbu	r5,36(r16)
   1132c:	000f883a 	mov	r7,zero
   11330:	000d883a 	mov	r6,zero
   11334:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
   11338:	dfc00117 	ldw	ra,4(sp)
   1133c:	dc000017 	ldw	r16,0(sp)
   11340:	dec00204 	addi	sp,sp,8
   11344:	00000406 	br	11358 <alt_avalon_i2c_send_address+0x74>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11348:	1085883a 	add	r2,r2,r2
   1134c:	114ab03a 	or	r5,r2,r5
   11350:	000f883a 	mov	r7,zero
   11354:	29403fcc 	andi	r5,r5,255
   11358:	001121c1 	jmpi	1121c <alt_avalon_i2c_cmd_write>

0001135c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1135c:	defff904 	addi	sp,sp,-28
   11360:	dcc00415 	stw	r19,16(sp)
   11364:	dfc00615 	stw	ra,24(sp)
   11368:	dd000515 	stw	r20,20(sp)
   1136c:	dc800315 	stw	r18,12(sp)
   11370:	dc400215 	stw	r17,8(sp)
   11374:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11378:	d8000015 	stw	zero,0(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1137c:	dcc00717 	ldw	r19,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
   11380:	30003b26 	beq	r6,zero,11470 <alt_avalon_i2c_master_transmit+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11384:	3d003fcc 	andi	r20,r7,255
   11388:	2023883a 	mov	r17,r4
   1138c:	2825883a 	mov	r18,r5
   11390:	3021883a 	mov	r16,r6
   11394:	a000061e 	bne	r20,zero,113b0 <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11398:	0010f300 	call	10f30 <alt_avalon_i2c_enable>
   1139c:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   113a0:	1000341e 	bne	r2,zero,11474 <alt_avalon_i2c_master_transmit+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   113a4:	88800317 	ldw	r2,12(r17)
   113a8:	00c00704 	movi	r3,28
   113ac:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   113b0:	a00d883a 	mov	r6,r20
   113b4:	000b883a 	mov	r5,zero
   113b8:	8809883a 	mov	r4,r17
   113bc:	00112e40 	call	112e4 <alt_avalon_i2c_send_address>
   113c0:	d8800015 	stw	r2,0(sp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   113c4:	1000171e 	bne	r2,zero,11424 <alt_avalon_i2c_master_transmit+0xc8>
   113c8:	853fffc4 	addi	r20,r16,-1
   113cc:	9529883a 	add	r20,r18,r20
   113d0:	d8800017 	ldw	r2,0(sp)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   113d4:	95000926 	beq	r18,r20,113fc <alt_avalon_i2c_master_transmit+0xa0>
   113d8:	1000081e 	bne	r2,zero,113fc <alt_avalon_i2c_master_transmit+0xa0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   113dc:	91400003 	ldbu	r5,0(r18)
   113e0:	000f883a 	mov	r7,zero
   113e4:	000d883a 	mov	r6,zero
   113e8:	8809883a 	mov	r4,r17
   113ec:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   113f0:	d8800015 	stw	r2,0(sp)
            
            ++buffer;
   113f4:	94800044 	addi	r18,r18,1
   113f8:	003ff506 	br	113d0 <__alt_data_end+0xffff13d0>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   113fc:	1000091e 	bne	r2,zero,11424 <alt_avalon_i2c_master_transmit+0xc8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11400:	91400003 	ldbu	r5,0(r18)
   11404:	9cc03fcc 	andi	r19,r19,255
   11408:	980f883a 	mov	r7,r19
   1140c:	000d883a 	mov	r6,zero
   11410:	8809883a 	mov	r4,r17
   11414:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11418:	d8800015 	stw	r2,0(sp)
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1141c:	9800011e 	bne	r19,zero,11424 <alt_avalon_i2c_master_transmit+0xc8>
   11420:	10001126 	beq	r2,zero,11468 <alt_avalon_i2c_master_transmit+0x10c>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
   11424:	8409c424 	muli	r16,r16,10000
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   11428:	04800244 	movi	r18,9
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1142c:	8809883a 	mov	r4,r17
   11430:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   11434:	10000726 	beq	r2,zero,11454 <alt_avalon_i2c_master_transmit+0xf8>
        {
            if (timeout<10) alt_busy_sleep(10000);
   11438:	94000236 	bltu	r18,r16,11444 <alt_avalon_i2c_master_transmit+0xe8>
   1143c:	0109c404 	movi	r4,10000
   11440:	00122c40 	call	122c4 <alt_busy_sleep>
            if (--timeout == 0)
   11444:	843fffc4 	addi	r16,r16,-1
   11448:	803ff81e 	bne	r16,zero,1142c <__alt_data_end+0xffff142c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1144c:	00bfff84 	movi	r2,-2
   11450:	d8800015 	stw	r2,0(sp)
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   11454:	8809883a 	mov	r4,r17
   11458:	d80b883a 	mov	r5,sp
   1145c:	00111e40 	call	111e4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11460:	8809883a 	mov	r4,r17
   11464:	0010f780 	call	10f78 <alt_avalon_i2c_disable>
    }


    return status;
   11468:	d8800017 	ldw	r2,0(sp)
   1146c:	00000106 	br	11474 <alt_avalon_i2c_master_transmit+0x118>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   11470:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
   11474:	dfc00617 	ldw	ra,24(sp)
   11478:	dd000517 	ldw	r20,20(sp)
   1147c:	dcc00417 	ldw	r19,16(sp)
   11480:	dc800317 	ldw	r18,12(sp)
   11484:	dc400217 	ldw	r17,8(sp)
   11488:	dc000117 	ldw	r16,4(sp)
   1148c:	dec00704 	addi	sp,sp,28
   11490:	f800283a 	ret

00011494 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   11494:	defff604 	addi	sp,sp,-40
   11498:	dd000615 	stw	r20,24(sp)
   1149c:	dfc00915 	stw	ra,36(sp)
   114a0:	dd800815 	stw	r22,32(sp)
   114a4:	dd400715 	stw	r21,28(sp)
   114a8:	dcc00515 	stw	r19,20(sp)
   114ac:	dc800415 	stw	r18,16(sp)
   114b0:	dc400315 	stw	r17,12(sp)
   114b4:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   114b8:	d8000115 	stw	zero,4(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   114bc:	dd000a17 	ldw	r20,40(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
   114c0:	30005326 	beq	r6,zero,11610 <alt_avalon_i2c_master_receive+0x17c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   114c4:	3cc03fcc 	andi	r19,r7,255
   114c8:	2023883a 	mov	r17,r4
   114cc:	2821883a 	mov	r16,r5
   114d0:	3025883a 	mov	r18,r6
   114d4:	9800061e 	bne	r19,zero,114f0 <alt_avalon_i2c_master_receive+0x5c>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   114d8:	0010f300 	call	10f30 <alt_avalon_i2c_enable>
   114dc:	d8800115 	stw	r2,4(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   114e0:	10004c1e 	bne	r2,zero,11614 <alt_avalon_i2c_master_receive+0x180>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   114e4:	88800317 	ldw	r2,12(r17)
   114e8:	00c00704 	movi	r3,28
   114ec:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   114f0:	980d883a 	mov	r6,r19
   114f4:	01400044 	movi	r5,1
   114f8:	8809883a 	mov	r4,r17
   114fc:	00112e40 	call	112e4 <alt_avalon_i2c_send_address>
   11500:	d8800115 	stw	r2,4(sp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   11504:	10001f1e 	bne	r2,zero,11584 <alt_avalon_i2c_master_receive+0xf0>
   11508:	002b883a 	mov	r21,zero
   1150c:	0027883a 	mov	r19,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   11510:	95bfffc4 	addi	r22,r18,-1
   11514:	d8800117 	ldw	r2,4(sp)
   11518:	ad800836 	bltu	r21,r22,1153c <alt_avalon_i2c_master_receive+0xa8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1151c:	10001a1e 	bne	r2,zero,11588 <alt_avalon_i2c_master_receive+0xf4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11520:	a1c03fcc 	andi	r7,r20,255
   11524:	000d883a 	mov	r6,zero
   11528:	000b883a 	mov	r5,zero
   1152c:	8809883a 	mov	r4,r17
   11530:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11534:	d8800115 	stw	r2,4(sp)
   11538:	00001306 	br	11588 <alt_avalon_i2c_master_receive+0xf4>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   1153c:	103ff71e 	bne	r2,zero,1151c <__alt_data_end+0xffff151c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11540:	000f883a 	mov	r7,zero
   11544:	000d883a 	mov	r6,zero
   11548:	000b883a 	mov	r5,zero
   1154c:	8809883a 	mov	r4,r17
   11550:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11554:	d8800115 	stw	r2,4(sp)
            bytes_written++;
   11558:	ad400044 	addi	r21,r21,1
            if (status == ALT_AVALON_I2C_SUCCESS)
   1155c:	103fed1e 	bne	r2,zero,11514 <__alt_data_end+0xffff1514>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   11560:	800b883a 	mov	r5,r16
   11564:	d80f883a 	mov	r7,sp
   11568:	000d883a 	mov	r6,zero
   1156c:	8809883a 	mov	r4,r17
   11570:	00111180 	call	11118 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   11574:	d8800017 	ldw	r2,0(sp)
   11578:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
   1157c:	98a7883a 	add	r19,r19,r2
   11580:	003fe406 	br	11514 <__alt_data_end+0xffff1514>
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   11584:	0027883a 	mov	r19,zero
   11588:	9c27c83a 	sub	r19,r19,r16
   1158c:	84c5883a 	add	r2,r16,r19
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   11590:	1480082e 	bgeu	r2,r18,115b4 <alt_avalon_i2c_master_receive+0x120>
   11594:	d8800117 	ldw	r2,4(sp)
   11598:	10000a1e 	bne	r2,zero,115c4 <alt_avalon_i2c_master_receive+0x130>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   1159c:	800b883a 	mov	r5,r16
   115a0:	8809883a 	mov	r4,r17
   115a4:	00111500 	call	11150 <alt_avalon_i2c_rx_read>
   115a8:	d8800115 	stw	r2,4(sp)
        buffer++;
   115ac:	84000044 	addi	r16,r16,1
   115b0:	003ff606 	br	1158c <__alt_data_end+0xffff158c>
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   115b4:	a5003fcc 	andi	r20,r20,255
   115b8:	a000021e 	bne	r20,zero,115c4 <alt_avalon_i2c_master_receive+0x130>
   115bc:	d8800117 	ldw	r2,4(sp)
   115c0:	10001126 	beq	r2,zero,11608 <alt_avalon_i2c_master_receive+0x174>
    {
        timeout=10000 * size;
   115c4:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   115c8:	04000244 	movi	r16,9

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   115cc:	8809883a 	mov	r4,r17
   115d0:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   115d4:	10000726 	beq	r2,zero,115f4 <alt_avalon_i2c_master_receive+0x160>
        {
            if (timeout<10) alt_busy_sleep(10000);
   115d8:	84800236 	bltu	r16,r18,115e4 <alt_avalon_i2c_master_receive+0x150>
   115dc:	0109c404 	movi	r4,10000
   115e0:	00122c40 	call	122c4 <alt_busy_sleep>
            if (--timeout == 0)
   115e4:	94bfffc4 	addi	r18,r18,-1
   115e8:	903ff81e 	bne	r18,zero,115cc <__alt_data_end+0xffff15cc>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   115ec:	00bfff84 	movi	r2,-2
   115f0:	d8800115 	stw	r2,4(sp)
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   115f4:	8809883a 	mov	r4,r17
   115f8:	d9400104 	addi	r5,sp,4
   115fc:	00111e40 	call	111e4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11600:	8809883a 	mov	r4,r17
   11604:	0010f780 	call	10f78 <alt_avalon_i2c_disable>
    }

    return status;
   11608:	d8800117 	ldw	r2,4(sp)
   1160c:	00000106 	br	11614 <alt_avalon_i2c_master_receive+0x180>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   11610:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
   11614:	dfc00917 	ldw	ra,36(sp)
   11618:	dd800817 	ldw	r22,32(sp)
   1161c:	dd400717 	ldw	r21,28(sp)
   11620:	dd000617 	ldw	r20,24(sp)
   11624:	dcc00517 	ldw	r19,20(sp)
   11628:	dc800417 	ldw	r18,16(sp)
   1162c:	dc400317 	ldw	r17,12(sp)
   11630:	dc000217 	ldw	r16,8(sp)
   11634:	dec00a04 	addi	sp,sp,40
   11638:	f800283a 	ret

0001163c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   1163c:	20c00317 	ldw	r3,12(r4)
   11640:	19000437 	ldwio	r4,16(r3)
   11644:	18800337 	ldwio	r2,12(r3)
   11648:	2084703a 	and	r2,r4,r2
   1164c:	28800015 	stw	r2,0(r5)
   11650:	f800283a 	ret

00011654 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   11654:	20800317 	ldw	r2,12(r4)
   11658:	10800437 	ldwio	r2,16(r2)
   1165c:	28800015 	stw	r2,0(r5)
   11660:	f800283a 	ret

00011664 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11664:	20800317 	ldw	r2,12(r4)
   11668:	11400435 	stwio	r5,16(r2)
   1166c:	f800283a 	ret

00011670 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11670:	20800317 	ldw	r2,12(r4)
   11674:	10800337 	ldwio	r2,12(r2)
   11678:	108007cc 	andi	r2,r2,31
   1167c:	28800015 	stw	r2,0(r5)
   11680:	f800283a 	ret

00011684 <alt_avalon_i2c_int_disable>:
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11684:	defffc04 	addi	sp,sp,-16
   11688:	dc000115 	stw	r16,4(sp)
   1168c:	2821883a 	mov	r16,r5
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   11690:	d80b883a 	mov	r5,sp
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11694:	dc400215 	stw	r17,8(sp)
   11698:	dfc00315 	stw	ra,12(sp)
   1169c:	2023883a 	mov	r17,r4
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   116a0:	00116700 	call	11670 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   116a4:	d8800017 	ldw	r2,0(sp)
   116a8:	040a303a 	nor	r5,zero,r16
   116ac:	288a703a 	and	r5,r5,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   116b0:	88800317 	ldw	r2,12(r17)
   116b4:	294007cc 	andi	r5,r5,31
   116b8:	11400335 	stwio	r5,12(r2)
}
   116bc:	dfc00317 	ldw	ra,12(sp)
   116c0:	dc400217 	ldw	r17,8(sp)
   116c4:	dc000117 	ldw	r16,4(sp)
   116c8:	dec00404 	addi	sp,sp,16
   116cc:	f800283a 	ret

000116d0 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   116d0:	defffc04 	addi	sp,sp,-16
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   116d4:	014007c4 	movi	r5,31
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   116d8:	dc800215 	stw	r18,8(sp)
   116dc:	dfc00315 	stw	ra,12(sp)
   116e0:	2025883a 	mov	r18,r4
   116e4:	dc400115 	stw	r17,4(sp)
   116e8:	dc000015 	stw	r16,0(sp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   116ec:	00116840 	call	11684 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   116f0:	90800317 	ldw	r2,12(r18)
   116f4:	00c00704 	movi	r3,28
   116f8:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   116fc:	90800617 	ldw	r2,24(r18)
   11700:	10000b26 	beq	r2,zero,11730 <alt_avalon_i2c_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11704:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11708:	043fff84 	movi	r16,-2
   1170c:	8c06703a 	and	r3,r17,r16
   11710:	1801703a 	wrctl	status,r3
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
   11714:	9009883a 	mov	r4,r18
   11718:	103ee83a 	callr	r2
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   1171c:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   11720:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   11724:	8c40004c 	andi	r17,r17,1
   11728:	8c20b03a 	or	r16,r17,r16
   1172c:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
   11730:	dfc00317 	ldw	ra,12(sp)
   11734:	dc800217 	ldw	r18,8(sp)
   11738:	dc400117 	ldw	r17,4(sp)
   1173c:	dc000017 	ldw	r16,0(sp)
   11740:	dec00404 	addi	sp,sp,16
   11744:	f800283a 	ret

00011748 <alt_avalon_i2c_int_enable>:
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11748:	defffc04 	addi	sp,sp,-16
   1174c:	dc400215 	stw	r17,8(sp)
   11750:	2823883a 	mov	r17,r5
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   11754:	d80b883a 	mov	r5,sp
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   11758:	dc000115 	stw	r16,4(sp)
   1175c:	dfc00315 	stw	ra,12(sp)
   11760:	2021883a 	mov	r16,r4
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   11764:	00116700 	call	11670 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   11768:	d9400017 	ldw	r5,0(sp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   1176c:	80800317 	ldw	r2,12(r16)
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
   11770:	894ab03a 	or	r5,r17,r5
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11774:	294007cc 	andi	r5,r5,31
   11778:	11400335 	stwio	r5,12(r2)
}
   1177c:	dfc00317 	ldw	ra,12(sp)
   11780:	dc400217 	ldw	r17,8(sp)
   11784:	dc000117 	ldw	r16,4(sp)
   11788:	dec00404 	addi	sp,sp,16
   1178c:	f800283a 	ret

00011790 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   11790:	defffb04 	addi	sp,sp,-20
   11794:	dc000115 	stw	r16,4(sp)
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   11798:	24000717 	ldw	r16,28(r4)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   1179c:	dc800315 	stw	r18,12(sp)
   117a0:	dc400215 	stw	r17,8(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   117a4:	84800217 	ldw	r18,8(r16)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   117a8:	dfc00415 	stw	ra,16(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   117ac:	00800084 	movi	r2,2

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   117b0:	2023883a 	mov	r17,r4
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   117b4:	90800326 	beq	r18,r2,117c4 <optional_irq_callback+0x34>

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   117b8:	048000b4 	movhi	r18,2
   117bc:	94a1a804 	addi	r18,r18,-31072
   117c0:	00001506 	br	11818 <optional_irq_callback+0x88>
   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   117c4:	81800117 	ldw	r6,4(r16)
   117c8:	81400017 	ldw	r5,0(r16)
   117cc:	d80f883a 	mov	r7,sp
   117d0:	00111180 	call	11118 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   117d4:	d8c00017 	ldw	r3,0(sp)
   117d8:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
   117dc:	81000017 	ldw	r4,0(r16)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   117e0:	10c5c83a 	sub	r2,r2,r3
       irq->buffer+=bytes_read;
   117e4:	20c7883a 	add	r3,r4,r3
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   117e8:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
   117ec:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
   117f0:	103ff126 	beq	r2,zero,117b8 <__alt_data_end+0xffff17b8>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   117f4:	88800317 	ldw	r2,12(r17)
   117f8:	00c00704 	movi	r3,28
   117fc:	10c00435 	stwio	r3,16(r2)
       if (irq->size > 0)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   11800:	900b883a 	mov	r5,r18
   11804:	8809883a 	mov	r4,r17
   11808:	00117480 	call	11748 <alt_avalon_i2c_int_enable>
   1180c:	00000806 	br	11830 <optional_irq_callback+0xa0>
   11810:	94bfffc4 	addi	r18,r18,-1
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   11814:	90000326 	beq	r18,zero,11824 <optional_irq_callback+0x94>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   11818:	8809883a 	mov	r4,r17
   1181c:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   11820:	103ffb1e 	bne	r2,zero,11810 <__alt_data_end+0xffff1810>
         break;
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   11824:	8809883a 	mov	r4,r17
   11828:	0010f780 	call	10f78 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   1182c:	80000215 	stw	zero,8(r16)
}
   11830:	dfc00417 	ldw	ra,16(sp)
   11834:	dc800317 	ldw	r18,12(sp)
   11838:	dc400217 	ldw	r17,8(sp)
   1183c:	dc000117 	ldw	r16,4(sp)
   11840:	dec00504 	addi	sp,sp,20
   11844:	f800283a 	ret

00011848 <alt_avalon_i2c_interrupt_transaction_status>:
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11848:	defff804 	addi	sp,sp,-32
   1184c:	dc800515 	stw	r18,20(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   11850:	24800717 	ldw	r18,28(r4)
    alt_u32 timeout=10000 * irq_data->size + 10000;
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   11854:	d9400104 	addi	r5,sp,4
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11858:	dfc00715 	stw	ra,28(sp)
   1185c:	dc400415 	stw	r17,16(sp)
   11860:	dc000315 	stw	r16,12(sp)
   11864:	2023883a 	mov	r17,r4
   11868:	dcc00615 	stw	r19,24(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1186c:	d8000215 	stw	zero,8(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   11870:	94000117 	ldw	r16,4(r18)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   11874:	00116700 	call	11670 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   11878:	d9400117 	ldw	r5,4(sp)
   1187c:	8809883a 	mov	r4,r17
   11880:	00116840 	call	11684 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   11884:	d9400204 	addi	r5,sp,8
   11888:	8809883a 	mov	r4,r17
   1188c:	00111e40 	call	111e4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   11890:	d8c00217 	ldw	r3,8(sp)
   11894:	90800217 	ldw	r2,8(r18)
   11898:	18001826 	beq	r3,zero,118fc <alt_avalon_i2c_interrupt_transaction_status+0xb4>
    {
      if (irq_data->irq_busy)
   1189c:	10001526 	beq	r2,zero,118f4 <alt_avalon_i2c_interrupt_transaction_status+0xac>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   118a0:	84000044 	addi	r16,r16,1
   118a4:	8409c424 	muli	r16,r16,10000
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
   118a8:	04c00244 	movi	r19,9

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   118ac:	8809883a 	mov	r4,r17
   118b0:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   118b4:	10000726 	beq	r2,zero,118d4 <alt_avalon_i2c_interrupt_transaction_status+0x8c>
        {
              if (timeout<10) alt_busy_sleep(10000);
   118b8:	9c000236 	bltu	r19,r16,118c4 <alt_avalon_i2c_interrupt_transaction_status+0x7c>
   118bc:	0109c404 	movi	r4,10000
   118c0:	00122c40 	call	122c4 <alt_busy_sleep>
              if (--timeout == 0)
   118c4:	843fffc4 	addi	r16,r16,-1
   118c8:	803ff81e 	bne	r16,zero,118ac <__alt_data_end+0xffff18ac>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   118cc:	00bfff84 	movi	r2,-2
   118d0:	d8800215 	stw	r2,8(sp)
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   118d4:	91400017 	ldw	r5,0(r18)
   118d8:	d80f883a 	mov	r7,sp
   118dc:	000d883a 	mov	r6,zero
   118e0:	8809883a 	mov	r4,r17
   118e4:	00111180 	call	11118 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   118e8:	8809883a 	mov	r4,r17
   118ec:	0010f780 	call	10f78 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   118f0:	90000215 	stw	zero,8(r18)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   118f4:	d8800217 	ldw	r2,8(sp)
   118f8:	00000506 	br	11910 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    }
    
    if (irq_data->irq_busy)
   118fc:	10000426 	beq	r2,zero,11910 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   11900:	d9400117 	ldw	r5,4(sp)
   11904:	8809883a 	mov	r4,r17
   11908:	00117480 	call	11748 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   1190c:	00bffe44 	movi	r2,-7
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
   11910:	dfc00717 	ldw	ra,28(sp)
   11914:	dcc00617 	ldw	r19,24(sp)
   11918:	dc800517 	ldw	r18,20(sp)
   1191c:	dc400417 	ldw	r17,16(sp)
   11920:	dc000317 	ldw	r16,12(sp)
   11924:	dec00804 	addi	sp,sp,32
   11928:	f800283a 	ret

0001192c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   1192c:	20800317 	ldw	r2,12(r4)
   11930:	10800237 	ldwio	r2,8(r2)
   11934:	10800c0c 	andi	r2,r2,48
   11938:	1005d13a 	srai	r2,r2,4
   1193c:	28800015 	stw	r2,0(r5)
   11940:	f800283a 	ret

00011944 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   11944:	20c00317 	ldw	r3,12(r4)
   11948:	18c00204 	addi	r3,r3,8
   1194c:	19000037 	ldwio	r4,0(r3)
   11950:	00bff3c4 	movi	r2,-49
   11954:	280a913a 	slli	r5,r5,4
   11958:	2084703a 	and	r2,r4,r2
   1195c:	29400c0c 	andi	r5,r5,48
   11960:	288ab03a 	or	r5,r5,r2
   11964:	19400035 	stwio	r5,0(r3)
   11968:	f800283a 	ret

0001196c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   1196c:	defff704 	addi	sp,sp,-36
   11970:	dcc00315 	stw	r19,12(sp)
   11974:	dfc00815 	stw	ra,32(sp)
   11978:	ddc00715 	stw	r23,28(sp)
   1197c:	dd800615 	stw	r22,24(sp)
   11980:	dd400515 	stw	r21,20(sp)
   11984:	dd000415 	stw	r20,16(sp)
   11988:	dc800215 	stw	r18,8(sp)
   1198c:	dc400115 	stw	r17,4(sp)
   11990:	dc000015 	stw	r16,0(sp)
   11994:	dcc00917 	ldw	r19,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
   11998:	30004626 	beq	r6,zero,11ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x148>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1199c:	20c00617 	ldw	r3,24(r4)
   119a0:	00800074 	movhi	r2,1
   119a4:	1085e404 	addi	r2,r2,6032
   119a8:	2023883a 	mov	r17,r4
   119ac:	1880431e 	bne	r3,r2,11abc <alt_avalon_i2c_master_receive_using_interrupts+0x150>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   119b0:	3c003fcc 	andi	r16,r7,255
   119b4:	3025883a 	mov	r18,r6
   119b8:	282b883a 	mov	r21,r5
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   119bc:	25000717 	ldw	r20,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   119c0:	8000051e 	bne	r16,zero,119d8 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   119c4:	0010f300 	call	10f30 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   119c8:	10003d1e 	bne	r2,zero,11ac0 <alt_avalon_i2c_master_receive_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   119cc:	88800317 	ldw	r2,12(r17)
   119d0:	00c00704 	movi	r3,28
   119d4:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   119d8:	800d883a 	mov	r6,r16
   119dc:	01400044 	movi	r5,1
   119e0:	8809883a 	mov	r4,r17
   119e4:	00112e40 	call	112e4 <alt_avalon_i2c_send_address>
   119e8:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
   119ec:	1000151e 	bne	r2,zero,11a44 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
   119f0:	002d883a 	mov	r22,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   119f4:	95ffffc4 	addi	r23,r18,-1
   119f8:	b5c0092e 	bgeu	r22,r23,11a20 <alt_avalon_i2c_master_receive_using_interrupts+0xb4>
   119fc:	8000111e 	bne	r16,zero,11a44 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11a00:	000f883a 	mov	r7,zero
   11a04:	000d883a 	mov	r6,zero
   11a08:	000b883a 	mov	r5,zero
   11a0c:	8809883a 	mov	r4,r17
   11a10:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11a14:	1021883a 	mov	r16,r2
            bytes_written++;
   11a18:	b5800044 	addi	r22,r22,1
   11a1c:	003ff606 	br	119f8 <__alt_data_end+0xffff19f8>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11a20:	8000081e 	bne	r16,zero,11a44 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11a24:	9cc03fcc 	andi	r19,r19,255
   11a28:	980f883a 	mov	r7,r19
   11a2c:	000d883a 	mov	r6,zero
   11a30:	000b883a 	mov	r5,zero
   11a34:	8809883a 	mov	r4,r17
   11a38:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11a3c:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   11a40:	10000f26 	beq	r2,zero,11a80 <alt_avalon_i2c_master_receive_using_interrupts+0x114>
    {
        timeout=10000 * size;
   11a44:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   11a48:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   11a4c:	8809883a 	mov	r4,r17
   11a50:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   11a54:	10000626 	beq	r2,zero,11a70 <alt_avalon_i2c_master_receive_using_interrupts+0x104>
        {
            if (timeout<10) alt_busy_sleep(10000);
   11a58:	9c800236 	bltu	r19,r18,11a64 <alt_avalon_i2c_master_receive_using_interrupts+0xf8>
   11a5c:	0109c404 	movi	r4,10000
   11a60:	00122c40 	call	122c4 <alt_busy_sleep>
            if (--timeout == 0)
   11a64:	94bfffc4 	addi	r18,r18,-1
   11a68:	903ff81e 	bne	r18,zero,11a4c <__alt_data_end+0xffff1a4c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11a6c:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11a70:	8809883a 	mov	r4,r17
   11a74:	0010f780 	call	10f78 <alt_avalon_i2c_disable>
   11a78:	8005883a 	mov	r2,r16
   11a7c:	00001006 	br	11ac0 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    else
    {
       if (issue_stop)
   11a80:	98000c26 	beq	r19,zero,11ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11a84:	88800317 	ldw	r2,12(r17)
   11a88:	00c00704 	movi	r3,28
   11a8c:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   11a90:	000b883a 	mov	r5,zero
   11a94:	8809883a 	mov	r4,r17
   11a98:	00119440 	call	11944 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   11a9c:	01400084 	movi	r5,2
   11aa0:	a1400215 	stw	r5,8(r20)
         
         irq_data->buffer = buffer;
   11aa4:	a5400015 	stw	r21,0(r20)
         irq_data->size = size;
   11aa8:	a4800115 	stw	r18,4(r20)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   11aac:	8809883a 	mov	r4,r17
   11ab0:	00117480 	call	11748 <alt_avalon_i2c_int_enable>
   11ab4:	0005883a 	mov	r2,zero
   11ab8:	00000106 	br	11ac0 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   11abc:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
   11ac0:	dfc00817 	ldw	ra,32(sp)
   11ac4:	ddc00717 	ldw	r23,28(sp)
   11ac8:	dd800617 	ldw	r22,24(sp)
   11acc:	dd400517 	ldw	r21,20(sp)
   11ad0:	dd000417 	ldw	r20,16(sp)
   11ad4:	dcc00317 	ldw	r19,12(sp)
   11ad8:	dc800217 	ldw	r18,8(sp)
   11adc:	dc400117 	ldw	r17,4(sp)
   11ae0:	dc000017 	ldw	r16,0(sp)
   11ae4:	dec00904 	addi	sp,sp,36
   11ae8:	f800283a 	ret

00011aec <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11aec:	defff604 	addi	sp,sp,-40
   11af0:	ddc00815 	stw	r23,32(sp)
   11af4:	dd800715 	stw	r22,28(sp)
   11af8:	dd400615 	stw	r21,24(sp)
   11afc:	dd000515 	stw	r20,20(sp)
   11b00:	dcc00415 	stw	r19,16(sp)
   11b04:	dc800315 	stw	r18,12(sp)
   11b08:	dc400215 	stw	r17,8(sp)
   11b0c:	dc000115 	stw	r16,4(sp)
   11b10:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   11b14:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11b18:	2023883a 	mov	r17,r4
   11b1c:	2825883a 	mov	r18,r5
   11b20:	3027883a 	mov	r19,r6
   11b24:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   11b28:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   11b2c:	05400244 	movi	r21,9
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11b30:	05800044 	movi	r22,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11b34:	05c00084 	movi	r23,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   11b38:	38001926 	beq	r7,zero,11ba0 <alt_avalon_i2c_master_rx+0xb4>
    {
      while (retry--) 
   11b3c:	843fffc4 	addi	r16,r16,-1
   11b40:	85001926 	beq	r16,r20,11ba8 <alt_avalon_i2c_master_rx+0xbc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11b44:	ac000236 	bltu	r21,r16,11b50 <alt_avalon_i2c_master_rx+0x64>
   11b48:	0109c404 	movi	r4,10000
   11b4c:	00122c40 	call	122c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11b50:	dd800015 	stw	r22,0(sp)
   11b54:	000f883a 	mov	r7,zero
   11b58:	980d883a 	mov	r6,r19
   11b5c:	900b883a 	mov	r5,r18
   11b60:	8809883a 	mov	r4,r17
   11b64:	001196c0 	call	1196c <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11b68:	10c001c4 	addi	r3,r2,7
   11b6c:	b8fff32e 	bgeu	r23,r3,11b3c <__alt_data_end+0xffff1b3c>
   11b70:	00000d06 	br	11ba8 <alt_avalon_i2c_master_rx+0xbc>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11b74:	ac000236 	bltu	r21,r16,11b80 <alt_avalon_i2c_master_rx+0x94>
   11b78:	0109c404 	movi	r4,10000
   11b7c:	00122c40 	call	122c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   11b80:	dd800015 	stw	r22,0(sp)
   11b84:	000f883a 	mov	r7,zero
   11b88:	980d883a 	mov	r6,r19
   11b8c:	900b883a 	mov	r5,r18
   11b90:	8809883a 	mov	r4,r17
   11b94:	00114940 	call	11494 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11b98:	10c001c4 	addi	r3,r2,7
   11b9c:	b8c00236 	bltu	r23,r3,11ba8 <alt_avalon_i2c_master_rx+0xbc>
        break;
      }
    }
    else
    {
      while (retry--) 
   11ba0:	843fffc4 	addi	r16,r16,-1
   11ba4:	853ff31e 	bne	r16,r20,11b74 <__alt_data_end+0xffff1b74>
        break;
      }
    }
    
    return status;
}        
   11ba8:	dfc00917 	ldw	ra,36(sp)
   11bac:	ddc00817 	ldw	r23,32(sp)
   11bb0:	dd800717 	ldw	r22,28(sp)
   11bb4:	dd400617 	ldw	r21,24(sp)
   11bb8:	dd000517 	ldw	r20,20(sp)
   11bbc:	dcc00417 	ldw	r19,16(sp)
   11bc0:	dc800317 	ldw	r18,12(sp)
   11bc4:	dc400217 	ldw	r17,8(sp)
   11bc8:	dc000117 	ldw	r16,4(sp)
   11bcc:	dec00a04 	addi	sp,sp,40
   11bd0:	f800283a 	ret

00011bd4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   11bd4:	20800317 	ldw	r2,12(r4)
   11bd8:	10800237 	ldwio	r2,8(r2)
   11bdc:	1080030c 	andi	r2,r2,12
   11be0:	1005d0ba 	srai	r2,r2,2
   11be4:	28800015 	stw	r2,0(r5)
   11be8:	f800283a 	ret

00011bec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   11bec:	20c00317 	ldw	r3,12(r4)
   11bf0:	18c00204 	addi	r3,r3,8
   11bf4:	19000037 	ldwio	r4,0(r3)
   11bf8:	00bffcc4 	movi	r2,-13
   11bfc:	294b883a 	add	r5,r5,r5
   11c00:	294b883a 	add	r5,r5,r5
   11c04:	2084703a 	and	r2,r4,r2
   11c08:	2940030c 	andi	r5,r5,12
   11c0c:	288ab03a 	or	r5,r5,r2
   11c10:	19400035 	stwio	r5,0(r3)
   11c14:	f800283a 	ret

00011c18 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   11c18:	defff804 	addi	sp,sp,-32
   11c1c:	dfc00715 	stw	ra,28(sp)
   11c20:	dc000515 	stw	r16,20(sp)
   11c24:	dc400615 	stw	r17,24(sp)
   11c28:	2021883a 	mov	r16,r4
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   11c2c:	0010f780 	call	10f78 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   11c30:	014007c4 	movi	r5,31
   11c34:	8009883a 	mov	r4,r16
   11c38:	00116840 	call	11684 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11c3c:	80800317 	ldw	r2,12(r16)
   11c40:	00c00704 	movi	r3,28
   11c44:	10c00435 	stwio	r3,16(r2)

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   11c48:	044000c4 	movi	r17,3
   11c4c:	880b883a 	mov	r5,r17
   11c50:	8009883a 	mov	r4,r16
   11c54:	0011bec0 	call	11bec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   11c58:	880b883a 	mov	r5,r17
   11c5c:	8009883a 	mov	r4,r16
   11c60:	00119440 	call	11944 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   11c64:	018000b4 	movhi	r6,2
   11c68:	31a1a804 	addi	r6,r6,-31072
   11c6c:	d9400104 	addi	r5,sp,4
   11c70:	8009883a 	mov	r4,r16
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   11c74:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   11c78:	d8000115 	stw	zero,4(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   11c7c:	001107c0 	call	1107c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   11c80:	d9400104 	addi	r5,sp,4
   11c84:	8009883a 	mov	r4,r16
   11c88:	0010fd80 	call	10fd8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   11c8c:	8009883a 	mov	r4,r16
   11c90:	d1600304 	addi	r5,gp,-32756
   11c94:	00123540 	call	12354 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   11c98:	81400517 	ldw	r5,20(r16)
   11c9c:	81000417 	ldw	r4,16(r16)
   11ca0:	01800074 	movhi	r6,1
   11ca4:	d8000015 	stw	zero,0(sp)
   11ca8:	800f883a 	mov	r7,r16
   11cac:	3185b404 	addi	r6,r6,5840
   11cb0:	001224c0 	call	1224c <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
   11cb4:	dfc00717 	ldw	ra,28(sp)
   11cb8:	dc400617 	ldw	r17,24(sp)
   11cbc:	dc000517 	ldw	r16,20(sp)
   11cc0:	dec00804 	addi	sp,sp,32
   11cc4:	f800283a 	ret

00011cc8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   11cc8:	defff804 	addi	sp,sp,-32
   11ccc:	dd000415 	stw	r20,16(sp)
   11cd0:	dfc00715 	stw	ra,28(sp)
   11cd4:	dd800615 	stw	r22,24(sp)
   11cd8:	dd400515 	stw	r21,20(sp)
   11cdc:	dcc00315 	stw	r19,12(sp)
   11ce0:	dc800215 	stw	r18,8(sp)
   11ce4:	dc400115 	stw	r17,4(sp)
   11ce8:	dc000015 	stw	r16,0(sp)
   11cec:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
   11cf0:	30004426 	beq	r6,zero,11e04 <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   11cf4:	20c00617 	ldw	r3,24(r4)
   11cf8:	00800074 	movhi	r2,1
   11cfc:	1085e404 	addi	r2,r2,6032
   11d00:	2023883a 	mov	r17,r4
   11d04:	1880411e 	bne	r3,r2,11e0c <alt_avalon_i2c_master_transmit_using_interrupts+0x144>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11d08:	3c003fcc 	andi	r16,r7,255
   11d0c:	2827883a 	mov	r19,r5
   11d10:	3025883a 	mov	r18,r6
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   11d14:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   11d18:	8000051e 	bne	r16,zero,11d30 <alt_avalon_i2c_master_transmit_using_interrupts+0x68>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   11d1c:	0010f300 	call	10f30 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   11d20:	10003b1e 	bne	r2,zero,11e10 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11d24:	88800317 	ldw	r2,12(r17)
   11d28:	00c00704 	movi	r3,28
   11d2c:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   11d30:	800d883a 	mov	r6,r16
   11d34:	000b883a 	mov	r5,zero
   11d38:	8809883a 	mov	r4,r17
   11d3c:	00112e40 	call	112e4 <alt_avalon_i2c_send_address>
   11d40:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   11d44:	1000151e 	bne	r2,zero,11d9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
   11d48:	95bfffc4 	addi	r22,r18,-1
   11d4c:	9dad883a 	add	r22,r19,r22
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   11d50:	9d800926 	beq	r19,r22,11d78 <alt_avalon_i2c_master_transmit_using_interrupts+0xb0>
   11d54:	8000111e 	bne	r16,zero,11d9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   11d58:	99400003 	ldbu	r5,0(r19)
   11d5c:	000f883a 	mov	r7,zero
   11d60:	000d883a 	mov	r6,zero
   11d64:	8809883a 	mov	r4,r17
   11d68:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11d6c:	1021883a 	mov	r16,r2
            
            ++buffer;
   11d70:	9cc00044 	addi	r19,r19,1
   11d74:	003ff606 	br	11d50 <__alt_data_end+0xffff1d50>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   11d78:	8000081e 	bne	r16,zero,11d9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   11d7c:	99400003 	ldbu	r5,0(r19)
   11d80:	a5003fcc 	andi	r20,r20,255
   11d84:	a00f883a 	mov	r7,r20
   11d88:	000d883a 	mov	r6,zero
   11d8c:	8809883a 	mov	r4,r17
   11d90:	001121c0 	call	1121c <alt_avalon_i2c_cmd_write>
   11d94:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   11d98:	10000f26 	beq	r2,zero,11dd8 <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
   11d9c:	9489c424 	muli	r18,r18,10000
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   11da0:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   11da4:	8809883a 	mov	r4,r17
   11da8:	00111080 	call	11108 <alt_avalon_i2c_is_busy>
   11dac:	10000626 	beq	r2,zero,11dc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x100>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   11db0:	9c800236 	bltu	r19,r18,11dbc <alt_avalon_i2c_master_transmit_using_interrupts+0xf4>
   11db4:	0109c404 	movi	r4,10000
   11db8:	00122c40 	call	122c4 <alt_busy_sleep>
            if (--timeout == 0)
   11dbc:	94bfffc4 	addi	r18,r18,-1
   11dc0:	903ff81e 	bne	r18,zero,11da4 <__alt_data_end+0xffff1da4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   11dc4:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   11dc8:	8809883a 	mov	r4,r17
   11dcc:	0010f780 	call	10f78 <alt_avalon_i2c_disable>
   11dd0:	8005883a 	mov	r2,r16
   11dd4:	00000e06 	br	11e10 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    else
    {
       if (issue_stop)
   11dd8:	a0000a26 	beq	r20,zero,11e04 <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11ddc:	88800317 	ldw	r2,12(r17)
   11de0:	00c00704 	movi	r3,28
   11de4:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   11de8:	000b883a 	mov	r5,zero
   11dec:	8809883a 	mov	r4,r17
   11df0:	0011bec0 	call	11bec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   11df4:	01400044 	movi	r5,1
   11df8:	a9400215 	stw	r5,8(r21)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   11dfc:	8809883a 	mov	r4,r17
   11e00:	00117480 	call	11748 <alt_avalon_i2c_int_enable>
   11e04:	0005883a 	mov	r2,zero
   11e08:	00000106 	br	11e10 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   11e0c:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
   11e10:	dfc00717 	ldw	ra,28(sp)
   11e14:	dd800617 	ldw	r22,24(sp)
   11e18:	dd400517 	ldw	r21,20(sp)
   11e1c:	dd000417 	ldw	r20,16(sp)
   11e20:	dcc00317 	ldw	r19,12(sp)
   11e24:	dc800217 	ldw	r18,8(sp)
   11e28:	dc400117 	ldw	r17,4(sp)
   11e2c:	dc000017 	ldw	r16,0(sp)
   11e30:	dec00804 	addi	sp,sp,32
   11e34:	f800283a 	ret

00011e38 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   11e38:	defff504 	addi	sp,sp,-44
   11e3c:	df000915 	stw	fp,36(sp)
   11e40:	ddc00815 	stw	r23,32(sp)
   11e44:	dd800715 	stw	r22,28(sp)
   11e48:	dd400615 	stw	r21,24(sp)
   11e4c:	dd000515 	stw	r20,20(sp)
   11e50:	dcc00415 	stw	r19,16(sp)
   11e54:	dc800315 	stw	r18,12(sp)
   11e58:	dc400215 	stw	r17,8(sp)
   11e5c:	dc000115 	stw	r16,4(sp)
   11e60:	dfc00a15 	stw	ra,40(sp)
   11e64:	2023883a 	mov	r17,r4
   11e68:	2825883a 	mov	r18,r5
   11e6c:	3027883a 	mov	r19,r6
   11e70:	382d883a 	mov	r22,r7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   11e74:	0409c404 	movi	r16,10000
    
    while (retry--)
   11e78:	057fffc4 	movi	r21,-1
    {
      if (retry<10) alt_busy_sleep(10000);
   11e7c:	05c00244 	movi	r23,9
   11e80:	05000044 	movi	r20,1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11e84:	07000084 	movi	fp,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   11e88:	843fffc4 	addi	r16,r16,-1
   11e8c:	85400f26 	beq	r16,r21,11ecc <alt_avalon_i2c_master_tx+0x94>
    {
      if (retry<10) alt_busy_sleep(10000);
   11e90:	bc000236 	bltu	r23,r16,11e9c <alt_avalon_i2c_master_tx+0x64>
   11e94:	0109c404 	movi	r4,10000
   11e98:	00122c40 	call	122c4 <alt_busy_sleep>
      if (use_interrupts)
   11e9c:	b0803fcc 	andi	r2,r22,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   11ea0:	dd000015 	stw	r20,0(sp)
   11ea4:	000f883a 	mov	r7,zero
   11ea8:	980d883a 	mov	r6,r19
   11eac:	900b883a 	mov	r5,r18
   11eb0:	8809883a 	mov	r4,r17
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
   11eb4:	10000226 	beq	r2,zero,11ec0 <alt_avalon_i2c_master_tx+0x88>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   11eb8:	0011cc80 	call	11cc8 <alt_avalon_i2c_master_transmit_using_interrupts>
   11ebc:	00000106 	br	11ec4 <alt_avalon_i2c_master_tx+0x8c>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   11ec0:	001135c0 	call	1135c <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11ec4:	10c001c4 	addi	r3,r2,7
   11ec8:	e0ffef2e 	bgeu	fp,r3,11e88 <__alt_data_end+0xffff1e88>
      break;
    }

    return status;
}        
   11ecc:	dfc00a17 	ldw	ra,40(sp)
   11ed0:	df000917 	ldw	fp,36(sp)
   11ed4:	ddc00817 	ldw	r23,32(sp)
   11ed8:	dd800717 	ldw	r22,28(sp)
   11edc:	dd400617 	ldw	r21,24(sp)
   11ee0:	dd000517 	ldw	r20,20(sp)
   11ee4:	dcc00417 	ldw	r19,16(sp)
   11ee8:	dc800317 	ldw	r18,12(sp)
   11eec:	dc400217 	ldw	r17,8(sp)
   11ef0:	dc000117 	ldw	r16,4(sp)
   11ef4:	dec00b04 	addi	sp,sp,44
   11ef8:	f800283a 	ret

00011efc <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   11efc:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   11f00:	d8c00c03 	ldbu	r3,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   11f04:	df000915 	stw	fp,36(sp)
   11f08:	ddc00815 	stw	r23,32(sp)
   11f0c:	dd800715 	stw	r22,28(sp)
   11f10:	dd400615 	stw	r21,24(sp)
   11f14:	dd000515 	stw	r20,20(sp)
   11f18:	dcc00415 	stw	r19,16(sp)
   11f1c:	dc800315 	stw	r18,12(sp)
   11f20:	dc400215 	stw	r17,8(sp)
   11f24:	dc000115 	stw	r16,4(sp)
   11f28:	dfc00a15 	stw	ra,40(sp)
   11f2c:	2023883a 	mov	r17,r4
   11f30:	2825883a 	mov	r18,r5
   11f34:	3027883a 	mov	r19,r6
   11f38:	3829883a 	mov	r20,r7
   11f3c:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   11f40:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   11f44:	05c00244 	movi	r23,9
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11f48:	05400084 	movi	r21,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11f4c:	07000044 	movi	fp,1
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   11f50:	18002126 	beq	r3,zero,11fd8 <alt_avalon_i2c_master_tx_rx+0xdc>
    {
      while (retry--) 
   11f54:	843fffc4 	addi	r16,r16,-1
   11f58:	85802a26 	beq	r16,r22,12004 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
   11f5c:	bc000236 	bltu	r23,r16,11f68 <alt_avalon_i2c_master_tx_rx+0x6c>
   11f60:	0109c404 	movi	r4,10000
   11f64:	00122c40 	call	122c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11f68:	d8000015 	stw	zero,0(sp)
   11f6c:	000f883a 	mov	r7,zero
   11f70:	980d883a 	mov	r6,r19
   11f74:	900b883a 	mov	r5,r18
   11f78:	8809883a 	mov	r4,r17
   11f7c:	0011cc80 	call	11cc8 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11f80:	10c001c4 	addi	r3,r2,7
   11f84:	a8fff32e 	bgeu	r21,r3,11f54 <__alt_data_end+0xffff1f54>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11f88:	d9800b17 	ldw	r6,44(sp)
   11f8c:	df000015 	stw	fp,0(sp)
   11f90:	01c00044 	movi	r7,1
   11f94:	a00b883a 	mov	r5,r20
   11f98:	8809883a 	mov	r4,r17
   11f9c:	001196c0 	call	1196c <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11fa0:	10c001c4 	addi	r3,r2,7
   11fa4:	a8ffeb2e 	bgeu	r21,r3,11f54 <__alt_data_end+0xffff1f54>
   11fa8:	00001606 	br	12004 <alt_avalon_i2c_master_tx_rx+0x108>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   11fac:	bc000236 	bltu	r23,r16,11fb8 <alt_avalon_i2c_master_tx_rx+0xbc>
   11fb0:	0109c404 	movi	r4,10000
   11fb4:	00122c40 	call	122c4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   11fb8:	d8000015 	stw	zero,0(sp)
   11fbc:	000f883a 	mov	r7,zero
   11fc0:	980d883a 	mov	r6,r19
   11fc4:	900b883a 	mov	r5,r18
   11fc8:	8809883a 	mov	r4,r17
   11fcc:	001135c0 	call	1135c <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11fd0:	10c001c4 	addi	r3,r2,7
   11fd4:	a8c00336 	bltu	r21,r3,11fe4 <alt_avalon_i2c_master_tx_rx+0xe8>
        break;
      }
    }
    else 
    {
      while (retry--) 
   11fd8:	843fffc4 	addi	r16,r16,-1
   11fdc:	85bff31e 	bne	r16,r22,11fac <__alt_data_end+0xffff1fac>
   11fe0:	00000806 	br	12004 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   11fe4:	d9800b17 	ldw	r6,44(sp)
   11fe8:	df000015 	stw	fp,0(sp)
   11fec:	01c00044 	movi	r7,1
   11ff0:	a00b883a 	mov	r5,r20
   11ff4:	8809883a 	mov	r4,r17
   11ff8:	00114940 	call	11494 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   11ffc:	10c001c4 	addi	r3,r2,7
   12000:	a8fff52e 	bgeu	r21,r3,11fd8 <__alt_data_end+0xffff1fd8>
        break;
      }
    }
    
    return status;
}                                       
   12004:	dfc00a17 	ldw	ra,40(sp)
   12008:	df000917 	ldw	fp,36(sp)
   1200c:	ddc00817 	ldw	r23,32(sp)
   12010:	dd800717 	ldw	r22,28(sp)
   12014:	dd400617 	ldw	r21,24(sp)
   12018:	dd000517 	ldw	r20,20(sp)
   1201c:	dcc00417 	ldw	r19,16(sp)
   12020:	dc800317 	ldw	r18,12(sp)
   12024:	dc400217 	ldw	r17,8(sp)
   12028:	dc000117 	ldw	r16,4(sp)
   1202c:	dec00b04 	addi	sp,sp,44
   12030:	f800283a 	ret

00012034 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   12034:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12038:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1203c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12040:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12044:	2980072e 	bgeu	r5,r6,12064 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12048:	38c00037 	ldwio	r3,0(r7)
   1204c:	18ffffec 	andhi	r3,r3,65535
   12050:	183ffc26 	beq	r3,zero,12044 <__alt_data_end+0xffff2044>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   12054:	28c00007 	ldb	r3,0(r5)
   12058:	20c00035 	stwio	r3,0(r4)
   1205c:	29400044 	addi	r5,r5,1
   12060:	003ff806 	br	12044 <__alt_data_end+0xffff2044>

  return count;
}
   12064:	f800283a 	ret

00012068 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12068:	defffd04 	addi	sp,sp,-12
   1206c:	dfc00215 	stw	ra,8(sp)
   12070:	dc400115 	stw	r17,4(sp)
   12074:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12078:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1207c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12080:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12084:	043fff84 	movi	r16,-2
   12088:	8c04703a 	and	r2,r17,r16
   1208c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   12090:	00124840 	call	12484 <alt_tick>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   12094:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   12098:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   1209c:	8c40004c 	andi	r17,r17,1
   120a0:	8c20b03a 	or	r16,r17,r16
   120a4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   120a8:	dfc00217 	ldw	ra,8(sp)
   120ac:	dc400117 	ldw	r17,4(sp)
   120b0:	dc000017 	ldw	r16,0(sp)
   120b4:	dec00304 	addi	sp,sp,12
   120b8:	f800283a 	ret

000120bc <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   120bc:	d0e08417 	ldw	r3,-32240(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   120c0:	defffe04 	addi	sp,sp,-8
   120c4:	dfc00115 	stw	ra,4(sp)
   120c8:	2005883a 	mov	r2,r4
   120cc:	2809883a 	mov	r4,r5
   120d0:	300b883a 	mov	r5,r6
   120d4:	1800011e 	bne	r3,zero,120dc <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
   120d8:	d1e08415 	stw	r7,-32240(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   120dc:	00c001c4 	movi	r3,7
   120e0:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   120e4:	01800074 	movhi	r6,1
   120e8:	d8000015 	stw	zero,0(sp)
   120ec:	100f883a 	mov	r7,r2
   120f0:	31881a04 	addi	r6,r6,8296
   120f4:	001224c0 	call	1224c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   120f8:	dfc00117 	ldw	ra,4(sp)
   120fc:	dec00204 	addi	sp,sp,8
   12100:	f800283a 	ret

00012104 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12104:	0030e03a 	nextpc	et
   12108:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12114:	0030e03a 	nextpc	et
   12118:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12124:	0030e03a 	nextpc	et
   12128:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12134:	0030e03a 	nextpc	et
   12138:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12144:	0030e03a 	nextpc	et
   12148:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12154:	0030e03a 	nextpc	et
   12158:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12164:	0030e03a 	nextpc	et
   12168:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   12174:	0030e03a 	nextpc	et
   12178:	00121841 	jmpi	12184 <alt_shadow_non_preemptive_interrupt>
	...

00012184 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
   12184:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
   12188:	dec00038 	rdprs	sp,sp,0
    rdctl r5, status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    wrctl status, r5
#endif

    ldw r4, 8(et)               /* load isr_context */
   1218c:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
   12190:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
   12194:	ef7fff04 	addi	ea,ea,-4
    eret
   12198:	ef80083a 	eret

0001219c <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
   1219c:	20800117 	ldw	r2,4(r4)
   121a0:	d0e08204 	addi	r3,gp,-32248
   121a4:	1085883a 	add	r2,r2,r2
   121a8:	1085883a 	add	r2,r2,r2
   121ac:	1885883a 	add	r2,r3,r2
   121b0:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
   121b4:	20800017 	ldw	r2,0(r4)
   121b8:	00ffffc4 	movi	r3,-1
   121bc:	10c02235 	stwio	r3,136(r2)
   121c0:	21400704 	addi	r5,r4,28

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   121c4:	0007883a 	mov	r3,zero
   121c8:	20800217 	ldw	r2,8(r4)
   121cc:	1880092e 	bgeu	r3,r2,121f4 <alt_vic_irq_init+0x58>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
   121d0:	21800017 	ldw	r6,0(r4)
   121d4:	18c5883a 	add	r2,r3,r3
   121d8:	1085883a 	add	r2,r2,r2
   121dc:	3085883a 	add	r2,r6,r2
   121e0:	29800017 	ldw	r6,0(r5)
   121e4:	11800035 	stwio	r6,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   121e8:	18c00044 	addi	r3,r3,1
   121ec:	29400104 	addi	r5,r5,4
   121f0:	003ff506 	br	121c8 <__alt_data_end+0xffff21c8>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   121f4:	21800517 	ldw	r6,20(r4)
   121f8:	01c00074 	movhi	r7,1
   121fc:	0005883a 	mov	r2,zero
   12200:	39c98d04 	addi	r7,r7,9780
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   12204:	01400204 	movi	r5,8
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   12208:	1087883a 	add	r3,r2,r2
   1220c:	18c7883a 	add	r3,r3,r3
   12210:	19c7883a 	add	r3,r3,r7
   12214:	18c00017 	ldw	r3,0(r3)
   12218:	1980061e 	bne	r3,r6,12234 <alt_vic_irq_init+0x98>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
   1221c:	20c00417 	ldw	r3,16(r4)
   12220:	21400017 	ldw	r5,0(r4)
   12224:	180690fa 	slli	r3,r3,3
   12228:	1884b03a 	or	r2,r3,r2
   1222c:	28802835 	stwio	r2,160(r5)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
   12230:	00000206 	br	1223c <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   12234:	10800044 	addi	r2,r2,1
   12238:	117ff31e 	bne	r2,r5,12208 <__alt_data_end+0xffff2208>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
   1223c:	20800017 	ldw	r2,0(r4)
   12240:	20c00617 	ldw	r3,24(r4)
   12244:	10c02a35 	stwio	r3,168(r2)
   12248:	f800283a 	ret

0001224c <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
   1224c:	20001b1e 	bne	r4,zero,122bc <alt_ic_isr_register+0x70>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
   12250:	d0e08217 	ldw	r3,-32248(gp)

    if(irq < pdev->num_of_intr_ports)
   12254:	18800217 	ldw	r2,8(r3)
   12258:	2880182e 	bgeu	r5,r2,122bc <alt_ic_isr_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1225c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12260:	00bfff84 	movi	r2,-2
   12264:	4088703a 	and	r4,r8,r2
   12268:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
   1226c:	19000517 	ldw	r4,20(r3)
   12270:	1a400617 	ldw	r9,24(r3)
   12274:	2909383a 	mul	r4,r5,r4
   12278:	4909883a 	add	r4,r9,r4

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
   1227c:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
   12280:	21c00315 	stw	r7,12(r4)
   12284:	19000017 	ldw	r4,0(r3)
   12288:	00c00044 	movi	r3,1

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   1228c:	1946983a 	sll	r3,r3,r5

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
   12290:	30000226 	beq	r6,zero,1229c <alt_ic_isr_register+0x50>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   12294:	20c02135 	stwio	r3,132(r4)
   12298:	00000106 	br	122a0 <alt_ic_isr_register+0x54>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
   1229c:	20c02235 	stwio	r3,136(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   122a0:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   122a4:	1884703a 	and	r2,r3,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   122a8:	4200004c 	andi	r8,r8,1
   122ac:	4084b03a 	or	r2,r8,r2
   122b0:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
   122b4:	0005883a 	mov	r2,zero
   122b8:	f800283a 	ret
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
        return -1;
   122bc:	00bfffc4 	movi	r2,-1

        return 0;
    }

    return -1;
}
   122c0:	f800283a 	ret

000122c4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   122c4:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   122c8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   122cc:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   122d0:	dc000015 	stw	r16,0(sp)
   122d4:	dfc00115 	stw	ra,4(sp)
   122d8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   122dc:	0010c700 	call	10c70 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   122e0:	10000e26 	beq	r2,zero,1231c <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   122e4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   122e8:	013e0034 	movhi	r4,63488
   122ec:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   122f0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   122f4:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   122f8:	297fffc4 	addi	r5,r5,-1
   122fc:	283ffe1e 	bne	r5,zero,122f8 <__alt_data_end+0xffff22f8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12300:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12304:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12308:	18bffb16 	blt	r3,r2,122f8 <__alt_data_end+0xffff22f8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1230c:	8020913a 	slli	r16,r16,4
   12310:	843fffc4 	addi	r16,r16,-1
   12314:	803ffe1e 	bne	r16,zero,12310 <__alt_data_end+0xffff2310>
   12318:	00000306 	br	12328 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1231c:	8020913a 	slli	r16,r16,4
   12320:	843fffc4 	addi	r16,r16,-1
   12324:	043ffe16 	blt	zero,r16,12320 <__alt_data_end+0xffff2320>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   12328:	0005883a 	mov	r2,zero
   1232c:	dfc00117 	ldw	ra,4(sp)
   12330:	dc000017 	ldw	r16,0(sp)
   12334:	dec00204 	addi	sp,sp,8
   12338:	f800283a 	ret

0001233c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1233c:	0005883a 	mov	r2,zero
   12340:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12344:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12348:	10800804 	addi	r2,r2,32
   1234c:	10fffd1e 	bne	r2,r3,12344 <__alt_data_end+0xffff2344>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12350:	f800283a 	ret

00012354 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12354:	20000226 	beq	r4,zero,12360 <alt_dev_llist_insert+0xc>
   12358:	20800217 	ldw	r2,8(r4)
   1235c:	1000101e 	bne	r2,zero,123a0 <alt_dev_llist_insert+0x4c>
   12360:	d0a00517 	ldw	r2,-32748(gp)
   12364:	10000926 	beq	r2,zero,1238c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12368:	deffff04 	addi	sp,sp,-4
   1236c:	dfc00015 	stw	ra,0(sp)
   12370:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12374:	00c00584 	movi	r3,22
   12378:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1237c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12380:	dfc00017 	ldw	ra,0(sp)
   12384:	dec00104 	addi	sp,sp,4
   12388:	f800283a 	ret
   1238c:	d0a07e04 	addi	r2,gp,-32264
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12390:	00c00584 	movi	r3,22
   12394:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12398:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1239c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   123a0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   123a4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   123a8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   123ac:	28800017 	ldw	r2,0(r5)
   123b0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   123b4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   123b8:	0005883a 	mov	r2,zero
   123bc:	f800283a 	ret

000123c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   123c0:	defffb04 	addi	sp,sp,-20
   123c4:	dcc00315 	stw	r19,12(sp)
   123c8:	dc800215 	stw	r18,8(sp)
   123cc:	dc400115 	stw	r17,4(sp)
   123d0:	dc000015 	stw	r16,0(sp)
   123d4:	dfc00415 	stw	ra,16(sp)
   123d8:	2027883a 	mov	r19,r4
   123dc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   123e0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   123e4:	00104a00 	call	104a0 <strlen>
   123e8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   123ec:	84400726 	beq	r16,r17,1240c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   123f0:	81000217 	ldw	r4,8(r16)
   123f4:	900d883a 	mov	r6,r18
   123f8:	980b883a 	mov	r5,r19
   123fc:	00125740 	call	12574 <memcmp>
   12400:	10000426 	beq	r2,zero,12414 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12404:	84000017 	ldw	r16,0(r16)
   12408:	003ff806 	br	123ec <__alt_data_end+0xffff23ec>
  }
  
  /* No match found */
  
  return NULL;
   1240c:	0005883a 	mov	r2,zero
   12410:	00000106 	br	12418 <alt_find_dev+0x58>
   12414:	8005883a 	mov	r2,r16
}
   12418:	dfc00417 	ldw	ra,16(sp)
   1241c:	dcc00317 	ldw	r19,12(sp)
   12420:	dc800217 	ldw	r18,8(sp)
   12424:	dc400117 	ldw	r17,4(sp)
   12428:	dc000017 	ldw	r16,0(sp)
   1242c:	dec00504 	addi	sp,sp,20
   12430:	f800283a 	ret

00012434 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12434:	01440004 	movi	r5,4096
   12438:	0009883a 	mov	r4,zero
   1243c:	001253c1 	jmpi	1253c <alt_icache_flush>

00012440 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12440:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12444:	00bfff84 	movi	r2,-2
   12448:	188a703a 	and	r5,r3,r2
   1244c:	2801703a 	wrctl	status,r5
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12450:	21800117 	ldw	r6,4(r4)
   12454:	21400017 	ldw	r5,0(r4)
   12458:	29800115 	stw	r6,4(r5)
  entry->previous->next = entry->next;
   1245c:	21800117 	ldw	r6,4(r4)
   12460:	31400015 	stw	r5,0(r6)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12464:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   12468:	21000015 	stw	r4,0(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   1246c:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   12470:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   12474:	18c0004c 	andi	r3,r3,1
   12478:	1884b03a 	or	r2,r3,r2
   1247c:	1001703a 	wrctl	status,r2
   12480:	f800283a 	ret

00012484 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12484:	d0a08317 	ldw	r2,-32244(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12488:	defffb04 	addi	sp,sp,-20
   1248c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12490:	d4200617 	ldw	r16,-32744(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12494:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12498:	dc800215 	stw	r18,8(sp)
   1249c:	dc400115 	stw	r17,4(sp)
   124a0:	dfc00415 	stw	ra,16(sp)
   124a4:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   124a8:	d0a08315 	stw	r2,-32244(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   124ac:	d4600604 	addi	r17,gp,-32744
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   124b0:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   124b4:	84401a26 	beq	r16,r17,12520 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   124b8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   124bc:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   124c0:	10000326 	beq	r2,zero,124d0 <alt_tick+0x4c>
   124c4:	d0a08317 	ldw	r2,-32244(gp)
   124c8:	1000011e 	bne	r2,zero,124d0 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   124cc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   124d0:	d0e08317 	ldw	r3,-32244(gp)
   124d4:	80800217 	ldw	r2,8(r16)
   124d8:	18800f36 	bltu	r3,r2,12518 <alt_tick+0x94>
   124dc:	80800403 	ldbu	r2,16(r16)
   124e0:	10000d1e 	bne	r2,zero,12518 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   124e4:	80800317 	ldw	r2,12(r16)
   124e8:	81000517 	ldw	r4,20(r16)
   124ec:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   124f0:	1000031e 	bne	r2,zero,12500 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   124f4:	8009883a 	mov	r4,r16
   124f8:	00124400 	call	12440 <alt_alarm_stop>
   124fc:	00000606 	br	12518 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   12500:	80c00217 	ldw	r3,8(r16)
   12504:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12508:	d0e08317 	ldw	r3,-32244(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   1250c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12510:	10c0012e 	bgeu	r2,r3,12518 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   12514:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12518:	9821883a 	mov	r16,r19
   1251c:	003fe506 	br	124b4 <__alt_data_end+0xffff24b4>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   12520:	dfc00417 	ldw	ra,16(sp)
   12524:	dcc00317 	ldw	r19,12(sp)
   12528:	dc800217 	ldw	r18,8(sp)
   1252c:	dc400117 	ldw	r17,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00504 	addi	sp,sp,20
   12538:	f800283a 	ret

0001253c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   1253c:	00840004 	movi	r2,4096
   12540:	1140012e 	bgeu	r2,r5,12548 <alt_icache_flush+0xc>
   12544:	100b883a 	mov	r5,r2
   12548:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1254c:	2005883a 	mov	r2,r4
   12550:	1140032e 	bgeu	r2,r5,12560 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12554:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12558:	10800804 	addi	r2,r2,32
   1255c:	003ffc06 	br	12550 <__alt_data_end+0xffff2550>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12560:	210007cc 	andi	r4,r4,31
   12564:	20000126 	beq	r4,zero,1256c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12568:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1256c:	0000203a 	flushp
   12570:	f800283a 	ret

00012574 <memcmp>:
   12574:	218d883a 	add	r6,r4,r6
   12578:	21800826 	beq	r4,r6,1259c <memcmp+0x28>
   1257c:	20800003 	ldbu	r2,0(r4)
   12580:	28c00003 	ldbu	r3,0(r5)
   12584:	10c00226 	beq	r2,r3,12590 <memcmp+0x1c>
   12588:	10c5c83a 	sub	r2,r2,r3
   1258c:	f800283a 	ret
   12590:	21000044 	addi	r4,r4,1
   12594:	29400044 	addi	r5,r5,1
   12598:	003ff706 	br	12578 <__alt_data_end+0xffff2578>
   1259c:	0005883a 	mov	r2,zero
   125a0:	f800283a 	ret
