
groupProj.elf:     file format elf32-littlenios2
groupProj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000037fc memsz 0x000037fc flags r-x
    LOAD off    0x0000481c vaddr 0x0001381c paddr 0x0001390c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000049fc vaddr 0x000139fc paddr 0x000139fc align 2**12
         filesz 0x00000000 memsz 0x00000084 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  0000490c  2**0
                  CONTENTS
  2 .text         00003678  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  00013698  00013698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  0001381c  0001390c  0000481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000084  000139fc  000139fc  000049fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00013a80  00013a80  0000490c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004f0  00000000  00000000  00004930  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006609  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026d0  00000000  00000000  0000b429  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c52  00000000  00000000  0000daf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000868  00000000  00000000  0001074c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017e0  00000000  00000000  00010fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006147  00000000  00000000  00012794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000188dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000890  00000000  00000000  00018920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a7a5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001a7a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a7ab  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a7ac  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001a7ad  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001a7b6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001a7bf  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0001a7c8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0001a7cf  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000bf73f  00000000  00000000  0001a7fb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00013698 l    d  .rodata	00000000 .rodata
0001381c l    d  .rwdata	00000000 .rwdata
000139fc l    d  .bss	00000000 .bss
00013a80 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../groupProj_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Kalman.c
00000000 l    df *ABS*	00000000 MPU6050.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012d3c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0001381c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000134e0 g     F .text	0000002c alt_main
00012c8c g     F .text	00000080 _puts_r
0001390c g       *ABS*	00000000 __flash_rwdata_start
00012c40 g     F .text	0000004c printf
00010d78 g     F .text	00000440 .hidden __divsf3
000102c8 g     F .text	000000c4 init_MPU
00011acc g     F .text	00000070 .hidden __fixsfsi
0001350c g     F .text	00000038 alt_putstr
00013904 g     O .rwdata	00000004 jtag_uart
00013690 g     F .text	00000008 altera_nios2_gen2_irq_init
00013a00 g     O .bss	00000002 AccY
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013a20 g     O .bss	00000004 errno
00010748 g     F .text	0000003c init_I2C
00013a28 g     O .bss	00000004 alt_argv
0001b8fc g       *ABS*	00000000 _gp
00013544 g     F .text	00000004 usleep
000115e8 g     F .text	000004e4 .hidden __subsf3
00012630 g     F .text	000000dc .hidden __floatsidf
0001038c g     F .text	0000003c get_x_accel_MPU
00012d0c g     F .text	00000014 puts
00012c04 g     F .text	0000003c _printf_r
00012b20 g     F .text	00000064 .hidden __udivsi3
00013a30 g     O .bss	00000028 rollK
00013a04 g     O .bss	00000008 accZ
00013a58 g     O .bss	00000028 pitchK
0001270c g     F .text	00000110 .hidden __extendsfdf2
00010440 g     F .text	0000003c get_x_gyro_MPU
000138fc g     O .rwdata	00000004 _global_impure_ptr
00013a80 g       *ABS*	00000000 __bss_end
0001009c g     F .text	0000022c getAngle
000104b8 g     F .text	0000003c get_z_gyro_MPU
00013688 g     F .text	00000004 alt_dcache_flush_all
0001390c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00013548 g     F .text	00000060 write
0001381c g       *ABS*	00000000 __ram_rodata_end
00012b84 g     F .text	00000058 .hidden __umodsi3
00013a80 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000129c4 g     F .text	00000064 .hidden __clzsi2
000135cc g     F .text	00000034 altera_avalon_jtag_uart_write
00012da8 g     F .text	0000052c ___vfprintf_internal_r
00013a0c g     O .bss	00000002 AccZ
00010020 g     F .text	0000003c _start
00010404 g     F .text	0000003c get_z_accel_MPU
000135c8 g     F .text	00000004 alt_sys_init
00011b3c g     F .text	00000124 .hidden __floatsisf
00012bdc g     F .text	00000028 .hidden __mulsi3
0001381c g       *ABS*	00000000 __ram_rwdata_start
00013698 g       *ABS*	00000000 __ram_rodata_start
0001081c g     F .text	00000094 write_byte_MPU
000103c8 g     F .text	0000003c get_y_accel_MPU
00013600 g     F .text	00000088 alt_busy_sleep
00013a80 g       *ABS*	00000000 __alt_stack_base
00011c60 g     F .text	000009d0 .hidden __divdf3
0001005c g     F .text	00000040 KalmanInit
000132f0 g     F .text	000000b8 __sfvwrite_small_dev
000139fc g       *ABS*	00000000 __bss_start
00010538 g     F .text	00000210 main
00013a24 g     O .bss	00000004 alt_envp
000104f4 g     F .text	00000040 atan2HW
0001281c g     F .text	000001a8 .hidden __truncdfsf2
00013908 g     O .rwdata	00000004 alt_errno
00012a28 g     F .text	00000084 .hidden __divsi3
000111b8 g     F .text	00000430 .hidden __mulsf3
00013698 g       *ABS*	00000000 __flash_rodata_start
00013a0e g     O .bss	00000002 AccX
000135a8 g     F .text	00000020 alt_irq_init
000139fc g     O .bss	00000001 dev_addr
0001371c g     O .rodata	00000100 .hidden __clz_tab
000133a8 g     F .text	00000058 _write_r
00013900 g     O .rwdata	00000004 _impure_ptr
00013a2c g     O .bss	00000004 alt_argc
00010534 g     F .text	00000004 uart_in
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001390c g       *ABS*	00000000 _edata
00013a80 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00012aac g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00013a10 g     O .bss	00000008 accY
0001000c g       .entry	00000000 _exit
0001047c g     F .text	0000003c get_y_gyro_MPU
00012d20 g     F .text	0000001c strlen
0001368c g     F .text	00000004 alt_icache_flush_all
00013a18 g     O .bss	00000008 accX
000132d4 g     F .text	0000001c __vfprintf_internal
000108b0 g     F .text	000004c8 .hidden __addsf3
00010784 g     F .text	00000098 read_byte_MPU
00013400 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6ae3f14 	ori	gp,gp,47356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	108e7f14 	ori	r2,r2,14844

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18cea014 	ori	r3,r3,14976

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00134000 	call	13400 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00134e00 	call	134e0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <KalmanInit>:



void KalmanInit(KalmanInstance *inst) {
    /* We will set the variables like so, these can also be tuned by the user */
	inst->Q_angle = 0.0001f;
   1005c:	008e34b4 	movhi	r2,14546
   10060:	10adc5c4 	addi	r2,r2,-18665
   10064:	20800015 	stw	r2,0(r4)
	inst->Q_bias = 0.003f;
   10068:	008ed174 	movhi	r2,15173
   1006c:	10a6e984 	addi	r2,r2,-25690
   10070:	20800115 	stw	r2,4(r4)
	inst->R_measure = 0.1f;
   10074:	008f7374 	movhi	r2,15821
   10078:	10b33344 	addi	r2,r2,-13107
   1007c:	20800215 	stw	r2,8(r4)

	inst->angle = 0.0f; // Reset the angle
   10080:	20000315 	stw	zero,12(r4)
	inst->bias = 0.0f; // Reset bias
   10084:	20000415 	stw	zero,16(r4)

	inst->P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
   10088:	20000615 	stw	zero,24(r4)
	inst->P[0][1] = 0.0f;
   1008c:	20000715 	stw	zero,28(r4)
	inst->P[1][0] = 0.0f;
   10090:	20000815 	stw	zero,32(r4)
	inst->P[1][1] = 0.0f;
   10094:	20000915 	stw	zero,36(r4)
   10098:	f800283a 	ret

0001009c <getAngle>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   1009c:	defff404 	addi	sp,sp,-48
   100a0:	dfc00b15 	stw	ra,44(sp)
   100a4:	df000a15 	stw	fp,40(sp)
   100a8:	dd800815 	stw	r22,32(sp)
   100ac:	dd400715 	stw	r21,28(sp)
   100b0:	dd000615 	stw	r20,24(sp)
   100b4:	dcc00515 	stw	r19,20(sp)
   100b8:	dc800415 	stw	r18,16(sp)
   100bc:	dc400315 	stw	r17,12(sp)
   100c0:	dc000215 	stw	r16,8(sp)
   100c4:	ddc00915 	stw	r23,36(sp)
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100c8:	25c00417 	ldw	r23,16(r4)
	inst->P[1][0] = 0.0f;
	inst->P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   100cc:	2811883a 	mov	r8,r5
   100d0:	2021883a 	mov	r16,r4
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100d4:	b80b883a 	mov	r5,r23
   100d8:	3009883a 	mov	r4,r6
	inst->P[1][0] = 0.0f;
	inst->P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(KalmanInstance* inst, float newAngle, float newRate, float dt) {
   100dc:	3825883a 	mov	r18,r7
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100e0:	da000115 	stw	r8,4(sp)
   100e4:	00115e80 	call	115e8 <__subsf3>
	inst->angle += dt * inst->rate;
   100e8:	900b883a 	mov	r5,r18
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
   100ec:	80800515 	stw	r2,20(r16)
	inst->angle += dt * inst->rate;
   100f0:	1009883a 	mov	r4,r2
   100f4:	00111b80 	call	111b8 <__mulsf3>
   100f8:	81400317 	ldw	r5,12(r16)
   100fc:	1009883a 	mov	r4,r2
   10100:	00108b00 	call	108b0 <__addsf3>

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10104:	87000917 	ldw	fp,36(r16)
   10108:	9009883a 	mov	r4,r18

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
	inst->rate = newRate - inst->bias;
	inst->angle += dt * inst->rate;
   1010c:	102b883a 	mov	r21,r2

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10110:	e00b883a 	mov	r5,fp
   10114:	00111b80 	call	111b8 <__mulsf3>
   10118:	84c00717 	ldw	r19,28(r16)
   1011c:	85800817 	ldw	r22,32(r16)
   10120:	1009883a 	mov	r4,r2
   10124:	980b883a 	mov	r5,r19
   10128:	1029883a 	mov	r20,r2
   1012c:	00115e80 	call	115e8 <__subsf3>
   10130:	b00b883a 	mov	r5,r22
   10134:	1009883a 	mov	r4,r2
   10138:	00115e80 	call	115e8 <__subsf3>
   1013c:	81400017 	ldw	r5,0(r16)
   10140:	1009883a 	mov	r4,r2
   10144:	00108b00 	call	108b0 <__addsf3>
   10148:	900b883a 	mov	r5,r18
   1014c:	1009883a 	mov	r4,r2
   10150:	00111b80 	call	111b8 <__mulsf3>
   10154:	81400617 	ldw	r5,24(r16)
   10158:	1009883a 	mov	r4,r2
   1015c:	00108b00 	call	108b0 <__addsf3>
	inst->P[0][1] -= dt * inst->P[1][1];
   10160:	a00b883a 	mov	r5,r20
   10164:	9809883a 	mov	r4,r19
	inst->rate = newRate - inst->bias;
	inst->angle += dt * inst->rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
   10168:	1023883a 	mov	r17,r2
	inst->P[0][1] -= dt * inst->P[1][1];
   1016c:	00115e80 	call	115e8 <__subsf3>
	inst->P[1][0] -= dt * inst->P[1][1];
   10170:	a00b883a 	mov	r5,r20
   10174:	b009883a 	mov	r4,r22
	inst->angle += dt * inst->rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
	inst->P[0][1] -= dt * inst->P[1][1];
   10178:	1027883a 	mov	r19,r2
	inst->P[1][0] -= dt * inst->P[1][1];
   1017c:	00115e80 	call	115e8 <__subsf3>
	inst->P[1][1] += inst->Q_bias * dt;
   10180:	81400117 	ldw	r5,4(r16)
   10184:	9009883a 	mov	r4,r18

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
	inst->P[0][0] += dt * (dt*inst->P[1][1] - inst->P[0][1] - inst->P[1][0] + inst->Q_angle);
	inst->P[0][1] -= dt * inst->P[1][1];
	inst->P[1][0] -= dt * inst->P[1][1];
   10188:	102d883a 	mov	r22,r2
	inst->P[1][1] += inst->Q_bias * dt;
   1018c:	00111b80 	call	111b8 <__mulsf3>
   10190:	e00b883a 	mov	r5,fp
   10194:	1009883a 	mov	r4,r2
   10198:	00108b00 	call	108b0 <__addsf3>

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
   1019c:	81400217 	ldw	r5,8(r16)
   101a0:	8809883a 	mov	r4,r17
   101a4:	d8800015 	stw	r2,0(sp)
   101a8:	00108b00 	call	108b0 <__addsf3>
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101ac:	8809883a 	mov	r4,r17
   101b0:	100b883a 	mov	r5,r2
	inst->P[1][1] += inst->Q_bias * dt;

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
   101b4:	1025883a 	mov	r18,r2
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101b8:	0010d780 	call	10d78 <__divsf3>
    K[1] = inst->P[1][0] / S;
   101bc:	900b883a 	mov	r5,r18
   101c0:	b009883a 	mov	r4,r22
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
   101c4:	1029883a 	mov	r20,r2
    K[1] = inst->P[1][0] / S;
   101c8:	0010d780 	call	10d78 <__divsf3>

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101cc:	da000117 	ldw	r8,4(sp)
   101d0:	a80b883a 	mov	r5,r21
    /* Step 4 */
    float S = inst->P[0][0] + inst->R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = inst->P[0][0] / S;
    K[1] = inst->P[1][0] / S;
   101d4:	1025883a 	mov	r18,r2

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101d8:	4009883a 	mov	r4,r8
   101dc:	00115e80 	call	115e8 <__subsf3>
    /* Step 6 */
    inst->angle += K[0] * y;
   101e0:	a009883a 	mov	r4,r20
   101e4:	100b883a 	mov	r5,r2
    K[0] = inst->P[0][0] / S;
    K[1] = inst->P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
   101e8:	1039883a 	mov	fp,r2
    /* Step 6 */
    inst->angle += K[0] * y;
   101ec:	00111b80 	call	111b8 <__mulsf3>
   101f0:	a80b883a 	mov	r5,r21
   101f4:	1009883a 	mov	r4,r2
   101f8:	00108b00 	call	108b0 <__addsf3>
    inst->bias += K[1] * y;
   101fc:	e00b883a 	mov	r5,fp
   10200:	9009883a 	mov	r4,r18

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
    /* Step 6 */
    inst->angle += K[0] * y;
   10204:	80800315 	stw	r2,12(r16)
   10208:	102b883a 	mov	r21,r2
    inst->bias += K[1] * y;
   1020c:	00111b80 	call	111b8 <__mulsf3>
   10210:	b80b883a 	mov	r5,r23
   10214:	1009883a 	mov	r4,r2
   10218:	00108b00 	call	108b0 <__addsf3>
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   1021c:	a00b883a 	mov	r5,r20
   10220:	8809883a 	mov	r4,r17
    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - inst->angle; // Angle difference
    /* Step 6 */
    inst->angle += K[0] * y;
    inst->bias += K[1] * y;
   10224:	80800415 	stw	r2,16(r16)
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   10228:	00111b80 	call	111b8 <__mulsf3>
   1022c:	8809883a 	mov	r4,r17
   10230:	100b883a 	mov	r5,r2
   10234:	00115e80 	call	115e8 <__subsf3>
    inst->P[0][1] -= K[0] * P01_temp;
   10238:	a00b883a 	mov	r5,r20
   1023c:	9809883a 	mov	r4,r19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
   10240:	80800615 	stw	r2,24(r16)
    inst->P[0][1] -= K[0] * P01_temp;
   10244:	00111b80 	call	111b8 <__mulsf3>
   10248:	9809883a 	mov	r4,r19
   1024c:	100b883a 	mov	r5,r2
   10250:	00115e80 	call	115e8 <__subsf3>
    inst->P[1][0] -= K[1] * P00_temp;
   10254:	900b883a 	mov	r5,r18
   10258:	8809883a 	mov	r4,r17
    /* Step 7 */
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
    inst->P[0][1] -= K[0] * P01_temp;
   1025c:	80800715 	stw	r2,28(r16)
    inst->P[1][0] -= K[1] * P00_temp;
   10260:	00111b80 	call	111b8 <__mulsf3>
   10264:	b009883a 	mov	r4,r22
   10268:	100b883a 	mov	r5,r2
   1026c:	00115e80 	call	115e8 <__subsf3>
    inst->P[1][1] -= K[1] * P01_temp;
   10270:	900b883a 	mov	r5,r18
   10274:	9809883a 	mov	r4,r19
    float P00_temp = inst->P[0][0];
    float P01_temp = inst->P[0][1];

    inst->P[0][0] -= K[0] * P00_temp;
    inst->P[0][1] -= K[0] * P01_temp;
    inst->P[1][0] -= K[1] * P00_temp;
   10278:	80800815 	stw	r2,32(r16)
    inst->P[1][1] -= K[1] * P01_temp;
   1027c:	00111b80 	call	111b8 <__mulsf3>
   10280:	d8c00017 	ldw	r3,0(sp)
   10284:	100b883a 	mov	r5,r2
   10288:	1809883a 	mov	r4,r3
   1028c:	00115e80 	call	115e8 <__subsf3>
   10290:	80800915 	stw	r2,36(r16)

    return inst->angle;
};
   10294:	a805883a 	mov	r2,r21
   10298:	dfc00b17 	ldw	ra,44(sp)
   1029c:	df000a17 	ldw	fp,40(sp)
   102a0:	ddc00917 	ldw	r23,36(sp)
   102a4:	dd800817 	ldw	r22,32(sp)
   102a8:	dd400717 	ldw	r21,28(sp)
   102ac:	dd000617 	ldw	r20,24(sp)
   102b0:	dcc00517 	ldw	r19,20(sp)
   102b4:	dc800417 	ldw	r18,16(sp)
   102b8:	dc400317 	ldw	r17,12(sp)
   102bc:	dc000217 	ldw	r16,8(sp)
   102c0:	dec00c04 	addi	sp,sp,48
   102c4:	f800283a 	ret

000102c8 <init_MPU>:
	write_byte_MPU(27, &clear);
	return 0;
}
*/

ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   102c8:	defffe04 	addi	sp,sp,-8
   102cc:	dfc00115 	stw	ra,4(sp)
	init_I2C();
   102d0:	00107480 	call	10748 <init_I2C>
	alt_u8 buf = 0x00;

	read_byte_MPU(117, &buf);
   102d4:	d9400084 	addi	r5,sp,2
   102d8:	01001d44 	movi	r4,117
}
*/

ALT_AVALON_I2C_STATUS_CODE init_MPU(){
	init_I2C();
	alt_u8 buf = 0x00;
   102dc:	d8000085 	stb	zero,2(sp)

	read_byte_MPU(117, &buf);
   102e0:	00107840 	call	10784 <read_byte_MPU>

	if (buf == 0x68){
   102e4:	d9400083 	ldbu	r5,2(sp)
   102e8:	00801a04 	movi	r2,104
   102ec:	2880181e 	bne	r5,r2,10350 <init_MPU+0x88>
		printf("WhoAmI Passed\n");
   102f0:	01000074 	movhi	r4,1
   102f4:	210da604 	addi	r4,r4,13976
   102f8:	0012d0c0 	call	12d0c <puts>

		return -1;
	}

	alt_u8 clear = 0;
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   102fc:	d9400044 	addi	r5,sp,1
   10300:	01001ac4 	movi	r4,107
		printf("WhoAmI Failed: %x\n", buf);

		return -1;
	}

	alt_u8 clear = 0;
   10304:	d8000045 	stb	zero,1(sp)
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   10308:	001081c0 	call	1081c <write_byte_MPU>
	alt_u8 sleep;
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   1030c:	d80b883a 	mov	r5,sp
   10310:	01001ac4 	movi	r4,107
   10314:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   10318:	d80b883a 	mov	r5,sp
   1031c:	01001ac4 	movi	r4,107
   10320:	00107840 	call	10784 <read_byte_MPU>
	printf("Sleep Status: %x\n", sleep);
   10324:	d9400003 	ldbu	r5,0(sp)
   10328:	01000074 	movhi	r4,1
   1032c:	210daa04 	addi	r4,r4,13992
   10330:	0012c400 	call	12c40 <printf>
	if ((sleep & 0x20)!=0){
   10334:	d8800003 	ldbu	r2,0(sp)
   10338:	1080080c 	andi	r2,r2,32
   1033c:	10000926 	beq	r2,zero,10364 <init_MPU+0x9c>
		printf("It's Sleeping\n");
   10340:	01000074 	movhi	r4,1
   10344:	210db404 	addi	r4,r4,14032
   10348:	0012d0c0 	call	12d0c <puts>
   1034c:	00000506 	br	10364 <init_MPU+0x9c>
	read_byte_MPU(117, &buf);

	if (buf == 0x68){
		printf("WhoAmI Passed\n");
	}else{
		printf("WhoAmI Failed: %x\n", buf);
   10350:	01000074 	movhi	r4,1
   10354:	210daf04 	addi	r4,r4,14012
   10358:	0012c400 	call	12c40 <printf>

		return -1;
   1035c:	00bfffc4 	movi	r2,-1
   10360:	00000706 	br	10380 <init_MPU+0xb8>
	printf("Sleep Status: %x\n", sleep);
	if ((sleep & 0x20)!=0){
		printf("It's Sleeping\n");
	}

	write_byte_MPU(28, &clear);
   10364:	d9400044 	addi	r5,sp,1
   10368:	01000704 	movi	r4,28
   1036c:	001081c0 	call	1081c <write_byte_MPU>
	write_byte_MPU(27, &clear);
   10370:	d9400044 	addi	r5,sp,1
   10374:	010006c4 	movi	r4,27
   10378:	001081c0 	call	1081c <write_byte_MPU>
	return 0;
   1037c:	0005883a 	mov	r2,zero

}
   10380:	dfc00117 	ldw	ra,4(sp)
   10384:	dec00204 	addi	sp,sp,8
   10388:	f800283a 	ret

0001038c <get_x_accel_MPU>:

alt_16 get_x_accel_MPU(){
   1038c:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   10390:	d80b883a 	mov	r5,sp
   10394:	01000ec4 	movi	r4,59
	write_byte_MPU(27, &clear);
	return 0;

}

alt_16 get_x_accel_MPU(){
   10398:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   1039c:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
   103a0:	d9400044 	addi	r5,sp,1
   103a4:	01000f04 	movi	r4,60
   103a8:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   103ac:	d8800003 	ldbu	r2,0(sp)
   103b0:	d8c00043 	ldbu	r3,1(sp)
   103b4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   103b8:	10c4b03a 	or	r2,r2,r3
   103bc:	dfc00117 	ldw	ra,4(sp)
   103c0:	dec00204 	addi	sp,sp,8
   103c4:	f800283a 	ret

000103c8 <get_y_accel_MPU>:

alt_16 get_y_accel_MPU(){
   103c8:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   103cc:	d80b883a 	mov	r5,sp
   103d0:	01000f44 	movi	r4,61
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_accel_MPU(){
   103d4:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   103d8:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
   103dc:	d9400044 	addi	r5,sp,1
   103e0:	01000f84 	movi	r4,62
   103e4:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   103e8:	d8800003 	ldbu	r2,0(sp)
   103ec:	d8c00043 	ldbu	r3,1(sp)
   103f0:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   103f4:	10c4b03a 	or	r2,r2,r3
   103f8:	dfc00117 	ldw	ra,4(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <get_z_accel_MPU>:

alt_16 get_z_accel_MPU(){
   10404:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   10408:	d80b883a 	mov	r5,sp
   1040c:	01000fc4 	movi	r4,63
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_accel_MPU(){
   10410:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   10414:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Z + 1, &lsb);
   10418:	d9400044 	addi	r5,sp,1
   1041c:	01001004 	movi	r4,64
   10420:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10424:	d8800003 	ldbu	r2,0(sp)
   10428:	d8c00043 	ldbu	r3,1(sp)
   1042c:	1004923a 	slli	r2,r2,8
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}
   10430:	10c4b03a 	or	r2,r2,r3
   10434:	dfc00117 	ldw	ra,4(sp)
   10438:	dec00204 	addi	sp,sp,8
   1043c:	f800283a 	ret

00010440 <get_x_gyro_MPU>:


alt_16 get_x_gyro_MPU(){
   10440:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10444:	d80b883a 	mov	r5,sp
   10448:	010010c4 	movi	r4,67
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}


alt_16 get_x_gyro_MPU(){
   1044c:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10450:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
   10454:	d9400044 	addi	r5,sp,1
   10458:	01001104 	movi	r4,68
   1045c:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10460:	d8800003 	ldbu	r2,0(sp)
   10464:	d8c00043 	ldbu	r3,1(sp)
   10468:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   1046c:	10c4b03a 	or	r2,r2,r3
   10470:	dfc00117 	ldw	ra,4(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <get_y_gyro_MPU>:

alt_16 get_y_gyro_MPU(){
   1047c:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   10480:	d80b883a 	mov	r5,sp
   10484:	01001144 	movi	r4,69
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_gyro_MPU(){
   10488:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   1048c:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
   10490:	d9400044 	addi	r5,sp,1
   10494:	01001184 	movi	r4,70
   10498:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   1049c:	d8800003 	ldbu	r2,0(sp)
   104a0:	d8c00043 	ldbu	r3,1(sp)
   104a4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   104a8:	10c4b03a 	or	r2,r2,r3
   104ac:	dfc00117 	ldw	ra,4(sp)
   104b0:	dec00204 	addi	sp,sp,8
   104b4:	f800283a 	ret

000104b8 <get_z_gyro_MPU>:

alt_16 get_z_gyro_MPU(){
   104b8:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   104bc:	d80b883a 	mov	r5,sp
   104c0:	010011c4 	movi	r4,71
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_gyro_MPU(){
   104c4:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   104c8:	00107840 	call	10784 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Z + 1, &lsb);
   104cc:	d9400044 	addi	r5,sp,1
   104d0:	01001204 	movi	r4,72
   104d4:	00107840 	call	10784 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   104d8:	d8800003 	ldbu	r2,0(sp)
   104dc:	d8c00043 	ldbu	r3,1(sp)
   104e0:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   104e4:	10c4b03a 	or	r2,r2,r3
   104e8:	dfc00117 	ldw	ra,4(sp)
   104ec:	dec00204 	addi	sp,sp,8
   104f0:	f800283a 	ret

000104f4 <atan2HW>:
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;
KalmanInstance pitchK, rollK;


float atan2HW(float a, float b){
   104f4:	deffff04 	addi	sp,sp,-4
	alt_u32 a_param = *(alt_u32*) &a;
	alt_u32 b_param = *(alt_u32*) &b;
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_A_BASE, a_param);
   104f8:	008000b4 	movhi	r2,2
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;
KalmanInstance pitchK, rollK;


float atan2HW(float a, float b){
   104fc:	dfc00015 	stw	ra,0(sp)
	alt_u32 a_param = *(alt_u32*) &a;
	alt_u32 b_param = *(alt_u32*) &b;
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_A_BASE, a_param);
   10500:	10842404 	addi	r2,r2,4240
   10504:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_B_BASE, b_param);
   10508:	008000b4 	movhi	r2,2
   1050c:	10842004 	addi	r2,r2,4224
   10510:	11400035 	stwio	r5,0(r2)
	float retFloat;
	usleep(1);
   10514:	01000044 	movi	r4,1
   10518:	00135440 	call	13544 <usleep>
	alt_u32 ret = IORD_ALTERA_AVALON_PIO_DATA(ATAN2_Q_BASE);
	retFloat = *(float*) &ret;
	return retFloat;
}
   1051c:	008000b4 	movhi	r2,2
   10520:	10841c04 	addi	r2,r2,4208
   10524:	10800037 	ldwio	r2,0(r2)
   10528:	dfc00017 	ldw	ra,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <uart_in>:


void uart_in(){
   10534:	f800283a 	ret

00010538 <main>:
}


int main()
{
	alt_putstr("Hello from Nios II!\n");
   10538:	01000074 	movhi	r4,1

}


int main()
{
   1053c:	defff004 	addi	sp,sp,-64
	alt_putstr("Hello from Nios II!\n");
   10540:	210db804 	addi	r4,r4,14048

}


int main()
{
   10544:	dfc00f15 	stw	ra,60(sp)
   10548:	dcc00915 	stw	r19,36(sp)
   1054c:	dc800815 	stw	r18,32(sp)
   10550:	dc000615 	stw	r16,24(sp)
   10554:	df000e15 	stw	fp,56(sp)
   10558:	ddc00d15 	stw	r23,52(sp)
   1055c:	dd800c15 	stw	r22,48(sp)
   10560:	dd400b15 	stw	r21,44(sp)
   10564:	dd000a15 	stw	r20,40(sp)
   10568:	dc400715 	stw	r17,28(sp)
	alt_putstr("Hello from Nios II!\n");
   1056c:	001350c0 	call	1350c <alt_putstr>

	/* Event loop never exits. */
	if (init_MPU() < 0){
   10570:	00102c80 	call	102c8 <init_MPU>
		return -1;
	}
	KalmanInit(&pitchK);
   10574:	01000074 	movhi	r4,1
   10578:	210e9604 	addi	r4,r4,14936
   1057c:	001005c0 	call	1005c <KalmanInit>
	KalmanInit(&rollK);
   10580:	01000074 	movhi	r4,1
   10584:	210e8c04 	addi	r4,r4,14896
   10588:	001005c0 	call	1005c <KalmanInit>
	alt_u32 old = 0;
	alt_u32 old_2 = 0;
	usleep(2000000);
   1058c:	010007f4 	movhi	r4,31
   10590:	21212004 	addi	r4,r4,-31616
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10594:	048000b4 	movhi	r18,2
		float p = getAngle(&pitchK, (float) pitch, (float)(-get_y_gyro_MPU())  / 131.0f, (float)dt/1000000.0f);
		int new_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int delta = new_2 - old_2;

		//Poll Button
		int btn = IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE);
   10598:	04c000b4 	movhi	r19,2
	}
	KalmanInit(&pitchK);
	KalmanInit(&rollK);
	alt_u32 old = 0;
	alt_u32 old_2 = 0;
	usleep(2000000);
   1059c:	00135440 	call	13544 <usleep>
	if (init_MPU() < 0){
		return -1;
	}
	KalmanInit(&pitchK);
	KalmanInit(&rollK);
	alt_u32 old = 0;
   105a0:	0021883a 	mov	r16,zero
	alt_u32 old_2 = 0;
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   105a4:	94844c04 	addi	r18,r18,4400
		float p = getAngle(&pitchK, (float) pitch, (float)(-get_y_gyro_MPU())  / 131.0f, (float)dt/1000000.0f);
		int new_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int delta = new_2 - old_2;

		//Poll Button
		int btn = IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE);
   105a8:	9cc41804 	addi	r19,r19,4192
	alt_u32 old = 0;
	alt_u32 old_2 = 0;
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   105ac:	95000037 	ldwio	r20,0(r18)
		int dt = new - old;
		old = new;
		//printf("%d\n", dt);
		//old = new;
		AccZ =  get_z_accel_MPU();
   105b0:	00104040 	call	10404 <get_z_accel_MPU>
   105b4:	d0a0440d 	sth	r2,-32496(gp)
		AccX =  get_x_accel_MPU();
   105b8:	001038c0 	call	1038c <get_x_accel_MPU>
   105bc:	d0a0448d 	sth	r2,-32494(gp)
		AccY =  get_y_accel_MPU();
   105c0:	00103c80 	call	103c8 <get_y_accel_MPU>

		accZ = (double) AccZ;
   105c4:	d120440f 	ldh	r4,-32496(gp)
		old = new;
		//printf("%d\n", dt);
		//old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
   105c8:	1039883a 	mov	fp,r2
   105cc:	d0a0410d 	sth	r2,-32508(gp)

		accZ = (double) AccZ;
   105d0:	00126300 	call	12630 <__floatsidf>
		accX = (double) AccX;
   105d4:	d120448f 	ldh	r4,-32494(gp)
		//old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
   105d8:	102f883a 	mov	r23,r2
   105dc:	182d883a 	mov	r22,r3
   105e0:	d0a04215 	stw	r2,-32504(gp)
   105e4:	d0e04315 	stw	r3,-32500(gp)
		accX = (double) AccX;
   105e8:	00126300 	call	12630 <__floatsidf>
		accY = (double) AccY;
   105ec:	e13fffcc 	andi	r4,fp,65535
   105f0:	2120001c 	xori	r4,r4,32768
   105f4:	21200004 	addi	r4,r4,-32768
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
		accX = (double) AccX;
   105f8:	102b883a 	mov	r21,r2
   105fc:	1823883a 	mov	r17,r3
   10600:	d0a04715 	stw	r2,-32484(gp)
   10604:	d0e04815 	stw	r3,-32480(gp)
		accY = (double) AccY;
   10608:	00126300 	call	12630 <__floatsidf>

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(-accX, accZ) * 180 / PI);
   1060c:	b809883a 	mov	r4,r23
   10610:	b00b883a 	mov	r5,r22
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();

		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;
   10614:	d0e04615 	stw	r3,-32488(gp)
   10618:	d0a04515 	stw	r2,-32492(gp)

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(-accX, accZ) * 180 / PI);
   1061c:	001281c0 	call	1281c <__truncdfsf2>
   10620:	a809883a 	mov	r4,r21
   10624:	880b883a 	mov	r5,r17
   10628:	102d883a 	mov	r22,r2
   1062c:	001281c0 	call	1281c <__truncdfsf2>
   10630:	b00b883a 	mov	r5,r22
   10634:	1120003c 	xorhi	r4,r2,32768
   10638:	00104f40 	call	104f4 <atan2HW>
   1063c:	0150cd34 	movhi	r5,17204
   10640:	1009883a 	mov	r4,r2
   10644:	00111b80 	call	111b8 <__mulsf3>
   10648:	1009883a 	mov	r4,r2
   1064c:	001270c0 	call	1270c <__extendsfdf2>
   10650:	01947b34 	movhi	r6,20972
   10654:	01d00274 	movhi	r7,16393
   10658:	31a147c4 	addi	r6,r6,-31457
   1065c:	39c7ae04 	addi	r7,r7,7864
   10660:	1009883a 	mov	r4,r2
   10664:	180b883a 	mov	r5,r3
   10668:	0011c600 	call	11c60 <__divdf3>
   1066c:	1009883a 	mov	r4,r2
   10670:	180b883a 	mov	r5,r3
   10674:	001281c0 	call	1281c <__truncdfsf2>
	alt_u32 old_2 = 0;
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
   10678:	a421c83a 	sub	r16,r20,r16
		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;

		//float pitch = (atan2(accX, accZ) * 180 / PI);
		float pitch = (atan2HW(-accX, accZ) * 180 / PI);
   1067c:	102b883a 	mov	r21,r2

		//double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * (180/PI);
		float roll = 0.0f;
		old_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10680:	90800037 	ldwio	r2,0(r18)
		float p = getAngle(&pitchK, (float) pitch, (float)(-get_y_gyro_MPU())  / 131.0f, (float)dt/1000000.0f);
   10684:	001047c0 	call	1047c <get_y_gyro_MPU>
   10688:	8009883a 	mov	r4,r16
   1068c:	1023883a 	mov	r17,r2
   10690:	0011b3c0 	call	11b3c <__floatsisf>
   10694:	01525d34 	movhi	r5,18804
   10698:	29490004 	addi	r5,r5,9216
   1069c:	1009883a 	mov	r4,r2
   106a0:	0010d780 	call	10d78 <__divsf3>
   106a4:	893fffcc 	andi	r4,r17,65535
   106a8:	2120001c 	xori	r4,r4,32768
   106ac:	21200004 	addi	r4,r4,-32768
   106b0:	0109c83a 	sub	r4,zero,r4
   106b4:	102d883a 	mov	r22,r2
   106b8:	0011b3c0 	call	11b3c <__floatsisf>
   106bc:	0150c0f4 	movhi	r5,17155
   106c0:	1009883a 	mov	r4,r2
   106c4:	0010d780 	call	10d78 <__divsf3>
   106c8:	01000074 	movhi	r4,1
   106cc:	b00f883a 	mov	r7,r22
   106d0:	100d883a 	mov	r6,r2
   106d4:	a80b883a 	mov	r5,r21
   106d8:	210e9604 	addi	r4,r4,14936
   106dc:	001009c0 	call	1009c <getAngle>
		int new_2 = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   106e0:	90c00037 	ldwio	r3,0(r18)
		int delta = new_2 - old_2;

		//Poll Button
		int btn = IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE);
   106e4:	99800037 	ldwio	r6,0(r19)
		int shoot = btn & 0x01;
		int go = btn & 0x02;

		printf("%d, %d, %d, %d, %d, %d, %d, %d, %d\n",  (int) p, shoot, go,AccX, AccY, AccZ, (int)pitch, (int) roll, dt);
   106e8:	1009883a 	mov	r4,r2
   106ec:	35c0008c 	andi	r23,r6,2
   106f0:	3440004c 	andi	r17,r6,1
   106f4:	0011acc0 	call	11acc <__fixsfsi>
   106f8:	a809883a 	mov	r4,r21
   106fc:	102d883a 	mov	r22,r2
   10700:	dc000515 	stw	r16,20(sp)
   10704:	d8000415 	stw	zero,16(sp)
   10708:	0011acc0 	call	11acc <__fixsfsi>
   1070c:	d8800315 	stw	r2,12(sp)
   10710:	d0a0440f 	ldh	r2,-32496(gp)
   10714:	01000074 	movhi	r4,1
   10718:	b80f883a 	mov	r7,r23
   1071c:	d8800215 	stw	r2,8(sp)
   10720:	d0a0410f 	ldh	r2,-32508(gp)
   10724:	880d883a 	mov	r6,r17
   10728:	b00b883a 	mov	r5,r22
   1072c:	d8800115 	stw	r2,4(sp)
   10730:	d0a0448f 	ldh	r2,-32494(gp)
   10734:	210dbe04 	addi	r4,r4,14072
	usleep(2000000);
	while (1){

		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
		old = new;
   10738:	a021883a 	mov	r16,r20
		//Poll Button
		int btn = IORD_ALTERA_AVALON_PIO_DATA(BTN_BASE);
		int shoot = btn & 0x01;
		int go = btn & 0x02;

		printf("%d, %d, %d, %d, %d, %d, %d, %d, %d\n",  (int) p, shoot, go,AccX, AccY, AccZ, (int)pitch, (int) roll, dt);
   1073c:	d8800015 	stw	r2,0(sp)
   10740:	0012c400 	call	12c40 <printf>
   10744:	003f9906 	br	105ac <__alt_data_end+0xffff05ac>

00010748 <init_I2C>:
 */
#include "i2c.h"
#include "system.h"

int init_I2C(){
	dev_addr = 0x68;
   10748:	00801a04 	movi	r2,104
   1074c:	d0a04005 	stb	r2,-32512(gp)
	IOWR(I2C_EN_BASE, 0, 0);
   10750:	008000b4 	movhi	r2,2
   10754:	10844004 	addi	r2,r2,4352
   10758:	10000035 	stwio	zero,0(r2)
	IOWR(I2C_RST_BASE, 0, 0xFF);
   1075c:	008000b4 	movhi	r2,2
   10760:	10844404 	addi	r2,r2,4368
   10764:	00c03fc4 	movi	r3,255
   10768:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_DEV_ADDR_BASE, 0, dev_addr);
   1076c:	d0e04003 	ldbu	r3,-32512(gp)
   10770:	008000b4 	movhi	r2,2
   10774:	10843004 	addi	r2,r2,4288
   10778:	10c00035 	stwio	r3,0(r2)
	return 0;
}
   1077c:	0005883a 	mov	r2,zero
   10780:	f800283a 	ret

00010784 <read_byte_MPU>:

int read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	int timeout = 0;
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0x00);
   10784:	008000b4 	movhi	r2,2
   10788:	10844404 	addi	r2,r2,4368
   1078c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
   10790:	00c03fc4 	movi	r3,255
   10794:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
   10798:	008000b4 	movhi	r2,2
   1079c:	21003fcc 	andi	r4,r4,255
   107a0:	10843404 	addi	r2,r2,4304
   107a4:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 1);
   107a8:	00c000b4 	movhi	r3,2
   107ac:	00800044 	movi	r2,1
   107b0:	18c43c04 	addi	r3,r3,4336
   107b4:	18800035 	stwio	r2,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   107b8:	018000b4 	movhi	r6,2
   107bc:	31842804 	addi	r6,r6,4256
   107c0:	30c00037 	ldwio	r3,0(r6)
   107c4:	010000b4 	movhi	r4,2
   107c8:	21042804 	addi	r4,r4,4256
   107cc:	183ffc1e 	bne	r3,zero,107c0 <__alt_data_end+0xffff07c0>
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 1);
   107d0:	00c000b4 	movhi	r3,2
   107d4:	18c44004 	addi	r3,r3,4352
   107d8:	18800035 	stwio	r2,0(r3)
	IOWR(I2C_DEV_ADDR_BASE, 0, dev_addr);
	return 0;
}

int read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	int timeout = 0;
   107dc:	0005883a 	mov	r2,zero
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 1);
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 1);
	while((!IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE)) && timeout < 2000){
   107e0:	0181f404 	movi	r6,2000
   107e4:	21c00037 	ldwio	r7,0(r4)
   107e8:	3800031e 	bne	r7,zero,107f8 <read_byte_MPU+0x74>
   107ec:	11800226 	beq	r2,r6,107f8 <read_byte_MPU+0x74>
		timeout++;
   107f0:	10800044 	addi	r2,r2,1
   107f4:	003ffb06 	br	107e4 <__alt_data_end+0xffff07e4>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0x00);
   107f8:	18000035 	stwio	zero,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   107fc:	20c00037 	ldwio	r3,0(r4)
   10800:	183ffe1e 	bne	r3,zero,107fc <__alt_data_end+0xffff07fc>
	*ret = IORD_ALTERA_AVALON_PIO_DATA(I2C_MISO_BASE);
   10804:	00c000b4 	movhi	r3,2
   10808:	18c42c04 	addi	r3,r3,4272
   1080c:	18c00037 	ldwio	r3,0(r3)
   10810:	28c00005 	stb	r3,0(r5)
	//printf("%d\n", *ret);
	return (timeout > 1999)? 1:0;
   10814:	1081f408 	cmpgei	r2,r2,2000
}
   10818:	f800283a 	ret

0001081c <write_byte_MPU>:

int write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	int timeout = 0;
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0x00);
   1081c:	00c000b4 	movhi	r3,2
   10820:	18c44404 	addi	r3,r3,4368
   10824:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RST_BASE, 0xff);
   10828:	00803fc4 	movi	r2,255
   1082c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
   10830:	00c000b4 	movhi	r3,2
   10834:	21003fcc 	andi	r4,r4,255
   10838:	18c43404 	addi	r3,r3,4304
   1083c:	19000035 	stwio	r4,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 0);
   10840:	00c000b4 	movhi	r3,2
   10844:	18c43c04 	addi	r3,r3,4336
   10848:	18000035 	stwio	zero,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_MOSI_BASE, *byte_in);
   1084c:	29000003 	ldbu	r4,0(r5)
   10850:	00c000b4 	movhi	r3,2
   10854:	18c43804 	addi	r3,r3,4320
   10858:	19000035 	stwio	r4,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   1085c:	014000b4 	movhi	r5,2
   10860:	29442804 	addi	r5,r5,4256
   10864:	28c00037 	ldwio	r3,0(r5)
   10868:	010000b4 	movhi	r4,2
   1086c:	21042804 	addi	r4,r4,4256
   10870:	183ffc1e 	bne	r3,zero,10864 <__alt_data_end+0xffff0864>
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0xFF);
   10874:	00c000b4 	movhi	r3,2
   10878:	18c44004 	addi	r3,r3,4352
   1087c:	18800035 	stwio	r2,0(r3)
	//printf("%d\n", *ret);
	return (timeout > 1999)? 1:0;
}

int write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	int timeout = 0;
   10880:	0005883a 	mov	r2,zero
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_REG_ADDR_BASE, reg);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_RW_BASE, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_MOSI_BASE, *byte_in);
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0xFF);
	while((!IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE)) && timeout < 2000){
   10884:	0141f404 	movi	r5,2000
   10888:	21800037 	ldwio	r6,0(r4)
   1088c:	3000031e 	bne	r6,zero,1089c <write_byte_MPU+0x80>
   10890:	11400226 	beq	r2,r5,1089c <write_byte_MPU+0x80>
		timeout++;
   10894:	10800044 	addi	r2,r2,1
   10898:	003ffb06 	br	10888 <__alt_data_end+0xffff0888>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(I2C_EN_BASE, 0x00);
   1089c:	18000035 	stwio	zero,0(r3)
	while(IORD_ALTERA_AVALON_PIO_DATA(I2C_BUSY_BASE));
   108a0:	20c00037 	ldwio	r3,0(r4)
   108a4:	183ffe1e 	bne	r3,zero,108a0 <__alt_data_end+0xffff08a0>
	return (timeout > 1999)? 1:0;
   108a8:	1081f408 	cmpgei	r2,r2,2000
}
   108ac:	f800283a 	ret

000108b0 <__addsf3>:
   108b0:	defffc04 	addi	sp,sp,-16
   108b4:	2004d7fa 	srli	r2,r4,31
   108b8:	280cd5fa 	srli	r6,r5,23
   108bc:	dc000015 	stw	r16,0(sp)
   108c0:	00c02034 	movhi	r3,128
   108c4:	2020d5fa 	srli	r16,r4,23
   108c8:	280ed7fa 	srli	r7,r5,31
   108cc:	18ffffc4 	addi	r3,r3,-1
   108d0:	dc400115 	stw	r17,4(sp)
   108d4:	1908703a 	and	r4,r3,r4
   108d8:	194a703a 	and	r5,r3,r5
   108dc:	dfc00315 	stw	ra,12(sp)
   108e0:	dc800215 	stw	r18,8(sp)
   108e4:	14403fcc 	andi	r17,r2,255
   108e8:	84003fcc 	andi	r16,r16,255
   108ec:	200890fa 	slli	r4,r4,3
   108f0:	31803fcc 	andi	r6,r6,255
   108f4:	280a90fa 	slli	r5,r5,3
   108f8:	89c05026 	beq	r17,r7,10a3c <__addsf3+0x18c>
   108fc:	8185c83a 	sub	r2,r16,r6
   10900:	00807a0e 	bge	zero,r2,10aec <__addsf3+0x23c>
   10904:	30001e1e 	bne	r6,zero,10980 <__addsf3+0xd0>
   10908:	28006d1e 	bne	r5,zero,10ac0 <__addsf3+0x210>
   1090c:	208001cc 	andi	r2,r4,7
   10910:	10000426 	beq	r2,zero,10924 <__addsf3+0x74>
   10914:	208003cc 	andi	r2,r4,15
   10918:	00c00104 	movi	r3,4
   1091c:	10c00126 	beq	r2,r3,10924 <__addsf3+0x74>
   10920:	20c9883a 	add	r4,r4,r3
   10924:	2081002c 	andhi	r2,r4,1024
   10928:	10003926 	beq	r2,zero,10a10 <__addsf3+0x160>
   1092c:	84000044 	addi	r16,r16,1
   10930:	00803fc4 	movi	r2,255
   10934:	80807826 	beq	r16,r2,10b18 <__addsf3+0x268>
   10938:	200891ba 	slli	r4,r4,6
   1093c:	8805883a 	mov	r2,r17
   10940:	2008d27a 	srli	r4,r4,9
   10944:	84003fcc 	andi	r16,r16,255
   10948:	800695fa 	slli	r3,r16,23
   1094c:	10803fcc 	andi	r2,r2,255
   10950:	04002034 	movhi	r16,128
   10954:	843fffc4 	addi	r16,r16,-1
   10958:	100497fa 	slli	r2,r2,31
   1095c:	2408703a 	and	r4,r4,r16
   10960:	20e0b03a 	or	r16,r4,r3
   10964:	8084b03a 	or	r2,r16,r2
   10968:	dfc00317 	ldw	ra,12(sp)
   1096c:	dc800217 	ldw	r18,8(sp)
   10970:	dc400117 	ldw	r17,4(sp)
   10974:	dc000017 	ldw	r16,0(sp)
   10978:	dec00404 	addi	sp,sp,16
   1097c:	f800283a 	ret
   10980:	00c03fc4 	movi	r3,255
   10984:	80ffe126 	beq	r16,r3,1090c <__alt_data_end+0xffff090c>
   10988:	29410034 	orhi	r5,r5,1024
   1098c:	00c006c4 	movi	r3,27
   10990:	18807516 	blt	r3,r2,10b68 <__addsf3+0x2b8>
   10994:	00c00804 	movi	r3,32
   10998:	1887c83a 	sub	r3,r3,r2
   1099c:	28c6983a 	sll	r3,r5,r3
   109a0:	288ad83a 	srl	r5,r5,r2
   109a4:	1804c03a 	cmpne	r2,r3,zero
   109a8:	288ab03a 	or	r5,r5,r2
   109ac:	2149c83a 	sub	r4,r4,r5
   109b0:	2081002c 	andhi	r2,r4,1024
   109b4:	10001426 	beq	r2,zero,10a08 <__addsf3+0x158>
   109b8:	04810034 	movhi	r18,1024
   109bc:	94bfffc4 	addi	r18,r18,-1
   109c0:	24a4703a 	and	r18,r4,r18
   109c4:	9009883a 	mov	r4,r18
   109c8:	00129c40 	call	129c4 <__clzsi2>
   109cc:	10bffec4 	addi	r2,r2,-5
   109d0:	90a4983a 	sll	r18,r18,r2
   109d4:	14005416 	blt	r2,r16,10b28 <__addsf3+0x278>
   109d8:	1405c83a 	sub	r2,r2,r16
   109dc:	11000044 	addi	r4,r2,1
   109e0:	00800804 	movi	r2,32
   109e4:	1105c83a 	sub	r2,r2,r4
   109e8:	9084983a 	sll	r2,r18,r2
   109ec:	9124d83a 	srl	r18,r18,r4
   109f0:	0021883a 	mov	r16,zero
   109f4:	1008c03a 	cmpne	r4,r2,zero
   109f8:	9108b03a 	or	r4,r18,r4
   109fc:	003fc306 	br	1090c <__alt_data_end+0xffff090c>
   10a00:	1000db26 	beq	r2,zero,10d70 <__addsf3+0x4c0>
   10a04:	1009883a 	mov	r4,r2
   10a08:	208001cc 	andi	r2,r4,7
   10a0c:	103fc11e 	bne	r2,zero,10914 <__alt_data_end+0xffff0914>
   10a10:	2006d0fa 	srli	r3,r4,3
   10a14:	01003fc4 	movi	r4,255
   10a18:	8805883a 	mov	r2,r17
   10a1c:	8100241e 	bne	r16,r4,10ab0 <__addsf3+0x200>
   10a20:	18006e26 	beq	r3,zero,10bdc <__addsf3+0x32c>
   10a24:	19001034 	orhi	r4,r3,64
   10a28:	00c02034 	movhi	r3,128
   10a2c:	18ffffc4 	addi	r3,r3,-1
   10a30:	043fffc4 	movi	r16,-1
   10a34:	20c8703a 	and	r4,r4,r3
   10a38:	003fc206 	br	10944 <__alt_data_end+0xffff0944>
   10a3c:	8187c83a 	sub	r3,r16,r6
   10a40:	00c03e0e 	bge	zero,r3,10b3c <__addsf3+0x28c>
   10a44:	30002326 	beq	r6,zero,10ad4 <__addsf3+0x224>
   10a48:	01803fc4 	movi	r6,255
   10a4c:	81bfaf26 	beq	r16,r6,1090c <__alt_data_end+0xffff090c>
   10a50:	29410034 	orhi	r5,r5,1024
   10a54:	018006c4 	movi	r6,27
   10a58:	30c07416 	blt	r6,r3,10c2c <__addsf3+0x37c>
   10a5c:	01800804 	movi	r6,32
   10a60:	30cdc83a 	sub	r6,r6,r3
   10a64:	298c983a 	sll	r6,r5,r6
   10a68:	28cad83a 	srl	r5,r5,r3
   10a6c:	3006c03a 	cmpne	r3,r6,zero
   10a70:	28cab03a 	or	r5,r5,r3
   10a74:	2149883a 	add	r4,r4,r5
   10a78:	20c1002c 	andhi	r3,r4,1024
   10a7c:	183fe226 	beq	r3,zero,10a08 <__alt_data_end+0xffff0a08>
   10a80:	84000044 	addi	r16,r16,1
   10a84:	00c03fc4 	movi	r3,255
   10a88:	80c05426 	beq	r16,r3,10bdc <__addsf3+0x32c>
   10a8c:	00bf0034 	movhi	r2,64512
   10a90:	10bfffc4 	addi	r2,r2,-1
   10a94:	20c0004c 	andi	r3,r4,1
   10a98:	2088703a 	and	r4,r4,r2
   10a9c:	2008d07a 	srli	r4,r4,1
   10aa0:	20c8b03a 	or	r4,r4,r3
   10aa4:	003f9906 	br	1090c <__alt_data_end+0xffff090c>
   10aa8:	0007883a 	mov	r3,zero
   10aac:	0005883a 	mov	r2,zero
   10ab0:	01002034 	movhi	r4,128
   10ab4:	213fffc4 	addi	r4,r4,-1
   10ab8:	1908703a 	and	r4,r3,r4
   10abc:	003fa106 	br	10944 <__alt_data_end+0xffff0944>
   10ac0:	10bfffc4 	addi	r2,r2,-1
   10ac4:	103fb926 	beq	r2,zero,109ac <__alt_data_end+0xffff09ac>
   10ac8:	00c03fc4 	movi	r3,255
   10acc:	80ffaf1e 	bne	r16,r3,1098c <__alt_data_end+0xffff098c>
   10ad0:	003f8e06 	br	1090c <__alt_data_end+0xffff090c>
   10ad4:	283f8d26 	beq	r5,zero,1090c <__alt_data_end+0xffff090c>
   10ad8:	18ffffc4 	addi	r3,r3,-1
   10adc:	183fe526 	beq	r3,zero,10a74 <__alt_data_end+0xffff0a74>
   10ae0:	01803fc4 	movi	r6,255
   10ae4:	81bfdb1e 	bne	r16,r6,10a54 <__alt_data_end+0xffff0a54>
   10ae8:	003f8806 	br	1090c <__alt_data_end+0xffff090c>
   10aec:	1000201e 	bne	r2,zero,10b70 <__addsf3+0x2c0>
   10af0:	80800044 	addi	r2,r16,1
   10af4:	10803fcc 	andi	r2,r2,255
   10af8:	01800044 	movi	r6,1
   10afc:	3080450e 	bge	r6,r2,10c14 <__addsf3+0x364>
   10b00:	2165c83a 	sub	r18,r4,r5
   10b04:	90c1002c 	andhi	r3,r18,1024
   10b08:	18002b26 	beq	r3,zero,10bb8 <__addsf3+0x308>
   10b0c:	2925c83a 	sub	r18,r5,r4
   10b10:	3823883a 	mov	r17,r7
   10b14:	003fab06 	br	109c4 <__alt_data_end+0xffff09c4>
   10b18:	8805883a 	mov	r2,r17
   10b1c:	043fffc4 	movi	r16,-1
   10b20:	0009883a 	mov	r4,zero
   10b24:	003f8706 	br	10944 <__alt_data_end+0xffff0944>
   10b28:	013f0034 	movhi	r4,64512
   10b2c:	213fffc4 	addi	r4,r4,-1
   10b30:	80a1c83a 	sub	r16,r16,r2
   10b34:	9108703a 	and	r4,r18,r4
   10b38:	003f7406 	br	1090c <__alt_data_end+0xffff090c>
   10b3c:	1800411e 	bne	r3,zero,10c44 <__addsf3+0x394>
   10b40:	80c00044 	addi	r3,r16,1
   10b44:	19c03fcc 	andi	r7,r3,255
   10b48:	01800044 	movi	r6,1
   10b4c:	31c0260e 	bge	r6,r7,10be8 <__addsf3+0x338>
   10b50:	01803fc4 	movi	r6,255
   10b54:	19802126 	beq	r3,r6,10bdc <__addsf3+0x32c>
   10b58:	2149883a 	add	r4,r4,r5
   10b5c:	2008d07a 	srli	r4,r4,1
   10b60:	1821883a 	mov	r16,r3
   10b64:	003f6906 	br	1090c <__alt_data_end+0xffff090c>
   10b68:	01400044 	movi	r5,1
   10b6c:	003f8f06 	br	109ac <__alt_data_end+0xffff09ac>
   10b70:	8000151e 	bne	r16,zero,10bc8 <__addsf3+0x318>
   10b74:	20002f26 	beq	r4,zero,10c34 <__addsf3+0x384>
   10b78:	0084303a 	nor	r2,zero,r2
   10b7c:	10000a26 	beq	r2,zero,10ba8 <__addsf3+0x2f8>
   10b80:	00c03fc4 	movi	r3,255
   10b84:	30c02b26 	beq	r6,r3,10c34 <__addsf3+0x384>
   10b88:	00c006c4 	movi	r3,27
   10b8c:	18806d16 	blt	r3,r2,10d44 <__addsf3+0x494>
   10b90:	00c00804 	movi	r3,32
   10b94:	1887c83a 	sub	r3,r3,r2
   10b98:	20c6983a 	sll	r3,r4,r3
   10b9c:	2084d83a 	srl	r2,r4,r2
   10ba0:	1808c03a 	cmpne	r4,r3,zero
   10ba4:	1108b03a 	or	r4,r2,r4
   10ba8:	2909c83a 	sub	r4,r5,r4
   10bac:	3021883a 	mov	r16,r6
   10bb0:	3823883a 	mov	r17,r7
   10bb4:	003f7e06 	br	109b0 <__alt_data_end+0xffff09b0>
   10bb8:	903f821e 	bne	r18,zero,109c4 <__alt_data_end+0xffff09c4>
   10bbc:	0005883a 	mov	r2,zero
   10bc0:	0021883a 	mov	r16,zero
   10bc4:	003fba06 	br	10ab0 <__alt_data_end+0xffff0ab0>
   10bc8:	00c03fc4 	movi	r3,255
   10bcc:	30c01926 	beq	r6,r3,10c34 <__addsf3+0x384>
   10bd0:	0085c83a 	sub	r2,zero,r2
   10bd4:	21010034 	orhi	r4,r4,1024
   10bd8:	003feb06 	br	10b88 <__alt_data_end+0xffff0b88>
   10bdc:	043fffc4 	movi	r16,-1
   10be0:	0009883a 	mov	r4,zero
   10be4:	003f5706 	br	10944 <__alt_data_end+0xffff0944>
   10be8:	80004a1e 	bne	r16,zero,10d14 <__addsf3+0x464>
   10bec:	20005926 	beq	r4,zero,10d54 <__addsf3+0x4a4>
   10bf0:	283f4626 	beq	r5,zero,1090c <__alt_data_end+0xffff090c>
   10bf4:	2149883a 	add	r4,r4,r5
   10bf8:	2081002c 	andhi	r2,r4,1024
   10bfc:	103f8226 	beq	r2,zero,10a08 <__alt_data_end+0xffff0a08>
   10c00:	00bf0034 	movhi	r2,64512
   10c04:	10bfffc4 	addi	r2,r2,-1
   10c08:	3021883a 	mov	r16,r6
   10c0c:	2088703a 	and	r4,r4,r2
   10c10:	003f3e06 	br	1090c <__alt_data_end+0xffff090c>
   10c14:	8000121e 	bne	r16,zero,10c60 <__addsf3+0x3b0>
   10c18:	2000261e 	bne	r4,zero,10cb4 <__addsf3+0x404>
   10c1c:	283fa226 	beq	r5,zero,10aa8 <__alt_data_end+0xffff0aa8>
   10c20:	2809883a 	mov	r4,r5
   10c24:	3823883a 	mov	r17,r7
   10c28:	003f3806 	br	1090c <__alt_data_end+0xffff090c>
   10c2c:	01400044 	movi	r5,1
   10c30:	003f9006 	br	10a74 <__alt_data_end+0xffff0a74>
   10c34:	2809883a 	mov	r4,r5
   10c38:	3021883a 	mov	r16,r6
   10c3c:	3823883a 	mov	r17,r7
   10c40:	003f3206 	br	1090c <__alt_data_end+0xffff090c>
   10c44:	80000c1e 	bne	r16,zero,10c78 <__addsf3+0x3c8>
   10c48:	20002f26 	beq	r4,zero,10d08 <__addsf3+0x458>
   10c4c:	00c6303a 	nor	r3,zero,r3
   10c50:	18002b1e 	bne	r3,zero,10d00 <__addsf3+0x450>
   10c54:	2149883a 	add	r4,r4,r5
   10c58:	3021883a 	mov	r16,r6
   10c5c:	003f8606 	br	10a78 <__alt_data_end+0xffff0a78>
   10c60:	20001b1e 	bne	r4,zero,10cd0 <__addsf3+0x420>
   10c64:	28003926 	beq	r5,zero,10d4c <__addsf3+0x49c>
   10c68:	2809883a 	mov	r4,r5
   10c6c:	3823883a 	mov	r17,r7
   10c70:	04003fc4 	movi	r16,255
   10c74:	003f2506 	br	1090c <__alt_data_end+0xffff090c>
   10c78:	01c03fc4 	movi	r7,255
   10c7c:	31c02226 	beq	r6,r7,10d08 <__addsf3+0x458>
   10c80:	00c7c83a 	sub	r3,zero,r3
   10c84:	21010034 	orhi	r4,r4,1024
   10c88:	01c006c4 	movi	r7,27
   10c8c:	38c03616 	blt	r7,r3,10d68 <__addsf3+0x4b8>
   10c90:	01c00804 	movi	r7,32
   10c94:	38cfc83a 	sub	r7,r7,r3
   10c98:	21ce983a 	sll	r7,r4,r7
   10c9c:	20c6d83a 	srl	r3,r4,r3
   10ca0:	3808c03a 	cmpne	r4,r7,zero
   10ca4:	1906b03a 	or	r3,r3,r4
   10ca8:	1949883a 	add	r4,r3,r5
   10cac:	3021883a 	mov	r16,r6
   10cb0:	003f7106 	br	10a78 <__alt_data_end+0xffff0a78>
   10cb4:	283f1526 	beq	r5,zero,1090c <__alt_data_end+0xffff090c>
   10cb8:	2145c83a 	sub	r2,r4,r5
   10cbc:	10c1002c 	andhi	r3,r2,1024
   10cc0:	183f4f26 	beq	r3,zero,10a00 <__alt_data_end+0xffff0a00>
   10cc4:	2909c83a 	sub	r4,r5,r4
   10cc8:	3823883a 	mov	r17,r7
   10ccc:	003f0f06 	br	1090c <__alt_data_end+0xffff090c>
   10cd0:	28001a26 	beq	r5,zero,10d3c <__addsf3+0x48c>
   10cd4:	2008d0fa 	srli	r4,r4,3
   10cd8:	2080102c 	andhi	r2,r4,64
   10cdc:	10000526 	beq	r2,zero,10cf4 <__addsf3+0x444>
   10ce0:	280ad0fa 	srli	r5,r5,3
   10ce4:	2880102c 	andhi	r2,r5,64
   10ce8:	1000021e 	bne	r2,zero,10cf4 <__addsf3+0x444>
   10cec:	2809883a 	mov	r4,r5
   10cf0:	3823883a 	mov	r17,r7
   10cf4:	200890fa 	slli	r4,r4,3
   10cf8:	04003fc4 	movi	r16,255
   10cfc:	003f0306 	br	1090c <__alt_data_end+0xffff090c>
   10d00:	01c03fc4 	movi	r7,255
   10d04:	31ffe01e 	bne	r6,r7,10c88 <__alt_data_end+0xffff0c88>
   10d08:	2809883a 	mov	r4,r5
   10d0c:	3021883a 	mov	r16,r6
   10d10:	003efe06 	br	1090c <__alt_data_end+0xffff090c>
   10d14:	20001126 	beq	r4,zero,10d5c <__addsf3+0x4ac>
   10d18:	28000826 	beq	r5,zero,10d3c <__addsf3+0x48c>
   10d1c:	2008d0fa 	srli	r4,r4,3
   10d20:	2080102c 	andhi	r2,r4,64
   10d24:	103ff326 	beq	r2,zero,10cf4 <__alt_data_end+0xffff0cf4>
   10d28:	280ad0fa 	srli	r5,r5,3
   10d2c:	2880102c 	andhi	r2,r5,64
   10d30:	103ff01e 	bne	r2,zero,10cf4 <__alt_data_end+0xffff0cf4>
   10d34:	2809883a 	mov	r4,r5
   10d38:	003fee06 	br	10cf4 <__alt_data_end+0xffff0cf4>
   10d3c:	04003fc4 	movi	r16,255
   10d40:	003ef206 	br	1090c <__alt_data_end+0xffff090c>
   10d44:	01000044 	movi	r4,1
   10d48:	003f9706 	br	10ba8 <__alt_data_end+0xffff0ba8>
   10d4c:	0005883a 	mov	r2,zero
   10d50:	003f3406 	br	10a24 <__alt_data_end+0xffff0a24>
   10d54:	2809883a 	mov	r4,r5
   10d58:	003eec06 	br	1090c <__alt_data_end+0xffff090c>
   10d5c:	2809883a 	mov	r4,r5
   10d60:	04003fc4 	movi	r16,255
   10d64:	003ee906 	br	1090c <__alt_data_end+0xffff090c>
   10d68:	00c00044 	movi	r3,1
   10d6c:	003fce06 	br	10ca8 <__alt_data_end+0xffff0ca8>
   10d70:	0005883a 	mov	r2,zero
   10d74:	003f4e06 	br	10ab0 <__alt_data_end+0xffff0ab0>

00010d78 <__divsf3>:
   10d78:	defff504 	addi	sp,sp,-44
   10d7c:	200cd5fa 	srli	r6,r4,23
   10d80:	dcc00415 	stw	r19,16(sp)
   10d84:	2026d7fa 	srli	r19,r4,31
   10d88:	00c02034 	movhi	r3,128
   10d8c:	dd800715 	stw	r22,28(sp)
   10d90:	dd000515 	stw	r20,20(sp)
   10d94:	dc800315 	stw	r18,12(sp)
   10d98:	18ffffc4 	addi	r3,r3,-1
   10d9c:	dfc00a15 	stw	ra,40(sp)
   10da0:	df000915 	stw	fp,36(sp)
   10da4:	ddc00815 	stw	r23,32(sp)
   10da8:	dd400615 	stw	r21,24(sp)
   10dac:	dc400215 	stw	r17,8(sp)
   10db0:	dc000115 	stw	r16,4(sp)
   10db4:	35003fcc 	andi	r20,r6,255
   10db8:	1924703a 	and	r18,r3,r4
   10dbc:	9d803fcc 	andi	r22,r19,255
   10dc0:	a0005226 	beq	r20,zero,10f0c <__divsf3+0x194>
   10dc4:	00803fc4 	movi	r2,255
   10dc8:	a0802e26 	beq	r20,r2,10e84 <__divsf3+0x10c>
   10dcc:	91002034 	orhi	r4,r18,128
   10dd0:	202490fa 	slli	r18,r4,3
   10dd4:	a53fe044 	addi	r20,r20,-127
   10dd8:	0021883a 	mov	r16,zero
   10ddc:	002f883a 	mov	r23,zero
   10de0:	280cd5fa 	srli	r6,r5,23
   10de4:	282ad7fa 	srli	r21,r5,31
   10de8:	00c02034 	movhi	r3,128
   10dec:	18ffffc4 	addi	r3,r3,-1
   10df0:	31803fcc 	andi	r6,r6,255
   10df4:	1962703a 	and	r17,r3,r5
   10df8:	af003fcc 	andi	fp,r21,255
   10dfc:	30004a26 	beq	r6,zero,10f28 <__divsf3+0x1b0>
   10e00:	00803fc4 	movi	r2,255
   10e04:	30804526 	beq	r6,r2,10f1c <__divsf3+0x1a4>
   10e08:	89402034 	orhi	r5,r17,128
   10e0c:	282290fa 	slli	r17,r5,3
   10e10:	31bfe044 	addi	r6,r6,-127
   10e14:	000b883a 	mov	r5,zero
   10e18:	2c20b03a 	or	r16,r5,r16
   10e1c:	802090ba 	slli	r16,r16,2
   10e20:	00800074 	movhi	r2,1
   10e24:	10839104 	addi	r2,r2,3652
   10e28:	80a1883a 	add	r16,r16,r2
   10e2c:	81000017 	ldw	r4,0(r16)
   10e30:	9d46f03a 	xor	r3,r19,r21
   10e34:	180f883a 	mov	r7,r3
   10e38:	18803fcc 	andi	r2,r3,255
   10e3c:	a18dc83a 	sub	r6,r20,r6
   10e40:	2000683a 	jmp	r4
   10e44:	00011028 	cmpgeui	zero,zero,1088
   10e48:	00010eac 	andhi	zero,zero,1082
   10e4c:	0001101c 	xori	zero,zero,1088
   10e50:	00010e98 	cmpnei	zero,zero,1082
   10e54:	0001101c 	xori	zero,zero,1088
   10e58:	00010ff4 	movhi	zero,1087
   10e5c:	0001101c 	xori	zero,zero,1088
   10e60:	00010e98 	cmpnei	zero,zero,1082
   10e64:	00010eac 	andhi	zero,zero,1082
   10e68:	00010eac 	andhi	zero,zero,1082
   10e6c:	00010ff4 	movhi	zero,1087
   10e70:	00010e98 	cmpnei	zero,zero,1082
   10e74:	00011108 	cmpgei	zero,zero,1092
   10e78:	00011108 	cmpgei	zero,zero,1092
   10e7c:	00011108 	cmpgei	zero,zero,1092
   10e80:	000110bc 	xorhi	zero,zero,1090
   10e84:	9000581e 	bne	r18,zero,10fe8 <__divsf3+0x270>
   10e88:	04000204 	movi	r16,8
   10e8c:	05c00084 	movi	r23,2
   10e90:	003fd306 	br	10de0 <__alt_data_end+0xffff0de0>
   10e94:	0023883a 	mov	r17,zero
   10e98:	e02d883a 	mov	r22,fp
   10e9c:	282f883a 	mov	r23,r5
   10ea0:	00800084 	movi	r2,2
   10ea4:	b8808f1e 	bne	r23,r2,110e4 <__divsf3+0x36c>
   10ea8:	b005883a 	mov	r2,r22
   10eac:	11c0004c 	andi	r7,r2,1
   10eb0:	013fffc4 	movi	r4,-1
   10eb4:	000d883a 	mov	r6,zero
   10eb8:	21003fcc 	andi	r4,r4,255
   10ebc:	200895fa 	slli	r4,r4,23
   10ec0:	38803fcc 	andi	r2,r7,255
   10ec4:	00c02034 	movhi	r3,128
   10ec8:	100497fa 	slli	r2,r2,31
   10ecc:	18ffffc4 	addi	r3,r3,-1
   10ed0:	30c6703a 	and	r3,r6,r3
   10ed4:	1906b03a 	or	r3,r3,r4
   10ed8:	1884b03a 	or	r2,r3,r2
   10edc:	dfc00a17 	ldw	ra,40(sp)
   10ee0:	df000917 	ldw	fp,36(sp)
   10ee4:	ddc00817 	ldw	r23,32(sp)
   10ee8:	dd800717 	ldw	r22,28(sp)
   10eec:	dd400617 	ldw	r21,24(sp)
   10ef0:	dd000517 	ldw	r20,20(sp)
   10ef4:	dcc00417 	ldw	r19,16(sp)
   10ef8:	dc800317 	ldw	r18,12(sp)
   10efc:	dc400217 	ldw	r17,8(sp)
   10f00:	dc000117 	ldw	r16,4(sp)
   10f04:	dec00b04 	addi	sp,sp,44
   10f08:	f800283a 	ret
   10f0c:	90002b1e 	bne	r18,zero,10fbc <__divsf3+0x244>
   10f10:	04000104 	movi	r16,4
   10f14:	05c00044 	movi	r23,1
   10f18:	003fb106 	br	10de0 <__alt_data_end+0xffff0de0>
   10f1c:	8800251e 	bne	r17,zero,10fb4 <__divsf3+0x23c>
   10f20:	01400084 	movi	r5,2
   10f24:	00000206 	br	10f30 <__divsf3+0x1b8>
   10f28:	88001a1e 	bne	r17,zero,10f94 <__divsf3+0x21c>
   10f2c:	01400044 	movi	r5,1
   10f30:	8160b03a 	or	r16,r16,r5
   10f34:	802090ba 	slli	r16,r16,2
   10f38:	00c00074 	movhi	r3,1
   10f3c:	18c3d504 	addi	r3,r3,3924
   10f40:	80e1883a 	add	r16,r16,r3
   10f44:	80c00017 	ldw	r3,0(r16)
   10f48:	9d44f03a 	xor	r2,r19,r21
   10f4c:	a18dc83a 	sub	r6,r20,r6
   10f50:	1800683a 	jmp	r3
   10f54:	00010eac 	andhi	zero,zero,1082
   10f58:	00010eac 	andhi	zero,zero,1082
   10f5c:	000110f8 	rdprs	zero,zero,1091
   10f60:	00010e94 	movui	zero,1082
   10f64:	000110f8 	rdprs	zero,zero,1091
   10f68:	00010ff4 	movhi	zero,1087
   10f6c:	000110f8 	rdprs	zero,zero,1091
   10f70:	00010e94 	movui	zero,1082
   10f74:	00010eac 	andhi	zero,zero,1082
   10f78:	00010eac 	andhi	zero,zero,1082
   10f7c:	00010ff4 	movhi	zero,1087
   10f80:	00010e94 	movui	zero,1082
   10f84:	00011108 	cmpgei	zero,zero,1092
   10f88:	00011108 	cmpgei	zero,zero,1092
   10f8c:	00011108 	cmpgei	zero,zero,1092
   10f90:	00011120 	cmpeqi	zero,zero,1092
   10f94:	8809883a 	mov	r4,r17
   10f98:	00129c40 	call	129c4 <__clzsi2>
   10f9c:	10fffec4 	addi	r3,r2,-5
   10fa0:	10801d84 	addi	r2,r2,118
   10fa4:	88e2983a 	sll	r17,r17,r3
   10fa8:	008dc83a 	sub	r6,zero,r2
   10fac:	000b883a 	mov	r5,zero
   10fb0:	003f9906 	br	10e18 <__alt_data_end+0xffff0e18>
   10fb4:	014000c4 	movi	r5,3
   10fb8:	003f9706 	br	10e18 <__alt_data_end+0xffff0e18>
   10fbc:	9009883a 	mov	r4,r18
   10fc0:	d9400015 	stw	r5,0(sp)
   10fc4:	00129c40 	call	129c4 <__clzsi2>
   10fc8:	10fffec4 	addi	r3,r2,-5
   10fcc:	11801d84 	addi	r6,r2,118
   10fd0:	90e4983a 	sll	r18,r18,r3
   10fd4:	01a9c83a 	sub	r20,zero,r6
   10fd8:	0021883a 	mov	r16,zero
   10fdc:	002f883a 	mov	r23,zero
   10fe0:	d9400017 	ldw	r5,0(sp)
   10fe4:	003f7e06 	br	10de0 <__alt_data_end+0xffff0de0>
   10fe8:	04000304 	movi	r16,12
   10fec:	05c000c4 	movi	r23,3
   10ff0:	003f7b06 	br	10de0 <__alt_data_end+0xffff0de0>
   10ff4:	01802034 	movhi	r6,128
   10ff8:	000f883a 	mov	r7,zero
   10ffc:	31bfffc4 	addi	r6,r6,-1
   11000:	013fffc4 	movi	r4,-1
   11004:	003fac06 	br	10eb8 <__alt_data_end+0xffff0eb8>
   11008:	01400044 	movi	r5,1
   1100c:	2909c83a 	sub	r4,r5,r4
   11010:	00c006c4 	movi	r3,27
   11014:	19004b0e 	bge	r3,r4,11144 <__divsf3+0x3cc>
   11018:	114e703a 	and	r7,r2,r5
   1101c:	0009883a 	mov	r4,zero
   11020:	000d883a 	mov	r6,zero
   11024:	003fa406 	br	10eb8 <__alt_data_end+0xffff0eb8>
   11028:	9006917a 	slli	r3,r18,5
   1102c:	8822917a 	slli	r17,r17,5
   11030:	1c40372e 	bgeu	r3,r17,11110 <__divsf3+0x398>
   11034:	31bfffc4 	addi	r6,r6,-1
   11038:	010006c4 	movi	r4,27
   1103c:	000b883a 	mov	r5,zero
   11040:	180f883a 	mov	r7,r3
   11044:	294b883a 	add	r5,r5,r5
   11048:	18c7883a 	add	r3,r3,r3
   1104c:	38000116 	blt	r7,zero,11054 <__divsf3+0x2dc>
   11050:	1c400236 	bltu	r3,r17,1105c <__divsf3+0x2e4>
   11054:	1c47c83a 	sub	r3,r3,r17
   11058:	29400054 	ori	r5,r5,1
   1105c:	213fffc4 	addi	r4,r4,-1
   11060:	203ff71e 	bne	r4,zero,11040 <__alt_data_end+0xffff1040>
   11064:	1806c03a 	cmpne	r3,r3,zero
   11068:	1962b03a 	or	r17,r3,r5
   1106c:	31001fc4 	addi	r4,r6,127
   11070:	013fe50e 	bge	zero,r4,11008 <__alt_data_end+0xffff1008>
   11074:	88c001cc 	andi	r3,r17,7
   11078:	18000426 	beq	r3,zero,1108c <__divsf3+0x314>
   1107c:	88c003cc 	andi	r3,r17,15
   11080:	01400104 	movi	r5,4
   11084:	19400126 	beq	r3,r5,1108c <__divsf3+0x314>
   11088:	8963883a 	add	r17,r17,r5
   1108c:	88c2002c 	andhi	r3,r17,2048
   11090:	18000426 	beq	r3,zero,110a4 <__divsf3+0x32c>
   11094:	00fe0034 	movhi	r3,63488
   11098:	18ffffc4 	addi	r3,r3,-1
   1109c:	31002004 	addi	r4,r6,128
   110a0:	88e2703a 	and	r17,r17,r3
   110a4:	00c03f84 	movi	r3,254
   110a8:	193f8016 	blt	r3,r4,10eac <__alt_data_end+0xffff0eac>
   110ac:	880c91ba 	slli	r6,r17,6
   110b0:	11c0004c 	andi	r7,r2,1
   110b4:	300cd27a 	srli	r6,r6,9
   110b8:	003f7f06 	br	10eb8 <__alt_data_end+0xffff0eb8>
   110bc:	9080102c 	andhi	r2,r18,64
   110c0:	10000226 	beq	r2,zero,110cc <__divsf3+0x354>
   110c4:	8880102c 	andhi	r2,r17,64
   110c8:	10001826 	beq	r2,zero,1112c <__divsf3+0x3b4>
   110cc:	00802034 	movhi	r2,128
   110d0:	91801034 	orhi	r6,r18,64
   110d4:	10bfffc4 	addi	r2,r2,-1
   110d8:	980f883a 	mov	r7,r19
   110dc:	308c703a 	and	r6,r6,r2
   110e0:	003fc706 	br	11000 <__alt_data_end+0xffff1000>
   110e4:	008000c4 	movi	r2,3
   110e8:	b8802d26 	beq	r23,r2,111a0 <__divsf3+0x428>
   110ec:	00c00044 	movi	r3,1
   110f0:	b005883a 	mov	r2,r22
   110f4:	b8ffdd1e 	bne	r23,r3,1106c <__alt_data_end+0xffff106c>
   110f8:	11c0004c 	andi	r7,r2,1
   110fc:	0009883a 	mov	r4,zero
   11100:	000d883a 	mov	r6,zero
   11104:	003f6c06 	br	10eb8 <__alt_data_end+0xffff0eb8>
   11108:	9023883a 	mov	r17,r18
   1110c:	003f6406 	br	10ea0 <__alt_data_end+0xffff0ea0>
   11110:	1c47c83a 	sub	r3,r3,r17
   11114:	01000684 	movi	r4,26
   11118:	01400044 	movi	r5,1
   1111c:	003fc806 	br	11040 <__alt_data_end+0xffff1040>
   11120:	9080102c 	andhi	r2,r18,64
   11124:	103fe926 	beq	r2,zero,110cc <__alt_data_end+0xffff10cc>
   11128:	0023883a 	mov	r17,zero
   1112c:	00802034 	movhi	r2,128
   11130:	89801034 	orhi	r6,r17,64
   11134:	10bfffc4 	addi	r2,r2,-1
   11138:	a80f883a 	mov	r7,r21
   1113c:	308c703a 	and	r6,r6,r2
   11140:	003faf06 	br	11000 <__alt_data_end+0xffff1000>
   11144:	01c00804 	movi	r7,32
   11148:	390fc83a 	sub	r7,r7,r4
   1114c:	89ce983a 	sll	r7,r17,r7
   11150:	890ad83a 	srl	r5,r17,r4
   11154:	380ec03a 	cmpne	r7,r7,zero
   11158:	29cab03a 	or	r5,r5,r7
   1115c:	28c001cc 	andi	r3,r5,7
   11160:	18000426 	beq	r3,zero,11174 <__divsf3+0x3fc>
   11164:	28c003cc 	andi	r3,r5,15
   11168:	01000104 	movi	r4,4
   1116c:	19000126 	beq	r3,r4,11174 <__divsf3+0x3fc>
   11170:	290b883a 	add	r5,r5,r4
   11174:	28c1002c 	andhi	r3,r5,1024
   11178:	18000426 	beq	r3,zero,1118c <__divsf3+0x414>
   1117c:	11c0004c 	andi	r7,r2,1
   11180:	01000044 	movi	r4,1
   11184:	000d883a 	mov	r6,zero
   11188:	003f4b06 	br	10eb8 <__alt_data_end+0xffff0eb8>
   1118c:	280a91ba 	slli	r5,r5,6
   11190:	11c0004c 	andi	r7,r2,1
   11194:	0009883a 	mov	r4,zero
   11198:	280cd27a 	srli	r6,r5,9
   1119c:	003f4606 	br	10eb8 <__alt_data_end+0xffff0eb8>
   111a0:	00802034 	movhi	r2,128
   111a4:	89801034 	orhi	r6,r17,64
   111a8:	10bfffc4 	addi	r2,r2,-1
   111ac:	b00f883a 	mov	r7,r22
   111b0:	308c703a 	and	r6,r6,r2
   111b4:	003f9206 	br	11000 <__alt_data_end+0xffff1000>

000111b8 <__mulsf3>:
   111b8:	defff504 	addi	sp,sp,-44
   111bc:	dc000115 	stw	r16,4(sp)
   111c0:	2020d5fa 	srli	r16,r4,23
   111c4:	dd400615 	stw	r21,24(sp)
   111c8:	202ad7fa 	srli	r21,r4,31
   111cc:	dc800315 	stw	r18,12(sp)
   111d0:	04802034 	movhi	r18,128
   111d4:	df000915 	stw	fp,36(sp)
   111d8:	dd000515 	stw	r20,20(sp)
   111dc:	94bfffc4 	addi	r18,r18,-1
   111e0:	dfc00a15 	stw	ra,40(sp)
   111e4:	ddc00815 	stw	r23,32(sp)
   111e8:	dd800715 	stw	r22,28(sp)
   111ec:	dcc00415 	stw	r19,16(sp)
   111f0:	dc400215 	stw	r17,8(sp)
   111f4:	84003fcc 	andi	r16,r16,255
   111f8:	9124703a 	and	r18,r18,r4
   111fc:	a829883a 	mov	r20,r21
   11200:	af003fcc 	andi	fp,r21,255
   11204:	80005426 	beq	r16,zero,11358 <__mulsf3+0x1a0>
   11208:	00803fc4 	movi	r2,255
   1120c:	80802f26 	beq	r16,r2,112cc <__mulsf3+0x114>
   11210:	91002034 	orhi	r4,r18,128
   11214:	202490fa 	slli	r18,r4,3
   11218:	843fe044 	addi	r16,r16,-127
   1121c:	0023883a 	mov	r17,zero
   11220:	002f883a 	mov	r23,zero
   11224:	2804d5fa 	srli	r2,r5,23
   11228:	282cd7fa 	srli	r22,r5,31
   1122c:	01002034 	movhi	r4,128
   11230:	213fffc4 	addi	r4,r4,-1
   11234:	10803fcc 	andi	r2,r2,255
   11238:	2166703a 	and	r19,r4,r5
   1123c:	b1803fcc 	andi	r6,r22,255
   11240:	10004c26 	beq	r2,zero,11374 <__mulsf3+0x1bc>
   11244:	00c03fc4 	movi	r3,255
   11248:	10c04726 	beq	r2,r3,11368 <__mulsf3+0x1b0>
   1124c:	99002034 	orhi	r4,r19,128
   11250:	202690fa 	slli	r19,r4,3
   11254:	10bfe044 	addi	r2,r2,-127
   11258:	0007883a 	mov	r3,zero
   1125c:	80a1883a 	add	r16,r16,r2
   11260:	010003c4 	movi	r4,15
   11264:	1c44b03a 	or	r2,r3,r17
   11268:	b56af03a 	xor	r21,r22,r21
   1126c:	81c00044 	addi	r7,r16,1
   11270:	20806b36 	bltu	r4,r2,11420 <__mulsf3+0x268>
   11274:	100490ba 	slli	r2,r2,2
   11278:	01000074 	movhi	r4,1
   1127c:	2104a304 	addi	r4,r4,4748
   11280:	1105883a 	add	r2,r2,r4
   11284:	10800017 	ldw	r2,0(r2)
   11288:	1000683a 	jmp	r2
   1128c:	00011420 	cmpeqi	zero,zero,1104
   11290:	000112e0 	cmpeqi	zero,zero,1099
   11294:	000112e0 	cmpeqi	zero,zero,1099
   11298:	000112dc 	xori	zero,zero,1099
   1129c:	00011404 	movi	zero,1104
   112a0:	00011404 	movi	zero,1104
   112a4:	000113f0 	cmpltui	zero,zero,1103
   112a8:	000112dc 	xori	zero,zero,1099
   112ac:	00011404 	movi	zero,1104
   112b0:	000113f0 	cmpltui	zero,zero,1103
   112b4:	00011404 	movi	zero,1104
   112b8:	000112dc 	xori	zero,zero,1099
   112bc:	00011410 	cmplti	zero,zero,1104
   112c0:	00011410 	cmplti	zero,zero,1104
   112c4:	00011410 	cmplti	zero,zero,1104
   112c8:	00011520 	cmpeqi	zero,zero,1108
   112cc:	90003b1e 	bne	r18,zero,113bc <__mulsf3+0x204>
   112d0:	04400204 	movi	r17,8
   112d4:	05c00084 	movi	r23,2
   112d8:	003fd206 	br	11224 <__alt_data_end+0xffff1224>
   112dc:	302b883a 	mov	r21,r6
   112e0:	00800084 	movi	r2,2
   112e4:	18802626 	beq	r3,r2,11380 <__mulsf3+0x1c8>
   112e8:	008000c4 	movi	r2,3
   112ec:	1880b826 	beq	r3,r2,115d0 <__mulsf3+0x418>
   112f0:	00800044 	movi	r2,1
   112f4:	1880af1e 	bne	r3,r2,115b4 <__mulsf3+0x3fc>
   112f8:	a829883a 	mov	r20,r21
   112fc:	0007883a 	mov	r3,zero
   11300:	0009883a 	mov	r4,zero
   11304:	18803fcc 	andi	r2,r3,255
   11308:	100695fa 	slli	r3,r2,23
   1130c:	a0803fcc 	andi	r2,r20,255
   11310:	100a97fa 	slli	r5,r2,31
   11314:	00802034 	movhi	r2,128
   11318:	10bfffc4 	addi	r2,r2,-1
   1131c:	2084703a 	and	r2,r4,r2
   11320:	10c4b03a 	or	r2,r2,r3
   11324:	1144b03a 	or	r2,r2,r5
   11328:	dfc00a17 	ldw	ra,40(sp)
   1132c:	df000917 	ldw	fp,36(sp)
   11330:	ddc00817 	ldw	r23,32(sp)
   11334:	dd800717 	ldw	r22,28(sp)
   11338:	dd400617 	ldw	r21,24(sp)
   1133c:	dd000517 	ldw	r20,20(sp)
   11340:	dcc00417 	ldw	r19,16(sp)
   11344:	dc800317 	ldw	r18,12(sp)
   11348:	dc400217 	ldw	r17,8(sp)
   1134c:	dc000117 	ldw	r16,4(sp)
   11350:	dec00b04 	addi	sp,sp,44
   11354:	f800283a 	ret
   11358:	90000d1e 	bne	r18,zero,11390 <__mulsf3+0x1d8>
   1135c:	04400104 	movi	r17,4
   11360:	05c00044 	movi	r23,1
   11364:	003faf06 	br	11224 <__alt_data_end+0xffff1224>
   11368:	9806c03a 	cmpne	r3,r19,zero
   1136c:	18c00084 	addi	r3,r3,2
   11370:	003fba06 	br	1125c <__alt_data_end+0xffff125c>
   11374:	9800141e 	bne	r19,zero,113c8 <__mulsf3+0x210>
   11378:	00c00044 	movi	r3,1
   1137c:	003fb706 	br	1125c <__alt_data_end+0xffff125c>
   11380:	a829883a 	mov	r20,r21
   11384:	00ffffc4 	movi	r3,-1
   11388:	0009883a 	mov	r4,zero
   1138c:	003fdd06 	br	11304 <__alt_data_end+0xffff1304>
   11390:	9009883a 	mov	r4,r18
   11394:	d9400015 	stw	r5,0(sp)
   11398:	00129c40 	call	129c4 <__clzsi2>
   1139c:	10fffec4 	addi	r3,r2,-5
   113a0:	10801d84 	addi	r2,r2,118
   113a4:	90e4983a 	sll	r18,r18,r3
   113a8:	00a1c83a 	sub	r16,zero,r2
   113ac:	0023883a 	mov	r17,zero
   113b0:	002f883a 	mov	r23,zero
   113b4:	d9400017 	ldw	r5,0(sp)
   113b8:	003f9a06 	br	11224 <__alt_data_end+0xffff1224>
   113bc:	04400304 	movi	r17,12
   113c0:	05c000c4 	movi	r23,3
   113c4:	003f9706 	br	11224 <__alt_data_end+0xffff1224>
   113c8:	9809883a 	mov	r4,r19
   113cc:	d9800015 	stw	r6,0(sp)
   113d0:	00129c40 	call	129c4 <__clzsi2>
   113d4:	10fffec4 	addi	r3,r2,-5
   113d8:	10801d84 	addi	r2,r2,118
   113dc:	98e6983a 	sll	r19,r19,r3
   113e0:	0085c83a 	sub	r2,zero,r2
   113e4:	0007883a 	mov	r3,zero
   113e8:	d9800017 	ldw	r6,0(sp)
   113ec:	003f9b06 	br	1125c <__alt_data_end+0xffff125c>
   113f0:	01002034 	movhi	r4,128
   113f4:	0029883a 	mov	r20,zero
   113f8:	213fffc4 	addi	r4,r4,-1
   113fc:	00ffffc4 	movi	r3,-1
   11400:	003fc006 	br	11304 <__alt_data_end+0xffff1304>
   11404:	9027883a 	mov	r19,r18
   11408:	b807883a 	mov	r3,r23
   1140c:	003fb406 	br	112e0 <__alt_data_end+0xffff12e0>
   11410:	9027883a 	mov	r19,r18
   11414:	e02b883a 	mov	r21,fp
   11418:	b807883a 	mov	r3,r23
   1141c:	003fb006 	br	112e0 <__alt_data_end+0xffff12e0>
   11420:	9028d43a 	srli	r20,r18,16
   11424:	982cd43a 	srli	r22,r19,16
   11428:	94bfffcc 	andi	r18,r18,65535
   1142c:	9cffffcc 	andi	r19,r19,65535
   11430:	980b883a 	mov	r5,r19
   11434:	9009883a 	mov	r4,r18
   11438:	d9c00015 	stw	r7,0(sp)
   1143c:	0012bdc0 	call	12bdc <__mulsi3>
   11440:	a00b883a 	mov	r5,r20
   11444:	9809883a 	mov	r4,r19
   11448:	1023883a 	mov	r17,r2
   1144c:	0012bdc0 	call	12bdc <__mulsi3>
   11450:	a009883a 	mov	r4,r20
   11454:	b00b883a 	mov	r5,r22
   11458:	1027883a 	mov	r19,r2
   1145c:	0012bdc0 	call	12bdc <__mulsi3>
   11460:	b00b883a 	mov	r5,r22
   11464:	9009883a 	mov	r4,r18
   11468:	1029883a 	mov	r20,r2
   1146c:	0012bdc0 	call	12bdc <__mulsi3>
   11470:	8806d43a 	srli	r3,r17,16
   11474:	14c5883a 	add	r2,r2,r19
   11478:	d9c00017 	ldw	r7,0(sp)
   1147c:	1885883a 	add	r2,r3,r2
   11480:	14c0022e 	bgeu	r2,r19,1148c <__mulsf3+0x2d4>
   11484:	00c00074 	movhi	r3,1
   11488:	a0e9883a 	add	r20,r20,r3
   1148c:	1026943a 	slli	r19,r2,16
   11490:	8c7fffcc 	andi	r17,r17,65535
   11494:	1004d43a 	srli	r2,r2,16
   11498:	9c63883a 	add	r17,r19,r17
   1149c:	882691ba 	slli	r19,r17,6
   114a0:	1505883a 	add	r2,r2,r20
   114a4:	8822d6ba 	srli	r17,r17,26
   114a8:	100891ba 	slli	r4,r2,6
   114ac:	9826c03a 	cmpne	r19,r19,zero
   114b0:	9c62b03a 	or	r17,r19,r17
   114b4:	8926b03a 	or	r19,r17,r4
   114b8:	9882002c 	andhi	r2,r19,2048
   114bc:	10000426 	beq	r2,zero,114d0 <__mulsf3+0x318>
   114c0:	9804d07a 	srli	r2,r19,1
   114c4:	9900004c 	andi	r4,r19,1
   114c8:	3821883a 	mov	r16,r7
   114cc:	1126b03a 	or	r19,r2,r4
   114d0:	80c01fc4 	addi	r3,r16,127
   114d4:	00c0210e 	bge	zero,r3,1155c <__mulsf3+0x3a4>
   114d8:	988001cc 	andi	r2,r19,7
   114dc:	10000426 	beq	r2,zero,114f0 <__mulsf3+0x338>
   114e0:	988003cc 	andi	r2,r19,15
   114e4:	01000104 	movi	r4,4
   114e8:	11000126 	beq	r2,r4,114f0 <__mulsf3+0x338>
   114ec:	9927883a 	add	r19,r19,r4
   114f0:	9882002c 	andhi	r2,r19,2048
   114f4:	10000426 	beq	r2,zero,11508 <__mulsf3+0x350>
   114f8:	00be0034 	movhi	r2,63488
   114fc:	10bfffc4 	addi	r2,r2,-1
   11500:	80c02004 	addi	r3,r16,128
   11504:	98a6703a 	and	r19,r19,r2
   11508:	00803f84 	movi	r2,254
   1150c:	10ff9c16 	blt	r2,r3,11380 <__alt_data_end+0xffff1380>
   11510:	980891ba 	slli	r4,r19,6
   11514:	a829883a 	mov	r20,r21
   11518:	2008d27a 	srli	r4,r4,9
   1151c:	003f7906 	br	11304 <__alt_data_end+0xffff1304>
   11520:	9080102c 	andhi	r2,r18,64
   11524:	10000826 	beq	r2,zero,11548 <__mulsf3+0x390>
   11528:	9880102c 	andhi	r2,r19,64
   1152c:	1000061e 	bne	r2,zero,11548 <__mulsf3+0x390>
   11530:	00802034 	movhi	r2,128
   11534:	99001034 	orhi	r4,r19,64
   11538:	10bfffc4 	addi	r2,r2,-1
   1153c:	b029883a 	mov	r20,r22
   11540:	2088703a 	and	r4,r4,r2
   11544:	003fad06 	br	113fc <__alt_data_end+0xffff13fc>
   11548:	00802034 	movhi	r2,128
   1154c:	91001034 	orhi	r4,r18,64
   11550:	10bfffc4 	addi	r2,r2,-1
   11554:	2088703a 	and	r4,r4,r2
   11558:	003fa806 	br	113fc <__alt_data_end+0xffff13fc>
   1155c:	00800044 	movi	r2,1
   11560:	10c7c83a 	sub	r3,r2,r3
   11564:	008006c4 	movi	r2,27
   11568:	10ff6316 	blt	r2,r3,112f8 <__alt_data_end+0xffff12f8>
   1156c:	00800804 	movi	r2,32
   11570:	10c5c83a 	sub	r2,r2,r3
   11574:	9884983a 	sll	r2,r19,r2
   11578:	98c6d83a 	srl	r3,r19,r3
   1157c:	1004c03a 	cmpne	r2,r2,zero
   11580:	1884b03a 	or	r2,r3,r2
   11584:	10c001cc 	andi	r3,r2,7
   11588:	18000426 	beq	r3,zero,1159c <__mulsf3+0x3e4>
   1158c:	10c003cc 	andi	r3,r2,15
   11590:	01000104 	movi	r4,4
   11594:	19000126 	beq	r3,r4,1159c <__mulsf3+0x3e4>
   11598:	1105883a 	add	r2,r2,r4
   1159c:	10c1002c 	andhi	r3,r2,1024
   115a0:	18000626 	beq	r3,zero,115bc <__mulsf3+0x404>
   115a4:	a829883a 	mov	r20,r21
   115a8:	00c00044 	movi	r3,1
   115ac:	0009883a 	mov	r4,zero
   115b0:	003f5406 	br	11304 <__alt_data_end+0xffff1304>
   115b4:	3821883a 	mov	r16,r7
   115b8:	003fc506 	br	114d0 <__alt_data_end+0xffff14d0>
   115bc:	100491ba 	slli	r2,r2,6
   115c0:	a829883a 	mov	r20,r21
   115c4:	0007883a 	mov	r3,zero
   115c8:	1008d27a 	srli	r4,r2,9
   115cc:	003f4d06 	br	11304 <__alt_data_end+0xffff1304>
   115d0:	00802034 	movhi	r2,128
   115d4:	99001034 	orhi	r4,r19,64
   115d8:	10bfffc4 	addi	r2,r2,-1
   115dc:	a829883a 	mov	r20,r21
   115e0:	2088703a 	and	r4,r4,r2
   115e4:	003f8506 	br	113fc <__alt_data_end+0xffff13fc>

000115e8 <__subsf3>:
   115e8:	defffc04 	addi	sp,sp,-16
   115ec:	280cd5fa 	srli	r6,r5,23
   115f0:	dc000015 	stw	r16,0(sp)
   115f4:	01c02034 	movhi	r7,128
   115f8:	2020d5fa 	srli	r16,r4,23
   115fc:	39ffffc4 	addi	r7,r7,-1
   11600:	3906703a 	and	r3,r7,r4
   11604:	dc400115 	stw	r17,4(sp)
   11608:	394e703a 	and	r7,r7,r5
   1160c:	2022d7fa 	srli	r17,r4,31
   11610:	dfc00315 	stw	ra,12(sp)
   11614:	dc800215 	stw	r18,8(sp)
   11618:	31803fcc 	andi	r6,r6,255
   1161c:	01003fc4 	movi	r4,255
   11620:	84003fcc 	andi	r16,r16,255
   11624:	180690fa 	slli	r3,r3,3
   11628:	2804d7fa 	srli	r2,r5,31
   1162c:	380e90fa 	slli	r7,r7,3
   11630:	31006d26 	beq	r6,r4,117e8 <__subsf3+0x200>
   11634:	1080005c 	xori	r2,r2,1
   11638:	8189c83a 	sub	r4,r16,r6
   1163c:	14404f26 	beq	r2,r17,1177c <__subsf3+0x194>
   11640:	0100770e 	bge	zero,r4,11820 <__subsf3+0x238>
   11644:	30001e1e 	bne	r6,zero,116c0 <__subsf3+0xd8>
   11648:	38006a1e 	bne	r7,zero,117f4 <__subsf3+0x20c>
   1164c:	188001cc 	andi	r2,r3,7
   11650:	10000426 	beq	r2,zero,11664 <__subsf3+0x7c>
   11654:	188003cc 	andi	r2,r3,15
   11658:	01000104 	movi	r4,4
   1165c:	11000126 	beq	r2,r4,11664 <__subsf3+0x7c>
   11660:	1907883a 	add	r3,r3,r4
   11664:	1881002c 	andhi	r2,r3,1024
   11668:	10003926 	beq	r2,zero,11750 <__subsf3+0x168>
   1166c:	84000044 	addi	r16,r16,1
   11670:	00803fc4 	movi	r2,255
   11674:	80807526 	beq	r16,r2,1184c <__subsf3+0x264>
   11678:	180691ba 	slli	r3,r3,6
   1167c:	8880004c 	andi	r2,r17,1
   11680:	180ad27a 	srli	r5,r3,9
   11684:	84003fcc 	andi	r16,r16,255
   11688:	800695fa 	slli	r3,r16,23
   1168c:	10803fcc 	andi	r2,r2,255
   11690:	01002034 	movhi	r4,128
   11694:	213fffc4 	addi	r4,r4,-1
   11698:	100497fa 	slli	r2,r2,31
   1169c:	2920703a 	and	r16,r5,r4
   116a0:	80e0b03a 	or	r16,r16,r3
   116a4:	8084b03a 	or	r2,r16,r2
   116a8:	dfc00317 	ldw	ra,12(sp)
   116ac:	dc800217 	ldw	r18,8(sp)
   116b0:	dc400117 	ldw	r17,4(sp)
   116b4:	dc000017 	ldw	r16,0(sp)
   116b8:	dec00404 	addi	sp,sp,16
   116bc:	f800283a 	ret
   116c0:	00803fc4 	movi	r2,255
   116c4:	80bfe126 	beq	r16,r2,1164c <__alt_data_end+0xffff164c>
   116c8:	39c10034 	orhi	r7,r7,1024
   116cc:	008006c4 	movi	r2,27
   116d0:	11007416 	blt	r2,r4,118a4 <__subsf3+0x2bc>
   116d4:	00800804 	movi	r2,32
   116d8:	1105c83a 	sub	r2,r2,r4
   116dc:	3884983a 	sll	r2,r7,r2
   116e0:	390ed83a 	srl	r7,r7,r4
   116e4:	1008c03a 	cmpne	r4,r2,zero
   116e8:	390eb03a 	or	r7,r7,r4
   116ec:	19c7c83a 	sub	r3,r3,r7
   116f0:	1881002c 	andhi	r2,r3,1024
   116f4:	10001426 	beq	r2,zero,11748 <__subsf3+0x160>
   116f8:	04810034 	movhi	r18,1024
   116fc:	94bfffc4 	addi	r18,r18,-1
   11700:	1ca4703a 	and	r18,r3,r18
   11704:	9009883a 	mov	r4,r18
   11708:	00129c40 	call	129c4 <__clzsi2>
   1170c:	10bffec4 	addi	r2,r2,-5
   11710:	90a4983a 	sll	r18,r18,r2
   11714:	14005116 	blt	r2,r16,1185c <__subsf3+0x274>
   11718:	1405c83a 	sub	r2,r2,r16
   1171c:	10c00044 	addi	r3,r2,1
   11720:	00800804 	movi	r2,32
   11724:	10c5c83a 	sub	r2,r2,r3
   11728:	9084983a 	sll	r2,r18,r2
   1172c:	90e4d83a 	srl	r18,r18,r3
   11730:	0021883a 	mov	r16,zero
   11734:	1006c03a 	cmpne	r3,r2,zero
   11738:	90c6b03a 	or	r3,r18,r3
   1173c:	003fc306 	br	1164c <__alt_data_end+0xffff164c>
   11740:	2000e026 	beq	r4,zero,11ac4 <__subsf3+0x4dc>
   11744:	2007883a 	mov	r3,r4
   11748:	188001cc 	andi	r2,r3,7
   1174c:	103fc11e 	bne	r2,zero,11654 <__alt_data_end+0xffff1654>
   11750:	180ad0fa 	srli	r5,r3,3
   11754:	00c03fc4 	movi	r3,255
   11758:	8880004c 	andi	r2,r17,1
   1175c:	80c0031e 	bne	r16,r3,1176c <__subsf3+0x184>
   11760:	28006d26 	beq	r5,zero,11918 <__subsf3+0x330>
   11764:	29401034 	orhi	r5,r5,64
   11768:	043fffc4 	movi	r16,-1
   1176c:	00c02034 	movhi	r3,128
   11770:	18ffffc4 	addi	r3,r3,-1
   11774:	28ca703a 	and	r5,r5,r3
   11778:	003fc206 	br	11684 <__alt_data_end+0xffff1684>
   1177c:	01003c0e 	bge	zero,r4,11870 <__subsf3+0x288>
   11780:	30002126 	beq	r6,zero,11808 <__subsf3+0x220>
   11784:	01403fc4 	movi	r5,255
   11788:	817fb026 	beq	r16,r5,1164c <__alt_data_end+0xffff164c>
   1178c:	39c10034 	orhi	r7,r7,1024
   11790:	014006c4 	movi	r5,27
   11794:	29007416 	blt	r5,r4,11968 <__subsf3+0x380>
   11798:	01400804 	movi	r5,32
   1179c:	290bc83a 	sub	r5,r5,r4
   117a0:	394a983a 	sll	r5,r7,r5
   117a4:	390ed83a 	srl	r7,r7,r4
   117a8:	2808c03a 	cmpne	r4,r5,zero
   117ac:	390eb03a 	or	r7,r7,r4
   117b0:	19c7883a 	add	r3,r3,r7
   117b4:	1901002c 	andhi	r4,r3,1024
   117b8:	20003826 	beq	r4,zero,1189c <__subsf3+0x2b4>
   117bc:	84000044 	addi	r16,r16,1
   117c0:	01003fc4 	movi	r4,255
   117c4:	81005426 	beq	r16,r4,11918 <__subsf3+0x330>
   117c8:	1023883a 	mov	r17,r2
   117cc:	00bf0034 	movhi	r2,64512
   117d0:	10bfffc4 	addi	r2,r2,-1
   117d4:	1900004c 	andi	r4,r3,1
   117d8:	1886703a 	and	r3,r3,r2
   117dc:	1806d07a 	srli	r3,r3,1
   117e0:	1906b03a 	or	r3,r3,r4
   117e4:	003f9906 	br	1164c <__alt_data_end+0xffff164c>
   117e8:	383f9226 	beq	r7,zero,11634 <__alt_data_end+0xffff1634>
   117ec:	10803fcc 	andi	r2,r2,255
   117f0:	003f9106 	br	11638 <__alt_data_end+0xffff1638>
   117f4:	213fffc4 	addi	r4,r4,-1
   117f8:	203fbc26 	beq	r4,zero,116ec <__alt_data_end+0xffff16ec>
   117fc:	00803fc4 	movi	r2,255
   11800:	80bfb21e 	bne	r16,r2,116cc <__alt_data_end+0xffff16cc>
   11804:	003f9106 	br	1164c <__alt_data_end+0xffff164c>
   11808:	383f9026 	beq	r7,zero,1164c <__alt_data_end+0xffff164c>
   1180c:	213fffc4 	addi	r4,r4,-1
   11810:	203fe726 	beq	r4,zero,117b0 <__alt_data_end+0xffff17b0>
   11814:	01403fc4 	movi	r5,255
   11818:	817fdd1e 	bne	r16,r5,11790 <__alt_data_end+0xffff1790>
   1181c:	003f8b06 	br	1164c <__alt_data_end+0xffff164c>
   11820:	2000221e 	bne	r4,zero,118ac <__subsf3+0x2c4>
   11824:	81000044 	addi	r4,r16,1
   11828:	21003fcc 	andi	r4,r4,255
   1182c:	01400044 	movi	r5,1
   11830:	2900470e 	bge	r5,r4,11950 <__subsf3+0x368>
   11834:	19e5c83a 	sub	r18,r3,r7
   11838:	9141002c 	andhi	r5,r18,1024
   1183c:	28002d26 	beq	r5,zero,118f4 <__subsf3+0x30c>
   11840:	38e5c83a 	sub	r18,r7,r3
   11844:	1023883a 	mov	r17,r2
   11848:	003fae06 	br	11704 <__alt_data_end+0xffff1704>
   1184c:	8880004c 	andi	r2,r17,1
   11850:	043fffc4 	movi	r16,-1
   11854:	000b883a 	mov	r5,zero
   11858:	003f8a06 	br	11684 <__alt_data_end+0xffff1684>
   1185c:	00ff0034 	movhi	r3,64512
   11860:	18ffffc4 	addi	r3,r3,-1
   11864:	80a1c83a 	sub	r16,r16,r2
   11868:	90c6703a 	and	r3,r18,r3
   1186c:	003f7706 	br	1164c <__alt_data_end+0xffff164c>
   11870:	2000431e 	bne	r4,zero,11980 <__subsf3+0x398>
   11874:	81000044 	addi	r4,r16,1
   11878:	21803fcc 	andi	r6,r4,255
   1187c:	01400044 	movi	r5,1
   11880:	2980280e 	bge	r5,r6,11924 <__subsf3+0x33c>
   11884:	01403fc4 	movi	r5,255
   11888:	21402326 	beq	r4,r5,11918 <__subsf3+0x330>
   1188c:	19c7883a 	add	r3,r3,r7
   11890:	1806d07a 	srli	r3,r3,1
   11894:	2021883a 	mov	r16,r4
   11898:	003f6c06 	br	1164c <__alt_data_end+0xffff164c>
   1189c:	1023883a 	mov	r17,r2
   118a0:	003fa906 	br	11748 <__alt_data_end+0xffff1748>
   118a4:	01c00044 	movi	r7,1
   118a8:	003f9006 	br	116ec <__alt_data_end+0xffff16ec>
   118ac:	8000151e 	bne	r16,zero,11904 <__subsf3+0x31c>
   118b0:	18002f26 	beq	r3,zero,11970 <__subsf3+0x388>
   118b4:	0108303a 	nor	r4,zero,r4
   118b8:	20000a26 	beq	r4,zero,118e4 <__subsf3+0x2fc>
   118bc:	01403fc4 	movi	r5,255
   118c0:	31402b26 	beq	r6,r5,11970 <__subsf3+0x388>
   118c4:	014006c4 	movi	r5,27
   118c8:	29006e16 	blt	r5,r4,11a84 <__subsf3+0x49c>
   118cc:	01400804 	movi	r5,32
   118d0:	290bc83a 	sub	r5,r5,r4
   118d4:	194a983a 	sll	r5,r3,r5
   118d8:	1908d83a 	srl	r4,r3,r4
   118dc:	2806c03a 	cmpne	r3,r5,zero
   118e0:	20c6b03a 	or	r3,r4,r3
   118e4:	38c7c83a 	sub	r3,r7,r3
   118e8:	3021883a 	mov	r16,r6
   118ec:	1023883a 	mov	r17,r2
   118f0:	003f7f06 	br	116f0 <__alt_data_end+0xffff16f0>
   118f4:	903f831e 	bne	r18,zero,11704 <__alt_data_end+0xffff1704>
   118f8:	0005883a 	mov	r2,zero
   118fc:	0021883a 	mov	r16,zero
   11900:	003f9a06 	br	1176c <__alt_data_end+0xffff176c>
   11904:	01403fc4 	movi	r5,255
   11908:	31401926 	beq	r6,r5,11970 <__subsf3+0x388>
   1190c:	0109c83a 	sub	r4,zero,r4
   11910:	18c10034 	orhi	r3,r3,1024
   11914:	003feb06 	br	118c4 <__alt_data_end+0xffff18c4>
   11918:	043fffc4 	movi	r16,-1
   1191c:	000b883a 	mov	r5,zero
   11920:	003f5806 	br	11684 <__alt_data_end+0xffff1684>
   11924:	8000481e 	bne	r16,zero,11a48 <__subsf3+0x460>
   11928:	18006226 	beq	r3,zero,11ab4 <__subsf3+0x4cc>
   1192c:	383f4726 	beq	r7,zero,1164c <__alt_data_end+0xffff164c>
   11930:	19c7883a 	add	r3,r3,r7
   11934:	1881002c 	andhi	r2,r3,1024
   11938:	103f8326 	beq	r2,zero,11748 <__alt_data_end+0xffff1748>
   1193c:	00bf0034 	movhi	r2,64512
   11940:	10bfffc4 	addi	r2,r2,-1
   11944:	2821883a 	mov	r16,r5
   11948:	1886703a 	and	r3,r3,r2
   1194c:	003f3f06 	br	1164c <__alt_data_end+0xffff164c>
   11950:	80001c1e 	bne	r16,zero,119c4 <__subsf3+0x3dc>
   11954:	1800261e 	bne	r3,zero,119f0 <__subsf3+0x408>
   11958:	38004c26 	beq	r7,zero,11a8c <__subsf3+0x4a4>
   1195c:	3807883a 	mov	r3,r7
   11960:	1023883a 	mov	r17,r2
   11964:	003f3906 	br	1164c <__alt_data_end+0xffff164c>
   11968:	01c00044 	movi	r7,1
   1196c:	003f9006 	br	117b0 <__alt_data_end+0xffff17b0>
   11970:	3807883a 	mov	r3,r7
   11974:	3021883a 	mov	r16,r6
   11978:	1023883a 	mov	r17,r2
   1197c:	003f3306 	br	1164c <__alt_data_end+0xffff164c>
   11980:	8000161e 	bne	r16,zero,119dc <__subsf3+0x3f4>
   11984:	18002d26 	beq	r3,zero,11a3c <__subsf3+0x454>
   11988:	0108303a 	nor	r4,zero,r4
   1198c:	20000a26 	beq	r4,zero,119b8 <__subsf3+0x3d0>
   11990:	01403fc4 	movi	r5,255
   11994:	31402926 	beq	r6,r5,11a3c <__subsf3+0x454>
   11998:	014006c4 	movi	r5,27
   1199c:	29004716 	blt	r5,r4,11abc <__subsf3+0x4d4>
   119a0:	01400804 	movi	r5,32
   119a4:	290bc83a 	sub	r5,r5,r4
   119a8:	194a983a 	sll	r5,r3,r5
   119ac:	1908d83a 	srl	r4,r3,r4
   119b0:	2806c03a 	cmpne	r3,r5,zero
   119b4:	20c6b03a 	or	r3,r4,r3
   119b8:	19c7883a 	add	r3,r3,r7
   119bc:	3021883a 	mov	r16,r6
   119c0:	003f7c06 	br	117b4 <__alt_data_end+0xffff17b4>
   119c4:	1800111e 	bne	r3,zero,11a0c <__subsf3+0x424>
   119c8:	38003326 	beq	r7,zero,11a98 <__subsf3+0x4b0>
   119cc:	3807883a 	mov	r3,r7
   119d0:	1023883a 	mov	r17,r2
   119d4:	04003fc4 	movi	r16,255
   119d8:	003f1c06 	br	1164c <__alt_data_end+0xffff164c>
   119dc:	01403fc4 	movi	r5,255
   119e0:	31401626 	beq	r6,r5,11a3c <__subsf3+0x454>
   119e4:	0109c83a 	sub	r4,zero,r4
   119e8:	18c10034 	orhi	r3,r3,1024
   119ec:	003fea06 	br	11998 <__alt_data_end+0xffff1998>
   119f0:	383f1626 	beq	r7,zero,1164c <__alt_data_end+0xffff164c>
   119f4:	19c9c83a 	sub	r4,r3,r7
   119f8:	2141002c 	andhi	r5,r4,1024
   119fc:	283f5026 	beq	r5,zero,11740 <__alt_data_end+0xffff1740>
   11a00:	38c7c83a 	sub	r3,r7,r3
   11a04:	1023883a 	mov	r17,r2
   11a08:	003f1006 	br	1164c <__alt_data_end+0xffff164c>
   11a0c:	38001b26 	beq	r7,zero,11a7c <__subsf3+0x494>
   11a10:	1806d0fa 	srli	r3,r3,3
   11a14:	1900102c 	andhi	r4,r3,64
   11a18:	20000526 	beq	r4,zero,11a30 <__subsf3+0x448>
   11a1c:	380ed0fa 	srli	r7,r7,3
   11a20:	3900102c 	andhi	r4,r7,64
   11a24:	2000021e 	bne	r4,zero,11a30 <__subsf3+0x448>
   11a28:	3807883a 	mov	r3,r7
   11a2c:	1023883a 	mov	r17,r2
   11a30:	180690fa 	slli	r3,r3,3
   11a34:	04003fc4 	movi	r16,255
   11a38:	003f0406 	br	1164c <__alt_data_end+0xffff164c>
   11a3c:	3807883a 	mov	r3,r7
   11a40:	3021883a 	mov	r16,r6
   11a44:	003f0106 	br	1164c <__alt_data_end+0xffff164c>
   11a48:	18001726 	beq	r3,zero,11aa8 <__subsf3+0x4c0>
   11a4c:	38000b26 	beq	r7,zero,11a7c <__subsf3+0x494>
   11a50:	1806d0fa 	srli	r3,r3,3
   11a54:	1900102c 	andhi	r4,r3,64
   11a58:	20000426 	beq	r4,zero,11a6c <__subsf3+0x484>
   11a5c:	380ed0fa 	srli	r7,r7,3
   11a60:	3900102c 	andhi	r4,r7,64
   11a64:	2000011e 	bne	r4,zero,11a6c <__subsf3+0x484>
   11a68:	3807883a 	mov	r3,r7
   11a6c:	180690fa 	slli	r3,r3,3
   11a70:	1023883a 	mov	r17,r2
   11a74:	04003fc4 	movi	r16,255
   11a78:	003ef406 	br	1164c <__alt_data_end+0xffff164c>
   11a7c:	04003fc4 	movi	r16,255
   11a80:	003ef206 	br	1164c <__alt_data_end+0xffff164c>
   11a84:	00c00044 	movi	r3,1
   11a88:	003f9606 	br	118e4 <__alt_data_end+0xffff18e4>
   11a8c:	000b883a 	mov	r5,zero
   11a90:	0005883a 	mov	r2,zero
   11a94:	003f3506 	br	1176c <__alt_data_end+0xffff176c>
   11a98:	01402034 	movhi	r5,128
   11a9c:	297fffc4 	addi	r5,r5,-1
   11aa0:	0005883a 	mov	r2,zero
   11aa4:	003f2f06 	br	11764 <__alt_data_end+0xffff1764>
   11aa8:	3807883a 	mov	r3,r7
   11aac:	04003fc4 	movi	r16,255
   11ab0:	003ee606 	br	1164c <__alt_data_end+0xffff164c>
   11ab4:	3807883a 	mov	r3,r7
   11ab8:	003ee406 	br	1164c <__alt_data_end+0xffff164c>
   11abc:	00c00044 	movi	r3,1
   11ac0:	003fbd06 	br	119b8 <__alt_data_end+0xffff19b8>
   11ac4:	0005883a 	mov	r2,zero
   11ac8:	003f2806 	br	1176c <__alt_data_end+0xffff176c>

00011acc <__fixsfsi>:
   11acc:	200ad5fa 	srli	r5,r4,23
   11ad0:	00c02034 	movhi	r3,128
   11ad4:	18ffffc4 	addi	r3,r3,-1
   11ad8:	29403fcc 	andi	r5,r5,255
   11adc:	00801f84 	movi	r2,126
   11ae0:	1906703a 	and	r3,r3,r4
   11ae4:	2008d7fa 	srli	r4,r4,31
   11ae8:	11400e0e 	bge	r2,r5,11b24 <__fixsfsi+0x58>
   11aec:	00802744 	movi	r2,157
   11af0:	11400816 	blt	r2,r5,11b14 <__fixsfsi+0x48>
   11af4:	00802544 	movi	r2,149
   11af8:	18c02034 	orhi	r3,r3,128
   11afc:	11400b0e 	bge	r2,r5,11b2c <__fixsfsi+0x60>
   11b00:	28bfda84 	addi	r2,r5,-150
   11b04:	1884983a 	sll	r2,r3,r2
   11b08:	20000726 	beq	r4,zero,11b28 <__fixsfsi+0x5c>
   11b0c:	0085c83a 	sub	r2,zero,r2
   11b10:	f800283a 	ret
   11b14:	00a00034 	movhi	r2,32768
   11b18:	10bfffc4 	addi	r2,r2,-1
   11b1c:	2085883a 	add	r2,r4,r2
   11b20:	f800283a 	ret
   11b24:	0005883a 	mov	r2,zero
   11b28:	f800283a 	ret
   11b2c:	00802584 	movi	r2,150
   11b30:	1145c83a 	sub	r2,r2,r5
   11b34:	1884d83a 	srl	r2,r3,r2
   11b38:	003ff306 	br	11b08 <__alt_data_end+0xffff1b08>

00011b3c <__floatsisf>:
   11b3c:	defffd04 	addi	sp,sp,-12
   11b40:	dfc00215 	stw	ra,8(sp)
   11b44:	dc400115 	stw	r17,4(sp)
   11b48:	dc000015 	stw	r16,0(sp)
   11b4c:	20003526 	beq	r4,zero,11c24 <__floatsisf+0xe8>
   11b50:	2021883a 	mov	r16,r4
   11b54:	2022d7fa 	srli	r17,r4,31
   11b58:	20003616 	blt	r4,zero,11c34 <__floatsisf+0xf8>
   11b5c:	8009883a 	mov	r4,r16
   11b60:	00129c40 	call	129c4 <__clzsi2>
   11b64:	00c02784 	movi	r3,158
   11b68:	1887c83a 	sub	r3,r3,r2
   11b6c:	01002584 	movi	r4,150
   11b70:	20c01416 	blt	r4,r3,11bc4 <__floatsisf+0x88>
   11b74:	20c9c83a 	sub	r4,r4,r3
   11b78:	8120983a 	sll	r16,r16,r4
   11b7c:	00802034 	movhi	r2,128
   11b80:	10bfffc4 	addi	r2,r2,-1
   11b84:	8809883a 	mov	r4,r17
   11b88:	80a0703a 	and	r16,r16,r2
   11b8c:	18803fcc 	andi	r2,r3,255
   11b90:	100695fa 	slli	r3,r2,23
   11b94:	20803fcc 	andi	r2,r4,255
   11b98:	100897fa 	slli	r4,r2,31
   11b9c:	00802034 	movhi	r2,128
   11ba0:	10bfffc4 	addi	r2,r2,-1
   11ba4:	8084703a 	and	r2,r16,r2
   11ba8:	10c4b03a 	or	r2,r2,r3
   11bac:	1104b03a 	or	r2,r2,r4
   11bb0:	dfc00217 	ldw	ra,8(sp)
   11bb4:	dc400117 	ldw	r17,4(sp)
   11bb8:	dc000017 	ldw	r16,0(sp)
   11bbc:	dec00304 	addi	sp,sp,12
   11bc0:	f800283a 	ret
   11bc4:	01002644 	movi	r4,153
   11bc8:	20c01c16 	blt	r4,r3,11c3c <__floatsisf+0x100>
   11bcc:	20c9c83a 	sub	r4,r4,r3
   11bd0:	8120983a 	sll	r16,r16,r4
   11bd4:	013f0034 	movhi	r4,64512
   11bd8:	213fffc4 	addi	r4,r4,-1
   11bdc:	814001cc 	andi	r5,r16,7
   11be0:	8108703a 	and	r4,r16,r4
   11be4:	28000426 	beq	r5,zero,11bf8 <__floatsisf+0xbc>
   11be8:	840003cc 	andi	r16,r16,15
   11bec:	01400104 	movi	r5,4
   11bf0:	81400126 	beq	r16,r5,11bf8 <__floatsisf+0xbc>
   11bf4:	2149883a 	add	r4,r4,r5
   11bf8:	2141002c 	andhi	r5,r4,1024
   11bfc:	28000526 	beq	r5,zero,11c14 <__floatsisf+0xd8>
   11c00:	00c027c4 	movi	r3,159
   11c04:	1887c83a 	sub	r3,r3,r2
   11c08:	00bf0034 	movhi	r2,64512
   11c0c:	10bfffc4 	addi	r2,r2,-1
   11c10:	2088703a 	and	r4,r4,r2
   11c14:	202091ba 	slli	r16,r4,6
   11c18:	8809883a 	mov	r4,r17
   11c1c:	8020d27a 	srli	r16,r16,9
   11c20:	003fda06 	br	11b8c <__alt_data_end+0xffff1b8c>
   11c24:	0009883a 	mov	r4,zero
   11c28:	0007883a 	mov	r3,zero
   11c2c:	0021883a 	mov	r16,zero
   11c30:	003fd606 	br	11b8c <__alt_data_end+0xffff1b8c>
   11c34:	0121c83a 	sub	r16,zero,r4
   11c38:	003fc806 	br	11b5c <__alt_data_end+0xffff1b5c>
   11c3c:	01002e44 	movi	r4,185
   11c40:	20c9c83a 	sub	r4,r4,r3
   11c44:	01400144 	movi	r5,5
   11c48:	8108983a 	sll	r4,r16,r4
   11c4c:	288bc83a 	sub	r5,r5,r2
   11c50:	8160d83a 	srl	r16,r16,r5
   11c54:	2008c03a 	cmpne	r4,r4,zero
   11c58:	8120b03a 	or	r16,r16,r4
   11c5c:	003fdd06 	br	11bd4 <__alt_data_end+0xffff1bd4>

00011c60 <__divdf3>:
   11c60:	defff004 	addi	sp,sp,-64
   11c64:	dc800815 	stw	r18,32(sp)
   11c68:	2824d53a 	srli	r18,r5,20
   11c6c:	dd800c15 	stw	r22,48(sp)
   11c70:	282cd7fa 	srli	r22,r5,31
   11c74:	dc000615 	stw	r16,24(sp)
   11c78:	04000434 	movhi	r16,16
   11c7c:	843fffc4 	addi	r16,r16,-1
   11c80:	dfc00f15 	stw	ra,60(sp)
   11c84:	df000e15 	stw	fp,56(sp)
   11c88:	ddc00d15 	stw	r23,52(sp)
   11c8c:	dd400b15 	stw	r21,44(sp)
   11c90:	dd000a15 	stw	r20,40(sp)
   11c94:	dcc00915 	stw	r19,36(sp)
   11c98:	dc400715 	stw	r17,28(sp)
   11c9c:	9481ffcc 	andi	r18,r18,2047
   11ca0:	2c20703a 	and	r16,r5,r16
   11ca4:	b2003fcc 	andi	r8,r22,255
   11ca8:	90006126 	beq	r18,zero,11e30 <__divdf3+0x1d0>
   11cac:	0081ffc4 	movi	r2,2047
   11cb0:	202b883a 	mov	r21,r4
   11cb4:	90803726 	beq	r18,r2,11d94 <__divdf3+0x134>
   11cb8:	80800434 	orhi	r2,r16,16
   11cbc:	100490fa 	slli	r2,r2,3
   11cc0:	2020d77a 	srli	r16,r4,29
   11cc4:	202a90fa 	slli	r21,r4,3
   11cc8:	94bf0044 	addi	r18,r18,-1023
   11ccc:	80a0b03a 	or	r16,r16,r2
   11cd0:	0013883a 	mov	r9,zero
   11cd4:	000b883a 	mov	r5,zero
   11cd8:	3806d53a 	srli	r3,r7,20
   11cdc:	382ed7fa 	srli	r23,r7,31
   11ce0:	04400434 	movhi	r17,16
   11ce4:	8c7fffc4 	addi	r17,r17,-1
   11ce8:	18c1ffcc 	andi	r3,r3,2047
   11cec:	3029883a 	mov	r20,r6
   11cf0:	3c62703a 	and	r17,r7,r17
   11cf4:	bf003fcc 	andi	fp,r23,255
   11cf8:	18006e26 	beq	r3,zero,11eb4 <__divdf3+0x254>
   11cfc:	0081ffc4 	movi	r2,2047
   11d00:	18806626 	beq	r3,r2,11e9c <__divdf3+0x23c>
   11d04:	88800434 	orhi	r2,r17,16
   11d08:	100490fa 	slli	r2,r2,3
   11d0c:	3022d77a 	srli	r17,r6,29
   11d10:	302890fa 	slli	r20,r6,3
   11d14:	18ff0044 	addi	r3,r3,-1023
   11d18:	88a2b03a 	or	r17,r17,r2
   11d1c:	000f883a 	mov	r7,zero
   11d20:	b5e6f03a 	xor	r19,r22,r23
   11d24:	3a4cb03a 	or	r6,r7,r9
   11d28:	008003c4 	movi	r2,15
   11d2c:	9809883a 	mov	r4,r19
   11d30:	90c7c83a 	sub	r3,r18,r3
   11d34:	9cc03fcc 	andi	r19,r19,255
   11d38:	11809636 	bltu	r2,r6,11f94 <__divdf3+0x334>
   11d3c:	300c90ba 	slli	r6,r6,2
   11d40:	00800074 	movhi	r2,1
   11d44:	10875504 	addi	r2,r2,7508
   11d48:	308d883a 	add	r6,r6,r2
   11d4c:	30800017 	ldw	r2,0(r6)
   11d50:	1000683a 	jmp	r2
   11d54:	00011f94 	movui	zero,1150
   11d58:	00011dcc 	andi	zero,zero,1143
   11d5c:	00011f84 	movi	zero,1150
   11d60:	00011dc0 	call	11dc <__alt_mem_onchip_memory-0xee24>
   11d64:	00011f84 	movi	zero,1150
   11d68:	00011f58 	cmpnei	zero,zero,1149
   11d6c:	00011f84 	movi	zero,1150
   11d70:	00011dc0 	call	11dc <__alt_mem_onchip_memory-0xee24>
   11d74:	00011dcc 	andi	zero,zero,1143
   11d78:	00011dcc 	andi	zero,zero,1143
   11d7c:	00011f58 	cmpnei	zero,zero,1149
   11d80:	00011dc0 	call	11dc <__alt_mem_onchip_memory-0xee24>
   11d84:	00011db0 	cmpltui	zero,zero,1142
   11d88:	00011db0 	cmpltui	zero,zero,1142
   11d8c:	00011db0 	cmpltui	zero,zero,1142
   11d90:	0001231c 	xori	zero,zero,1164
   11d94:	2404b03a 	or	r2,r4,r16
   11d98:	10006c1e 	bne	r2,zero,11f4c <__divdf3+0x2ec>
   11d9c:	02400204 	movi	r9,8
   11da0:	0021883a 	mov	r16,zero
   11da4:	002b883a 	mov	r21,zero
   11da8:	01400084 	movi	r5,2
   11dac:	003fca06 	br	11cd8 <__alt_data_end+0xffff1cd8>
   11db0:	8023883a 	mov	r17,r16
   11db4:	a829883a 	mov	r20,r21
   11db8:	4039883a 	mov	fp,r8
   11dbc:	280f883a 	mov	r7,r5
   11dc0:	00800084 	movi	r2,2
   11dc4:	3881601e 	bne	r7,r2,12348 <__divdf3+0x6e8>
   11dc8:	e027883a 	mov	r19,fp
   11dcc:	9900004c 	andi	r4,r19,1
   11dd0:	0081ffc4 	movi	r2,2047
   11dd4:	0021883a 	mov	r16,zero
   11dd8:	002b883a 	mov	r21,zero
   11ddc:	1004953a 	slli	r2,r2,20
   11de0:	20c03fcc 	andi	r3,r4,255
   11de4:	01400434 	movhi	r5,16
   11de8:	297fffc4 	addi	r5,r5,-1
   11dec:	180697fa 	slli	r3,r3,31
   11df0:	8160703a 	and	r16,r16,r5
   11df4:	80a0b03a 	or	r16,r16,r2
   11df8:	80c6b03a 	or	r3,r16,r3
   11dfc:	a805883a 	mov	r2,r21
   11e00:	dfc00f17 	ldw	ra,60(sp)
   11e04:	df000e17 	ldw	fp,56(sp)
   11e08:	ddc00d17 	ldw	r23,52(sp)
   11e0c:	dd800c17 	ldw	r22,48(sp)
   11e10:	dd400b17 	ldw	r21,44(sp)
   11e14:	dd000a17 	ldw	r20,40(sp)
   11e18:	dcc00917 	ldw	r19,36(sp)
   11e1c:	dc800817 	ldw	r18,32(sp)
   11e20:	dc400717 	ldw	r17,28(sp)
   11e24:	dc000617 	ldw	r16,24(sp)
   11e28:	dec01004 	addi	sp,sp,64
   11e2c:	f800283a 	ret
   11e30:	2404b03a 	or	r2,r4,r16
   11e34:	2023883a 	mov	r17,r4
   11e38:	10003f26 	beq	r2,zero,11f38 <__divdf3+0x2d8>
   11e3c:	80015e26 	beq	r16,zero,123b8 <__divdf3+0x758>
   11e40:	8009883a 	mov	r4,r16
   11e44:	d9800215 	stw	r6,8(sp)
   11e48:	d9c00515 	stw	r7,20(sp)
   11e4c:	da000415 	stw	r8,16(sp)
   11e50:	00129c40 	call	129c4 <__clzsi2>
   11e54:	d9800217 	ldw	r6,8(sp)
   11e58:	d9c00517 	ldw	r7,20(sp)
   11e5c:	da000417 	ldw	r8,16(sp)
   11e60:	113ffd44 	addi	r4,r2,-11
   11e64:	00c00704 	movi	r3,28
   11e68:	19014f16 	blt	r3,r4,123a8 <__divdf3+0x748>
   11e6c:	00c00744 	movi	r3,29
   11e70:	157ffe04 	addi	r21,r2,-8
   11e74:	1907c83a 	sub	r3,r3,r4
   11e78:	8560983a 	sll	r16,r16,r21
   11e7c:	88c6d83a 	srl	r3,r17,r3
   11e80:	8d6a983a 	sll	r21,r17,r21
   11e84:	1c20b03a 	or	r16,r3,r16
   11e88:	1080fcc4 	addi	r2,r2,1011
   11e8c:	00a5c83a 	sub	r18,zero,r2
   11e90:	0013883a 	mov	r9,zero
   11e94:	000b883a 	mov	r5,zero
   11e98:	003f8f06 	br	11cd8 <__alt_data_end+0xffff1cd8>
   11e9c:	3444b03a 	or	r2,r6,r17
   11ea0:	1000231e 	bne	r2,zero,11f30 <__divdf3+0x2d0>
   11ea4:	0023883a 	mov	r17,zero
   11ea8:	0029883a 	mov	r20,zero
   11eac:	01c00084 	movi	r7,2
   11eb0:	003f9b06 	br	11d20 <__alt_data_end+0xffff1d20>
   11eb4:	3444b03a 	or	r2,r6,r17
   11eb8:	10001926 	beq	r2,zero,11f20 <__divdf3+0x2c0>
   11ebc:	88014b26 	beq	r17,zero,123ec <__divdf3+0x78c>
   11ec0:	8809883a 	mov	r4,r17
   11ec4:	d9400115 	stw	r5,4(sp)
   11ec8:	d9800215 	stw	r6,8(sp)
   11ecc:	da000415 	stw	r8,16(sp)
   11ed0:	da400315 	stw	r9,12(sp)
   11ed4:	00129c40 	call	129c4 <__clzsi2>
   11ed8:	d9400117 	ldw	r5,4(sp)
   11edc:	d9800217 	ldw	r6,8(sp)
   11ee0:	da000417 	ldw	r8,16(sp)
   11ee4:	da400317 	ldw	r9,12(sp)
   11ee8:	113ffd44 	addi	r4,r2,-11
   11eec:	00c00704 	movi	r3,28
   11ef0:	19013a16 	blt	r3,r4,123dc <__divdf3+0x77c>
   11ef4:	00c00744 	movi	r3,29
   11ef8:	153ffe04 	addi	r20,r2,-8
   11efc:	1907c83a 	sub	r3,r3,r4
   11f00:	8d22983a 	sll	r17,r17,r20
   11f04:	30c6d83a 	srl	r3,r6,r3
   11f08:	3528983a 	sll	r20,r6,r20
   11f0c:	1c62b03a 	or	r17,r3,r17
   11f10:	1080fcc4 	addi	r2,r2,1011
   11f14:	0087c83a 	sub	r3,zero,r2
   11f18:	000f883a 	mov	r7,zero
   11f1c:	003f8006 	br	11d20 <__alt_data_end+0xffff1d20>
   11f20:	0023883a 	mov	r17,zero
   11f24:	0029883a 	mov	r20,zero
   11f28:	01c00044 	movi	r7,1
   11f2c:	003f7c06 	br	11d20 <__alt_data_end+0xffff1d20>
   11f30:	01c000c4 	movi	r7,3
   11f34:	003f7a06 	br	11d20 <__alt_data_end+0xffff1d20>
   11f38:	02400104 	movi	r9,4
   11f3c:	0021883a 	mov	r16,zero
   11f40:	002b883a 	mov	r21,zero
   11f44:	01400044 	movi	r5,1
   11f48:	003f6306 	br	11cd8 <__alt_data_end+0xffff1cd8>
   11f4c:	02400304 	movi	r9,12
   11f50:	014000c4 	movi	r5,3
   11f54:	003f6006 	br	11cd8 <__alt_data_end+0xffff1cd8>
   11f58:	04000434 	movhi	r16,16
   11f5c:	0009883a 	mov	r4,zero
   11f60:	843fffc4 	addi	r16,r16,-1
   11f64:	057fffc4 	movi	r21,-1
   11f68:	0081ffc4 	movi	r2,2047
   11f6c:	003f9b06 	br	11ddc <__alt_data_end+0xffff1ddc>
   11f70:	00c00044 	movi	r3,1
   11f74:	1887c83a 	sub	r3,r3,r2
   11f78:	01000e04 	movi	r4,56
   11f7c:	20c1530e 	bge	r4,r3,124cc <__divdf3+0x86c>
   11f80:	9900004c 	andi	r4,r19,1
   11f84:	0005883a 	mov	r2,zero
   11f88:	0021883a 	mov	r16,zero
   11f8c:	002b883a 	mov	r21,zero
   11f90:	003f9206 	br	11ddc <__alt_data_end+0xffff1ddc>
   11f94:	8c012e36 	bltu	r17,r16,12450 <__divdf3+0x7f0>
   11f98:	84412c26 	beq	r16,r17,1244c <__divdf3+0x7ec>
   11f9c:	a82f883a 	mov	r23,r21
   11fa0:	18ffffc4 	addi	r3,r3,-1
   11fa4:	002b883a 	mov	r21,zero
   11fa8:	a004d63a 	srli	r2,r20,24
   11fac:	8822923a 	slli	r17,r17,8
   11fb0:	a028923a 	slli	r20,r20,8
   11fb4:	8009883a 	mov	r4,r16
   11fb8:	88acb03a 	or	r22,r17,r2
   11fbc:	dd000015 	stw	r20,0(sp)
   11fc0:	b028d43a 	srli	r20,r22,16
   11fc4:	d8c00215 	stw	r3,8(sp)
   11fc8:	b4bfffcc 	andi	r18,r22,65535
   11fcc:	a00b883a 	mov	r5,r20
   11fd0:	0012b200 	call	12b20 <__udivsi3>
   11fd4:	100b883a 	mov	r5,r2
   11fd8:	9009883a 	mov	r4,r18
   11fdc:	1023883a 	mov	r17,r2
   11fe0:	0012bdc0 	call	12bdc <__mulsi3>
   11fe4:	8009883a 	mov	r4,r16
   11fe8:	a00b883a 	mov	r5,r20
   11fec:	1039883a 	mov	fp,r2
   11ff0:	0012b840 	call	12b84 <__umodsi3>
   11ff4:	1004943a 	slli	r2,r2,16
   11ff8:	b808d43a 	srli	r4,r23,16
   11ffc:	d8c00217 	ldw	r3,8(sp)
   12000:	2084b03a 	or	r2,r4,r2
   12004:	1700062e 	bgeu	r2,fp,12020 <__divdf3+0x3c0>
   12008:	1585883a 	add	r2,r2,r22
   1200c:	893fffc4 	addi	r4,r17,-1
   12010:	15811d36 	bltu	r2,r22,12488 <__divdf3+0x828>
   12014:	17011c2e 	bgeu	r2,fp,12488 <__divdf3+0x828>
   12018:	8c7fff84 	addi	r17,r17,-2
   1201c:	1585883a 	add	r2,r2,r22
   12020:	1739c83a 	sub	fp,r2,fp
   12024:	a00b883a 	mov	r5,r20
   12028:	e009883a 	mov	r4,fp
   1202c:	d8c00215 	stw	r3,8(sp)
   12030:	0012b200 	call	12b20 <__udivsi3>
   12034:	100b883a 	mov	r5,r2
   12038:	9009883a 	mov	r4,r18
   1203c:	1021883a 	mov	r16,r2
   12040:	0012bdc0 	call	12bdc <__mulsi3>
   12044:	a00b883a 	mov	r5,r20
   12048:	e009883a 	mov	r4,fp
   1204c:	d8800415 	stw	r2,16(sp)
   12050:	0012b840 	call	12b84 <__umodsi3>
   12054:	1004943a 	slli	r2,r2,16
   12058:	da000417 	ldw	r8,16(sp)
   1205c:	bdffffcc 	andi	r23,r23,65535
   12060:	b884b03a 	or	r2,r23,r2
   12064:	d8c00217 	ldw	r3,8(sp)
   12068:	1200062e 	bgeu	r2,r8,12084 <__divdf3+0x424>
   1206c:	1585883a 	add	r2,r2,r22
   12070:	813fffc4 	addi	r4,r16,-1
   12074:	15810236 	bltu	r2,r22,12480 <__divdf3+0x820>
   12078:	1201012e 	bgeu	r2,r8,12480 <__divdf3+0x820>
   1207c:	843fff84 	addi	r16,r16,-2
   12080:	1585883a 	add	r2,r2,r22
   12084:	8822943a 	slli	r17,r17,16
   12088:	d9800017 	ldw	r6,0(sp)
   1208c:	1211c83a 	sub	r8,r2,r8
   12090:	8c22b03a 	or	r17,r17,r16
   12094:	373fffcc 	andi	fp,r6,65535
   12098:	8abfffcc 	andi	r10,r17,65535
   1209c:	8820d43a 	srli	r16,r17,16
   120a0:	5009883a 	mov	r4,r10
   120a4:	e00b883a 	mov	r5,fp
   120a8:	302ed43a 	srli	r23,r6,16
   120ac:	d8c00215 	stw	r3,8(sp)
   120b0:	da000415 	stw	r8,16(sp)
   120b4:	da800115 	stw	r10,4(sp)
   120b8:	0012bdc0 	call	12bdc <__mulsi3>
   120bc:	800b883a 	mov	r5,r16
   120c0:	e009883a 	mov	r4,fp
   120c4:	d8800515 	stw	r2,20(sp)
   120c8:	0012bdc0 	call	12bdc <__mulsi3>
   120cc:	8009883a 	mov	r4,r16
   120d0:	b80b883a 	mov	r5,r23
   120d4:	d8800315 	stw	r2,12(sp)
   120d8:	0012bdc0 	call	12bdc <__mulsi3>
   120dc:	da800117 	ldw	r10,4(sp)
   120e0:	b80b883a 	mov	r5,r23
   120e4:	1021883a 	mov	r16,r2
   120e8:	5009883a 	mov	r4,r10
   120ec:	0012bdc0 	call	12bdc <__mulsi3>
   120f0:	d9c00517 	ldw	r7,20(sp)
   120f4:	da400317 	ldw	r9,12(sp)
   120f8:	d8c00217 	ldw	r3,8(sp)
   120fc:	3808d43a 	srli	r4,r7,16
   12100:	1245883a 	add	r2,r2,r9
   12104:	da000417 	ldw	r8,16(sp)
   12108:	2085883a 	add	r2,r4,r2
   1210c:	1240022e 	bgeu	r2,r9,12118 <__divdf3+0x4b8>
   12110:	01000074 	movhi	r4,1
   12114:	8121883a 	add	r16,r16,r4
   12118:	1008d43a 	srli	r4,r2,16
   1211c:	1004943a 	slli	r2,r2,16
   12120:	39ffffcc 	andi	r7,r7,65535
   12124:	2409883a 	add	r4,r4,r16
   12128:	11c5883a 	add	r2,r2,r7
   1212c:	4100bb36 	bltu	r8,r4,1241c <__divdf3+0x7bc>
   12130:	4100d726 	beq	r8,r4,12490 <__divdf3+0x830>
   12134:	4109c83a 	sub	r4,r8,r4
   12138:	a8a1c83a 	sub	r16,r21,r2
   1213c:	ac2b803a 	cmpltu	r21,r21,r16
   12140:	256bc83a 	sub	r21,r4,r21
   12144:	b540d926 	beq	r22,r21,124ac <__divdf3+0x84c>
   12148:	a00b883a 	mov	r5,r20
   1214c:	a809883a 	mov	r4,r21
   12150:	d8c00215 	stw	r3,8(sp)
   12154:	0012b200 	call	12b20 <__udivsi3>
   12158:	100b883a 	mov	r5,r2
   1215c:	9009883a 	mov	r4,r18
   12160:	d8800515 	stw	r2,20(sp)
   12164:	0012bdc0 	call	12bdc <__mulsi3>
   12168:	a809883a 	mov	r4,r21
   1216c:	a00b883a 	mov	r5,r20
   12170:	d8800415 	stw	r2,16(sp)
   12174:	0012b840 	call	12b84 <__umodsi3>
   12178:	1004943a 	slli	r2,r2,16
   1217c:	8008d43a 	srli	r4,r16,16
   12180:	da000417 	ldw	r8,16(sp)
   12184:	d8c00217 	ldw	r3,8(sp)
   12188:	2084b03a 	or	r2,r4,r2
   1218c:	d9c00517 	ldw	r7,20(sp)
   12190:	1200062e 	bgeu	r2,r8,121ac <__divdf3+0x54c>
   12194:	1585883a 	add	r2,r2,r22
   12198:	393fffc4 	addi	r4,r7,-1
   1219c:	1580c536 	bltu	r2,r22,124b4 <__divdf3+0x854>
   121a0:	1200c42e 	bgeu	r2,r8,124b4 <__divdf3+0x854>
   121a4:	39ffff84 	addi	r7,r7,-2
   121a8:	1585883a 	add	r2,r2,r22
   121ac:	122bc83a 	sub	r21,r2,r8
   121b0:	a00b883a 	mov	r5,r20
   121b4:	a809883a 	mov	r4,r21
   121b8:	d8c00215 	stw	r3,8(sp)
   121bc:	d9c00515 	stw	r7,20(sp)
   121c0:	0012b200 	call	12b20 <__udivsi3>
   121c4:	9009883a 	mov	r4,r18
   121c8:	100b883a 	mov	r5,r2
   121cc:	d8800415 	stw	r2,16(sp)
   121d0:	0012bdc0 	call	12bdc <__mulsi3>
   121d4:	a809883a 	mov	r4,r21
   121d8:	a00b883a 	mov	r5,r20
   121dc:	1025883a 	mov	r18,r2
   121e0:	0012b840 	call	12b84 <__umodsi3>
   121e4:	1004943a 	slli	r2,r2,16
   121e8:	813fffcc 	andi	r4,r16,65535
   121ec:	d8c00217 	ldw	r3,8(sp)
   121f0:	20a0b03a 	or	r16,r4,r2
   121f4:	d9c00517 	ldw	r7,20(sp)
   121f8:	da000417 	ldw	r8,16(sp)
   121fc:	8480062e 	bgeu	r16,r18,12218 <__divdf3+0x5b8>
   12200:	85a1883a 	add	r16,r16,r22
   12204:	40bfffc4 	addi	r2,r8,-1
   12208:	8580ac36 	bltu	r16,r22,124bc <__divdf3+0x85c>
   1220c:	8480ab2e 	bgeu	r16,r18,124bc <__divdf3+0x85c>
   12210:	423fff84 	addi	r8,r8,-2
   12214:	85a1883a 	add	r16,r16,r22
   12218:	3804943a 	slli	r2,r7,16
   1221c:	84a1c83a 	sub	r16,r16,r18
   12220:	e009883a 	mov	r4,fp
   12224:	1228b03a 	or	r20,r2,r8
   12228:	a1ffffcc 	andi	r7,r20,65535
   1222c:	a024d43a 	srli	r18,r20,16
   12230:	380b883a 	mov	r5,r7
   12234:	d8c00215 	stw	r3,8(sp)
   12238:	d9c00515 	stw	r7,20(sp)
   1223c:	0012bdc0 	call	12bdc <__mulsi3>
   12240:	900b883a 	mov	r5,r18
   12244:	e009883a 	mov	r4,fp
   12248:	102b883a 	mov	r21,r2
   1224c:	0012bdc0 	call	12bdc <__mulsi3>
   12250:	900b883a 	mov	r5,r18
   12254:	b809883a 	mov	r4,r23
   12258:	1039883a 	mov	fp,r2
   1225c:	0012bdc0 	call	12bdc <__mulsi3>
   12260:	d9c00517 	ldw	r7,20(sp)
   12264:	b80b883a 	mov	r5,r23
   12268:	1025883a 	mov	r18,r2
   1226c:	3809883a 	mov	r4,r7
   12270:	0012bdc0 	call	12bdc <__mulsi3>
   12274:	a808d43a 	srli	r4,r21,16
   12278:	1705883a 	add	r2,r2,fp
   1227c:	d8c00217 	ldw	r3,8(sp)
   12280:	2085883a 	add	r2,r4,r2
   12284:	1700022e 	bgeu	r2,fp,12290 <__divdf3+0x630>
   12288:	01000074 	movhi	r4,1
   1228c:	9125883a 	add	r18,r18,r4
   12290:	1008d43a 	srli	r4,r2,16
   12294:	1004943a 	slli	r2,r2,16
   12298:	ad7fffcc 	andi	r21,r21,65535
   1229c:	2489883a 	add	r4,r4,r18
   122a0:	1545883a 	add	r2,r2,r21
   122a4:	81003836 	bltu	r16,r4,12388 <__divdf3+0x728>
   122a8:	81003626 	beq	r16,r4,12384 <__divdf3+0x724>
   122ac:	a5000054 	ori	r20,r20,1
   122b0:	1880ffc4 	addi	r2,r3,1023
   122b4:	00bf2e0e 	bge	zero,r2,11f70 <__alt_data_end+0xffff1f70>
   122b8:	a10001cc 	andi	r4,r20,7
   122bc:	20000726 	beq	r4,zero,122dc <__divdf3+0x67c>
   122c0:	a10003cc 	andi	r4,r20,15
   122c4:	01400104 	movi	r5,4
   122c8:	21400426 	beq	r4,r5,122dc <__divdf3+0x67c>
   122cc:	a149883a 	add	r4,r20,r5
   122d0:	2529803a 	cmpltu	r20,r4,r20
   122d4:	8d23883a 	add	r17,r17,r20
   122d8:	2029883a 	mov	r20,r4
   122dc:	8900402c 	andhi	r4,r17,256
   122e0:	20000426 	beq	r4,zero,122f4 <__divdf3+0x694>
   122e4:	18810004 	addi	r2,r3,1024
   122e8:	00ffc034 	movhi	r3,65280
   122ec:	18ffffc4 	addi	r3,r3,-1
   122f0:	88e2703a 	and	r17,r17,r3
   122f4:	00c1ff84 	movi	r3,2046
   122f8:	18beb416 	blt	r3,r2,11dcc <__alt_data_end+0xffff1dcc>
   122fc:	a028d0fa 	srli	r20,r20,3
   12300:	882a977a 	slli	r21,r17,29
   12304:	8820927a 	slli	r16,r17,9
   12308:	1081ffcc 	andi	r2,r2,2047
   1230c:	ad2ab03a 	or	r21,r21,r20
   12310:	8020d33a 	srli	r16,r16,12
   12314:	9900004c 	andi	r4,r19,1
   12318:	003eb006 	br	11ddc <__alt_data_end+0xffff1ddc>
   1231c:	8080022c 	andhi	r2,r16,8
   12320:	10001226 	beq	r2,zero,1236c <__divdf3+0x70c>
   12324:	8880022c 	andhi	r2,r17,8
   12328:	1000101e 	bne	r2,zero,1236c <__divdf3+0x70c>
   1232c:	00800434 	movhi	r2,16
   12330:	8c000234 	orhi	r16,r17,8
   12334:	10bfffc4 	addi	r2,r2,-1
   12338:	b809883a 	mov	r4,r23
   1233c:	80a0703a 	and	r16,r16,r2
   12340:	a02b883a 	mov	r21,r20
   12344:	003f0806 	br	11f68 <__alt_data_end+0xffff1f68>
   12348:	008000c4 	movi	r2,3
   1234c:	3880b126 	beq	r7,r2,12614 <__divdf3+0x9b4>
   12350:	00800044 	movi	r2,1
   12354:	38805b1e 	bne	r7,r2,124c4 <__divdf3+0x864>
   12358:	e009883a 	mov	r4,fp
   1235c:	0005883a 	mov	r2,zero
   12360:	0021883a 	mov	r16,zero
   12364:	002b883a 	mov	r21,zero
   12368:	003e9c06 	br	11ddc <__alt_data_end+0xffff1ddc>
   1236c:	00800434 	movhi	r2,16
   12370:	84000234 	orhi	r16,r16,8
   12374:	10bfffc4 	addi	r2,r2,-1
   12378:	b009883a 	mov	r4,r22
   1237c:	80a0703a 	and	r16,r16,r2
   12380:	003ef906 	br	11f68 <__alt_data_end+0xffff1f68>
   12384:	103fca26 	beq	r2,zero,122b0 <__alt_data_end+0xffff22b0>
   12388:	b421883a 	add	r16,r22,r16
   1238c:	a17fffc4 	addi	r5,r20,-1
   12390:	8580422e 	bgeu	r16,r22,1249c <__divdf3+0x83c>
   12394:	2829883a 	mov	r20,r5
   12398:	813fc41e 	bne	r16,r4,122ac <__alt_data_end+0xffff22ac>
   1239c:	d9800017 	ldw	r6,0(sp)
   123a0:	30bfc21e 	bne	r6,r2,122ac <__alt_data_end+0xffff22ac>
   123a4:	003fc206 	br	122b0 <__alt_data_end+0xffff22b0>
   123a8:	143ff604 	addi	r16,r2,-40
   123ac:	8c20983a 	sll	r16,r17,r16
   123b0:	002b883a 	mov	r21,zero
   123b4:	003eb406 	br	11e88 <__alt_data_end+0xffff1e88>
   123b8:	d9800215 	stw	r6,8(sp)
   123bc:	d9c00515 	stw	r7,20(sp)
   123c0:	da000415 	stw	r8,16(sp)
   123c4:	00129c40 	call	129c4 <__clzsi2>
   123c8:	10800804 	addi	r2,r2,32
   123cc:	da000417 	ldw	r8,16(sp)
   123d0:	d9c00517 	ldw	r7,20(sp)
   123d4:	d9800217 	ldw	r6,8(sp)
   123d8:	003ea106 	br	11e60 <__alt_data_end+0xffff1e60>
   123dc:	147ff604 	addi	r17,r2,-40
   123e0:	3462983a 	sll	r17,r6,r17
   123e4:	0029883a 	mov	r20,zero
   123e8:	003ec906 	br	11f10 <__alt_data_end+0xffff1f10>
   123ec:	3009883a 	mov	r4,r6
   123f0:	d9400115 	stw	r5,4(sp)
   123f4:	d9800215 	stw	r6,8(sp)
   123f8:	da000415 	stw	r8,16(sp)
   123fc:	da400315 	stw	r9,12(sp)
   12400:	00129c40 	call	129c4 <__clzsi2>
   12404:	10800804 	addi	r2,r2,32
   12408:	da400317 	ldw	r9,12(sp)
   1240c:	da000417 	ldw	r8,16(sp)
   12410:	d9800217 	ldw	r6,8(sp)
   12414:	d9400117 	ldw	r5,4(sp)
   12418:	003eb306 	br	11ee8 <__alt_data_end+0xffff1ee8>
   1241c:	d9800017 	ldw	r6,0(sp)
   12420:	a9ab883a 	add	r21,r21,r6
   12424:	a98b803a 	cmpltu	r5,r21,r6
   12428:	2d8b883a 	add	r5,r5,r22
   1242c:	2a11883a 	add	r8,r5,r8
   12430:	897fffc4 	addi	r5,r17,-1
   12434:	b2000c2e 	bgeu	r22,r8,12468 <__divdf3+0x808>
   12438:	41003f36 	bltu	r8,r4,12538 <__divdf3+0x8d8>
   1243c:	22006c26 	beq	r4,r8,125f0 <__divdf3+0x990>
   12440:	4109c83a 	sub	r4,r8,r4
   12444:	2823883a 	mov	r17,r5
   12448:	003f3b06 	br	12138 <__alt_data_end+0xffff2138>
   1244c:	ad3ed336 	bltu	r21,r20,11f9c <__alt_data_end+0xffff1f9c>
   12450:	a804d07a 	srli	r2,r21,1
   12454:	802e97fa 	slli	r23,r16,31
   12458:	a82a97fa 	slli	r21,r21,31
   1245c:	8020d07a 	srli	r16,r16,1
   12460:	b8aeb03a 	or	r23,r23,r2
   12464:	003ed006 	br	11fa8 <__alt_data_end+0xffff1fa8>
   12468:	b23ff51e 	bne	r22,r8,12440 <__alt_data_end+0xffff2440>
   1246c:	d9800017 	ldw	r6,0(sp)
   12470:	a9bff12e 	bgeu	r21,r6,12438 <__alt_data_end+0xffff2438>
   12474:	b109c83a 	sub	r4,r22,r4
   12478:	2823883a 	mov	r17,r5
   1247c:	003f2e06 	br	12138 <__alt_data_end+0xffff2138>
   12480:	2021883a 	mov	r16,r4
   12484:	003eff06 	br	12084 <__alt_data_end+0xffff2084>
   12488:	2023883a 	mov	r17,r4
   1248c:	003ee406 	br	12020 <__alt_data_end+0xffff2020>
   12490:	a8bfe236 	bltu	r21,r2,1241c <__alt_data_end+0xffff241c>
   12494:	0009883a 	mov	r4,zero
   12498:	003f2706 	br	12138 <__alt_data_end+0xffff2138>
   1249c:	81002d36 	bltu	r16,r4,12554 <__divdf3+0x8f4>
   124a0:	24005626 	beq	r4,r16,125fc <__divdf3+0x99c>
   124a4:	2829883a 	mov	r20,r5
   124a8:	003f8006 	br	122ac <__alt_data_end+0xffff22ac>
   124ac:	053fffc4 	movi	r20,-1
   124b0:	003f7f06 	br	122b0 <__alt_data_end+0xffff22b0>
   124b4:	200f883a 	mov	r7,r4
   124b8:	003f3c06 	br	121ac <__alt_data_end+0xffff21ac>
   124bc:	1011883a 	mov	r8,r2
   124c0:	003f5506 	br	12218 <__alt_data_end+0xffff2218>
   124c4:	e027883a 	mov	r19,fp
   124c8:	003f7906 	br	122b0 <__alt_data_end+0xffff22b0>
   124cc:	010007c4 	movi	r4,31
   124d0:	20c02816 	blt	r4,r3,12574 <__divdf3+0x914>
   124d4:	00800804 	movi	r2,32
   124d8:	10c5c83a 	sub	r2,r2,r3
   124dc:	888a983a 	sll	r5,r17,r2
   124e0:	a0c8d83a 	srl	r4,r20,r3
   124e4:	a084983a 	sll	r2,r20,r2
   124e8:	88e2d83a 	srl	r17,r17,r3
   124ec:	2906b03a 	or	r3,r5,r4
   124f0:	1004c03a 	cmpne	r2,r2,zero
   124f4:	1886b03a 	or	r3,r3,r2
   124f8:	188001cc 	andi	r2,r3,7
   124fc:	10000726 	beq	r2,zero,1251c <__divdf3+0x8bc>
   12500:	188003cc 	andi	r2,r3,15
   12504:	01000104 	movi	r4,4
   12508:	11000426 	beq	r2,r4,1251c <__divdf3+0x8bc>
   1250c:	1805883a 	mov	r2,r3
   12510:	10c00104 	addi	r3,r2,4
   12514:	1885803a 	cmpltu	r2,r3,r2
   12518:	88a3883a 	add	r17,r17,r2
   1251c:	8880202c 	andhi	r2,r17,128
   12520:	10002926 	beq	r2,zero,125c8 <__divdf3+0x968>
   12524:	9900004c 	andi	r4,r19,1
   12528:	00800044 	movi	r2,1
   1252c:	0021883a 	mov	r16,zero
   12530:	002b883a 	mov	r21,zero
   12534:	003e2906 	br	11ddc <__alt_data_end+0xffff1ddc>
   12538:	d9800017 	ldw	r6,0(sp)
   1253c:	8c7fff84 	addi	r17,r17,-2
   12540:	a9ab883a 	add	r21,r21,r6
   12544:	a98b803a 	cmpltu	r5,r21,r6
   12548:	2d8b883a 	add	r5,r5,r22
   1254c:	2a11883a 	add	r8,r5,r8
   12550:	003ef806 	br	12134 <__alt_data_end+0xffff2134>
   12554:	d9800017 	ldw	r6,0(sp)
   12558:	318f883a 	add	r7,r6,r6
   1255c:	398b803a 	cmpltu	r5,r7,r6
   12560:	2d8d883a 	add	r6,r5,r22
   12564:	81a1883a 	add	r16,r16,r6
   12568:	a17fff84 	addi	r5,r20,-2
   1256c:	d9c00015 	stw	r7,0(sp)
   12570:	003f8806 	br	12394 <__alt_data_end+0xffff2394>
   12574:	013ff844 	movi	r4,-31
   12578:	2085c83a 	sub	r2,r4,r2
   1257c:	8888d83a 	srl	r4,r17,r2
   12580:	00800804 	movi	r2,32
   12584:	18802126 	beq	r3,r2,1260c <__divdf3+0x9ac>
   12588:	04001004 	movi	r16,64
   1258c:	80c7c83a 	sub	r3,r16,r3
   12590:	88e0983a 	sll	r16,r17,r3
   12594:	8504b03a 	or	r2,r16,r20
   12598:	1004c03a 	cmpne	r2,r2,zero
   1259c:	2084b03a 	or	r2,r4,r2
   125a0:	144001cc 	andi	r17,r2,7
   125a4:	88000d1e 	bne	r17,zero,125dc <__divdf3+0x97c>
   125a8:	0021883a 	mov	r16,zero
   125ac:	102ad0fa 	srli	r21,r2,3
   125b0:	9900004c 	andi	r4,r19,1
   125b4:	0005883a 	mov	r2,zero
   125b8:	ac6ab03a 	or	r21,r21,r17
   125bc:	003e0706 	br	11ddc <__alt_data_end+0xffff1ddc>
   125c0:	1007883a 	mov	r3,r2
   125c4:	0023883a 	mov	r17,zero
   125c8:	8820927a 	slli	r16,r17,9
   125cc:	1805883a 	mov	r2,r3
   125d0:	8822977a 	slli	r17,r17,29
   125d4:	8020d33a 	srli	r16,r16,12
   125d8:	003ff406 	br	125ac <__alt_data_end+0xffff25ac>
   125dc:	10c003cc 	andi	r3,r2,15
   125e0:	01000104 	movi	r4,4
   125e4:	193ff626 	beq	r3,r4,125c0 <__alt_data_end+0xffff25c0>
   125e8:	0023883a 	mov	r17,zero
   125ec:	003fc806 	br	12510 <__alt_data_end+0xffff2510>
   125f0:	a8bfd136 	bltu	r21,r2,12538 <__alt_data_end+0xffff2538>
   125f4:	2823883a 	mov	r17,r5
   125f8:	003fa606 	br	12494 <__alt_data_end+0xffff2494>
   125fc:	d9800017 	ldw	r6,0(sp)
   12600:	30bfd436 	bltu	r6,r2,12554 <__alt_data_end+0xffff2554>
   12604:	2829883a 	mov	r20,r5
   12608:	003f6406 	br	1239c <__alt_data_end+0xffff239c>
   1260c:	0021883a 	mov	r16,zero
   12610:	003fe006 	br	12594 <__alt_data_end+0xffff2594>
   12614:	00800434 	movhi	r2,16
   12618:	8c000234 	orhi	r16,r17,8
   1261c:	10bfffc4 	addi	r2,r2,-1
   12620:	e009883a 	mov	r4,fp
   12624:	80a0703a 	and	r16,r16,r2
   12628:	a02b883a 	mov	r21,r20
   1262c:	003e4e06 	br	11f68 <__alt_data_end+0xffff1f68>

00012630 <__floatsidf>:
   12630:	defffd04 	addi	sp,sp,-12
   12634:	dfc00215 	stw	ra,8(sp)
   12638:	dc400115 	stw	r17,4(sp)
   1263c:	dc000015 	stw	r16,0(sp)
   12640:	20002b26 	beq	r4,zero,126f0 <__floatsidf+0xc0>
   12644:	2023883a 	mov	r17,r4
   12648:	2020d7fa 	srli	r16,r4,31
   1264c:	20002d16 	blt	r4,zero,12704 <__floatsidf+0xd4>
   12650:	8809883a 	mov	r4,r17
   12654:	00129c40 	call	129c4 <__clzsi2>
   12658:	01410784 	movi	r5,1054
   1265c:	288bc83a 	sub	r5,r5,r2
   12660:	01010cc4 	movi	r4,1075
   12664:	2149c83a 	sub	r4,r4,r5
   12668:	00c007c4 	movi	r3,31
   1266c:	1900160e 	bge	r3,r4,126c8 <__floatsidf+0x98>
   12670:	00c104c4 	movi	r3,1043
   12674:	1947c83a 	sub	r3,r3,r5
   12678:	88c6983a 	sll	r3,r17,r3
   1267c:	00800434 	movhi	r2,16
   12680:	10bfffc4 	addi	r2,r2,-1
   12684:	1886703a 	and	r3,r3,r2
   12688:	2941ffcc 	andi	r5,r5,2047
   1268c:	800d883a 	mov	r6,r16
   12690:	0005883a 	mov	r2,zero
   12694:	280a953a 	slli	r5,r5,20
   12698:	31803fcc 	andi	r6,r6,255
   1269c:	01000434 	movhi	r4,16
   126a0:	300c97fa 	slli	r6,r6,31
   126a4:	213fffc4 	addi	r4,r4,-1
   126a8:	1906703a 	and	r3,r3,r4
   126ac:	1946b03a 	or	r3,r3,r5
   126b0:	1986b03a 	or	r3,r3,r6
   126b4:	dfc00217 	ldw	ra,8(sp)
   126b8:	dc400117 	ldw	r17,4(sp)
   126bc:	dc000017 	ldw	r16,0(sp)
   126c0:	dec00304 	addi	sp,sp,12
   126c4:	f800283a 	ret
   126c8:	00c002c4 	movi	r3,11
   126cc:	1887c83a 	sub	r3,r3,r2
   126d0:	88c6d83a 	srl	r3,r17,r3
   126d4:	8904983a 	sll	r2,r17,r4
   126d8:	01000434 	movhi	r4,16
   126dc:	213fffc4 	addi	r4,r4,-1
   126e0:	2941ffcc 	andi	r5,r5,2047
   126e4:	1906703a 	and	r3,r3,r4
   126e8:	800d883a 	mov	r6,r16
   126ec:	003fe906 	br	12694 <__alt_data_end+0xffff2694>
   126f0:	000d883a 	mov	r6,zero
   126f4:	000b883a 	mov	r5,zero
   126f8:	0007883a 	mov	r3,zero
   126fc:	0005883a 	mov	r2,zero
   12700:	003fe406 	br	12694 <__alt_data_end+0xffff2694>
   12704:	0123c83a 	sub	r17,zero,r4
   12708:	003fd106 	br	12650 <__alt_data_end+0xffff2650>

0001270c <__extendsfdf2>:
   1270c:	200ad5fa 	srli	r5,r4,23
   12710:	defffd04 	addi	sp,sp,-12
   12714:	dc400115 	stw	r17,4(sp)
   12718:	29403fcc 	andi	r5,r5,255
   1271c:	29800044 	addi	r6,r5,1
   12720:	04402034 	movhi	r17,128
   12724:	dc000015 	stw	r16,0(sp)
   12728:	8c7fffc4 	addi	r17,r17,-1
   1272c:	dfc00215 	stw	ra,8(sp)
   12730:	31803fcc 	andi	r6,r6,255
   12734:	00800044 	movi	r2,1
   12738:	8922703a 	and	r17,r17,r4
   1273c:	2020d7fa 	srli	r16,r4,31
   12740:	1180110e 	bge	r2,r6,12788 <__extendsfdf2+0x7c>
   12744:	880cd0fa 	srli	r6,r17,3
   12748:	8822977a 	slli	r17,r17,29
   1274c:	2940e004 	addi	r5,r5,896
   12750:	2941ffcc 	andi	r5,r5,2047
   12754:	2804953a 	slli	r2,r5,20
   12758:	01400434 	movhi	r5,16
   1275c:	800697fa 	slli	r3,r16,31
   12760:	297fffc4 	addi	r5,r5,-1
   12764:	314a703a 	and	r5,r6,r5
   12768:	288ab03a 	or	r5,r5,r2
   1276c:	28c6b03a 	or	r3,r5,r3
   12770:	8805883a 	mov	r2,r17
   12774:	dfc00217 	ldw	ra,8(sp)
   12778:	dc400117 	ldw	r17,4(sp)
   1277c:	dc000017 	ldw	r16,0(sp)
   12780:	dec00304 	addi	sp,sp,12
   12784:	f800283a 	ret
   12788:	2800111e 	bne	r5,zero,127d0 <__extendsfdf2+0xc4>
   1278c:	88001c26 	beq	r17,zero,12800 <__extendsfdf2+0xf4>
   12790:	8809883a 	mov	r4,r17
   12794:	00129c40 	call	129c4 <__clzsi2>
   12798:	00c00284 	movi	r3,10
   1279c:	18801b16 	blt	r3,r2,1280c <__extendsfdf2+0x100>
   127a0:	018002c4 	movi	r6,11
   127a4:	308dc83a 	sub	r6,r6,r2
   127a8:	11000544 	addi	r4,r2,21
   127ac:	8986d83a 	srl	r3,r17,r6
   127b0:	8922983a 	sll	r17,r17,r4
   127b4:	0180e244 	movi	r6,905
   127b8:	01400434 	movhi	r5,16
   127bc:	3085c83a 	sub	r2,r6,r2
   127c0:	297fffc4 	addi	r5,r5,-1
   127c4:	194c703a 	and	r6,r3,r5
   127c8:	1141ffcc 	andi	r5,r2,2047
   127cc:	003fe006 	br	12750 <__alt_data_end+0xffff2750>
   127d0:	88000826 	beq	r17,zero,127f4 <__extendsfdf2+0xe8>
   127d4:	880cd0fa 	srli	r6,r17,3
   127d8:	00800434 	movhi	r2,16
   127dc:	10bfffc4 	addi	r2,r2,-1
   127e0:	31800234 	orhi	r6,r6,8
   127e4:	8822977a 	slli	r17,r17,29
   127e8:	308c703a 	and	r6,r6,r2
   127ec:	0141ffc4 	movi	r5,2047
   127f0:	003fd706 	br	12750 <__alt_data_end+0xffff2750>
   127f4:	0141ffc4 	movi	r5,2047
   127f8:	000d883a 	mov	r6,zero
   127fc:	003fd406 	br	12750 <__alt_data_end+0xffff2750>
   12800:	000b883a 	mov	r5,zero
   12804:	000d883a 	mov	r6,zero
   12808:	003fd106 	br	12750 <__alt_data_end+0xffff2750>
   1280c:	11bffd44 	addi	r6,r2,-11
   12810:	8986983a 	sll	r3,r17,r6
   12814:	0023883a 	mov	r17,zero
   12818:	003fe606 	br	127b4 <__alt_data_end+0xffff27b4>

0001281c <__truncdfsf2>:
   1281c:	2810d53a 	srli	r8,r5,20
   12820:	01c00434 	movhi	r7,16
   12824:	39ffffc4 	addi	r7,r7,-1
   12828:	29ce703a 	and	r7,r5,r7
   1282c:	4201ffcc 	andi	r8,r8,2047
   12830:	380e90fa 	slli	r7,r7,3
   12834:	200cd77a 	srli	r6,r4,29
   12838:	42400044 	addi	r9,r8,1
   1283c:	4a41ffcc 	andi	r9,r9,2047
   12840:	00c00044 	movi	r3,1
   12844:	280ad7fa 	srli	r5,r5,31
   12848:	31ceb03a 	or	r7,r6,r7
   1284c:	200490fa 	slli	r2,r4,3
   12850:	1a40230e 	bge	r3,r9,128e0 <__truncdfsf2+0xc4>
   12854:	40ff2004 	addi	r3,r8,-896
   12858:	01803f84 	movi	r6,254
   1285c:	30c01516 	blt	r6,r3,128b4 <__truncdfsf2+0x98>
   12860:	00c0380e 	bge	zero,r3,12944 <__truncdfsf2+0x128>
   12864:	200c91ba 	slli	r6,r4,6
   12868:	380e90fa 	slli	r7,r7,3
   1286c:	1004d77a 	srli	r2,r2,29
   12870:	300cc03a 	cmpne	r6,r6,zero
   12874:	31ccb03a 	or	r6,r6,r7
   12878:	308cb03a 	or	r6,r6,r2
   1287c:	308001cc 	andi	r2,r6,7
   12880:	10000426 	beq	r2,zero,12894 <__truncdfsf2+0x78>
   12884:	308003cc 	andi	r2,r6,15
   12888:	01000104 	movi	r4,4
   1288c:	11000126 	beq	r2,r4,12894 <__truncdfsf2+0x78>
   12890:	31800104 	addi	r6,r6,4
   12894:	3081002c 	andhi	r2,r6,1024
   12898:	10001626 	beq	r2,zero,128f4 <__truncdfsf2+0xd8>
   1289c:	18c00044 	addi	r3,r3,1
   128a0:	00803fc4 	movi	r2,255
   128a4:	18800326 	beq	r3,r2,128b4 <__truncdfsf2+0x98>
   128a8:	300c91ba 	slli	r6,r6,6
   128ac:	300cd27a 	srli	r6,r6,9
   128b0:	00000206 	br	128bc <__truncdfsf2+0xa0>
   128b4:	00ffffc4 	movi	r3,-1
   128b8:	000d883a 	mov	r6,zero
   128bc:	18c03fcc 	andi	r3,r3,255
   128c0:	180895fa 	slli	r4,r3,23
   128c4:	00c02034 	movhi	r3,128
   128c8:	280a97fa 	slli	r5,r5,31
   128cc:	18ffffc4 	addi	r3,r3,-1
   128d0:	30c6703a 	and	r3,r6,r3
   128d4:	1906b03a 	or	r3,r3,r4
   128d8:	1944b03a 	or	r2,r3,r5
   128dc:	f800283a 	ret
   128e0:	40000b1e 	bne	r8,zero,12910 <__truncdfsf2+0xf4>
   128e4:	388cb03a 	or	r6,r7,r2
   128e8:	0007883a 	mov	r3,zero
   128ec:	30000426 	beq	r6,zero,12900 <__truncdfsf2+0xe4>
   128f0:	01800144 	movi	r6,5
   128f4:	00803fc4 	movi	r2,255
   128f8:	300cd0fa 	srli	r6,r6,3
   128fc:	18800a26 	beq	r3,r2,12928 <__truncdfsf2+0x10c>
   12900:	00802034 	movhi	r2,128
   12904:	10bfffc4 	addi	r2,r2,-1
   12908:	308c703a 	and	r6,r6,r2
   1290c:	003feb06 	br	128bc <__alt_data_end+0xffff28bc>
   12910:	3888b03a 	or	r4,r7,r2
   12914:	203fe726 	beq	r4,zero,128b4 <__alt_data_end+0xffff28b4>
   12918:	380c90fa 	slli	r6,r7,3
   1291c:	00c03fc4 	movi	r3,255
   12920:	31808034 	orhi	r6,r6,512
   12924:	003fd506 	br	1287c <__alt_data_end+0xffff287c>
   12928:	303fe226 	beq	r6,zero,128b4 <__alt_data_end+0xffff28b4>
   1292c:	00802034 	movhi	r2,128
   12930:	31801034 	orhi	r6,r6,64
   12934:	10bfffc4 	addi	r2,r2,-1
   12938:	00ffffc4 	movi	r3,-1
   1293c:	308c703a 	and	r6,r6,r2
   12940:	003fde06 	br	128bc <__alt_data_end+0xffff28bc>
   12944:	013ffa44 	movi	r4,-23
   12948:	19000e16 	blt	r3,r4,12984 <__truncdfsf2+0x168>
   1294c:	01000784 	movi	r4,30
   12950:	20c9c83a 	sub	r4,r4,r3
   12954:	018007c4 	movi	r6,31
   12958:	39c02034 	orhi	r7,r7,128
   1295c:	31000b16 	blt	r6,r4,1298c <__truncdfsf2+0x170>
   12960:	423f2084 	addi	r8,r8,-894
   12964:	120c983a 	sll	r6,r2,r8
   12968:	3a0e983a 	sll	r7,r7,r8
   1296c:	1104d83a 	srl	r2,r2,r4
   12970:	300cc03a 	cmpne	r6,r6,zero
   12974:	31ceb03a 	or	r7,r6,r7
   12978:	388cb03a 	or	r6,r7,r2
   1297c:	0007883a 	mov	r3,zero
   12980:	003fbe06 	br	1287c <__alt_data_end+0xffff287c>
   12984:	0007883a 	mov	r3,zero
   12988:	003fd906 	br	128f0 <__alt_data_end+0xffff28f0>
   1298c:	01bfff84 	movi	r6,-2
   12990:	30cdc83a 	sub	r6,r6,r3
   12994:	00c00804 	movi	r3,32
   12998:	398cd83a 	srl	r6,r7,r6
   1299c:	20c00726 	beq	r4,r3,129bc <__truncdfsf2+0x1a0>
   129a0:	423f2884 	addi	r8,r8,-862
   129a4:	3a0e983a 	sll	r7,r7,r8
   129a8:	3884b03a 	or	r2,r7,r2
   129ac:	1004c03a 	cmpne	r2,r2,zero
   129b0:	118cb03a 	or	r6,r2,r6
   129b4:	0007883a 	mov	r3,zero
   129b8:	003fb006 	br	1287c <__alt_data_end+0xffff287c>
   129bc:	000f883a 	mov	r7,zero
   129c0:	003ff906 	br	129a8 <__alt_data_end+0xffff29a8>

000129c4 <__clzsi2>:
   129c4:	00bfffd4 	movui	r2,65535
   129c8:	11000536 	bltu	r2,r4,129e0 <__clzsi2+0x1c>
   129cc:	00803fc4 	movi	r2,255
   129d0:	11000f36 	bltu	r2,r4,12a10 <__clzsi2+0x4c>
   129d4:	00800804 	movi	r2,32
   129d8:	0007883a 	mov	r3,zero
   129dc:	00000506 	br	129f4 <__clzsi2+0x30>
   129e0:	00804034 	movhi	r2,256
   129e4:	10bfffc4 	addi	r2,r2,-1
   129e8:	11000c2e 	bgeu	r2,r4,12a1c <__clzsi2+0x58>
   129ec:	00800204 	movi	r2,8
   129f0:	00c00604 	movi	r3,24
   129f4:	20c8d83a 	srl	r4,r4,r3
   129f8:	00c00074 	movhi	r3,1
   129fc:	18cdc704 	addi	r3,r3,14108
   12a00:	1909883a 	add	r4,r3,r4
   12a04:	20c00003 	ldbu	r3,0(r4)
   12a08:	10c5c83a 	sub	r2,r2,r3
   12a0c:	f800283a 	ret
   12a10:	00800604 	movi	r2,24
   12a14:	00c00204 	movi	r3,8
   12a18:	003ff606 	br	129f4 <__alt_data_end+0xffff29f4>
   12a1c:	00800404 	movi	r2,16
   12a20:	1007883a 	mov	r3,r2
   12a24:	003ff306 	br	129f4 <__alt_data_end+0xffff29f4>

00012a28 <__divsi3>:
   12a28:	20001b16 	blt	r4,zero,12a98 <__divsi3+0x70>
   12a2c:	000f883a 	mov	r7,zero
   12a30:	28001616 	blt	r5,zero,12a8c <__divsi3+0x64>
   12a34:	200d883a 	mov	r6,r4
   12a38:	29001a2e 	bgeu	r5,r4,12aa4 <__divsi3+0x7c>
   12a3c:	00800804 	movi	r2,32
   12a40:	00c00044 	movi	r3,1
   12a44:	00000106 	br	12a4c <__divsi3+0x24>
   12a48:	10000d26 	beq	r2,zero,12a80 <__divsi3+0x58>
   12a4c:	294b883a 	add	r5,r5,r5
   12a50:	10bfffc4 	addi	r2,r2,-1
   12a54:	18c7883a 	add	r3,r3,r3
   12a58:	293ffb36 	bltu	r5,r4,12a48 <__alt_data_end+0xffff2a48>
   12a5c:	0005883a 	mov	r2,zero
   12a60:	18000726 	beq	r3,zero,12a80 <__divsi3+0x58>
   12a64:	0005883a 	mov	r2,zero
   12a68:	31400236 	bltu	r6,r5,12a74 <__divsi3+0x4c>
   12a6c:	314dc83a 	sub	r6,r6,r5
   12a70:	10c4b03a 	or	r2,r2,r3
   12a74:	1806d07a 	srli	r3,r3,1
   12a78:	280ad07a 	srli	r5,r5,1
   12a7c:	183ffa1e 	bne	r3,zero,12a68 <__alt_data_end+0xffff2a68>
   12a80:	38000126 	beq	r7,zero,12a88 <__divsi3+0x60>
   12a84:	0085c83a 	sub	r2,zero,r2
   12a88:	f800283a 	ret
   12a8c:	014bc83a 	sub	r5,zero,r5
   12a90:	39c0005c 	xori	r7,r7,1
   12a94:	003fe706 	br	12a34 <__alt_data_end+0xffff2a34>
   12a98:	0109c83a 	sub	r4,zero,r4
   12a9c:	01c00044 	movi	r7,1
   12aa0:	003fe306 	br	12a30 <__alt_data_end+0xffff2a30>
   12aa4:	00c00044 	movi	r3,1
   12aa8:	003fee06 	br	12a64 <__alt_data_end+0xffff2a64>

00012aac <__modsi3>:
   12aac:	20001716 	blt	r4,zero,12b0c <__modsi3+0x60>
   12ab0:	000f883a 	mov	r7,zero
   12ab4:	2005883a 	mov	r2,r4
   12ab8:	28001216 	blt	r5,zero,12b04 <__modsi3+0x58>
   12abc:	2900162e 	bgeu	r5,r4,12b18 <__modsi3+0x6c>
   12ac0:	01800804 	movi	r6,32
   12ac4:	00c00044 	movi	r3,1
   12ac8:	00000106 	br	12ad0 <__modsi3+0x24>
   12acc:	30000a26 	beq	r6,zero,12af8 <__modsi3+0x4c>
   12ad0:	294b883a 	add	r5,r5,r5
   12ad4:	31bfffc4 	addi	r6,r6,-1
   12ad8:	18c7883a 	add	r3,r3,r3
   12adc:	293ffb36 	bltu	r5,r4,12acc <__alt_data_end+0xffff2acc>
   12ae0:	18000526 	beq	r3,zero,12af8 <__modsi3+0x4c>
   12ae4:	1806d07a 	srli	r3,r3,1
   12ae8:	11400136 	bltu	r2,r5,12af0 <__modsi3+0x44>
   12aec:	1145c83a 	sub	r2,r2,r5
   12af0:	280ad07a 	srli	r5,r5,1
   12af4:	183ffb1e 	bne	r3,zero,12ae4 <__alt_data_end+0xffff2ae4>
   12af8:	38000126 	beq	r7,zero,12b00 <__modsi3+0x54>
   12afc:	0085c83a 	sub	r2,zero,r2
   12b00:	f800283a 	ret
   12b04:	014bc83a 	sub	r5,zero,r5
   12b08:	003fec06 	br	12abc <__alt_data_end+0xffff2abc>
   12b0c:	0109c83a 	sub	r4,zero,r4
   12b10:	01c00044 	movi	r7,1
   12b14:	003fe706 	br	12ab4 <__alt_data_end+0xffff2ab4>
   12b18:	00c00044 	movi	r3,1
   12b1c:	003ff106 	br	12ae4 <__alt_data_end+0xffff2ae4>

00012b20 <__udivsi3>:
   12b20:	200d883a 	mov	r6,r4
   12b24:	2900152e 	bgeu	r5,r4,12b7c <__udivsi3+0x5c>
   12b28:	28001416 	blt	r5,zero,12b7c <__udivsi3+0x5c>
   12b2c:	00800804 	movi	r2,32
   12b30:	00c00044 	movi	r3,1
   12b34:	00000206 	br	12b40 <__udivsi3+0x20>
   12b38:	10000e26 	beq	r2,zero,12b74 <__udivsi3+0x54>
   12b3c:	28000516 	blt	r5,zero,12b54 <__udivsi3+0x34>
   12b40:	294b883a 	add	r5,r5,r5
   12b44:	10bfffc4 	addi	r2,r2,-1
   12b48:	18c7883a 	add	r3,r3,r3
   12b4c:	293ffa36 	bltu	r5,r4,12b38 <__alt_data_end+0xffff2b38>
   12b50:	18000826 	beq	r3,zero,12b74 <__udivsi3+0x54>
   12b54:	0005883a 	mov	r2,zero
   12b58:	31400236 	bltu	r6,r5,12b64 <__udivsi3+0x44>
   12b5c:	314dc83a 	sub	r6,r6,r5
   12b60:	10c4b03a 	or	r2,r2,r3
   12b64:	1806d07a 	srli	r3,r3,1
   12b68:	280ad07a 	srli	r5,r5,1
   12b6c:	183ffa1e 	bne	r3,zero,12b58 <__alt_data_end+0xffff2b58>
   12b70:	f800283a 	ret
   12b74:	0005883a 	mov	r2,zero
   12b78:	f800283a 	ret
   12b7c:	00c00044 	movi	r3,1
   12b80:	003ff406 	br	12b54 <__alt_data_end+0xffff2b54>

00012b84 <__umodsi3>:
   12b84:	2005883a 	mov	r2,r4
   12b88:	2900122e 	bgeu	r5,r4,12bd4 <__umodsi3+0x50>
   12b8c:	28001116 	blt	r5,zero,12bd4 <__umodsi3+0x50>
   12b90:	01800804 	movi	r6,32
   12b94:	00c00044 	movi	r3,1
   12b98:	00000206 	br	12ba4 <__umodsi3+0x20>
   12b9c:	30000c26 	beq	r6,zero,12bd0 <__umodsi3+0x4c>
   12ba0:	28000516 	blt	r5,zero,12bb8 <__umodsi3+0x34>
   12ba4:	294b883a 	add	r5,r5,r5
   12ba8:	31bfffc4 	addi	r6,r6,-1
   12bac:	18c7883a 	add	r3,r3,r3
   12bb0:	293ffa36 	bltu	r5,r4,12b9c <__alt_data_end+0xffff2b9c>
   12bb4:	18000626 	beq	r3,zero,12bd0 <__umodsi3+0x4c>
   12bb8:	1806d07a 	srli	r3,r3,1
   12bbc:	11400136 	bltu	r2,r5,12bc4 <__umodsi3+0x40>
   12bc0:	1145c83a 	sub	r2,r2,r5
   12bc4:	280ad07a 	srli	r5,r5,1
   12bc8:	183ffb1e 	bne	r3,zero,12bb8 <__alt_data_end+0xffff2bb8>
   12bcc:	f800283a 	ret
   12bd0:	f800283a 	ret
   12bd4:	00c00044 	movi	r3,1
   12bd8:	003ff706 	br	12bb8 <__alt_data_end+0xffff2bb8>

00012bdc <__mulsi3>:
   12bdc:	0005883a 	mov	r2,zero
   12be0:	20000726 	beq	r4,zero,12c00 <__mulsi3+0x24>
   12be4:	20c0004c 	andi	r3,r4,1
   12be8:	2008d07a 	srli	r4,r4,1
   12bec:	18000126 	beq	r3,zero,12bf4 <__mulsi3+0x18>
   12bf0:	1145883a 	add	r2,r2,r5
   12bf4:	294b883a 	add	r5,r5,r5
   12bf8:	203ffa1e 	bne	r4,zero,12be4 <__alt_data_end+0xffff2be4>
   12bfc:	f800283a 	ret
   12c00:	f800283a 	ret

00012c04 <_printf_r>:
   12c04:	defffd04 	addi	sp,sp,-12
   12c08:	dfc00015 	stw	ra,0(sp)
   12c0c:	d9800115 	stw	r6,4(sp)
   12c10:	d9c00215 	stw	r7,8(sp)
   12c14:	20c00217 	ldw	r3,8(r4)
   12c18:	01800074 	movhi	r6,1
   12c1c:	318cbc04 	addi	r6,r6,13040
   12c20:	19800115 	stw	r6,4(r3)
   12c24:	280d883a 	mov	r6,r5
   12c28:	21400217 	ldw	r5,8(r4)
   12c2c:	d9c00104 	addi	r7,sp,4
   12c30:	0012da80 	call	12da8 <___vfprintf_internal_r>
   12c34:	dfc00017 	ldw	ra,0(sp)
   12c38:	dec00304 	addi	sp,sp,12
   12c3c:	f800283a 	ret

00012c40 <printf>:
   12c40:	defffc04 	addi	sp,sp,-16
   12c44:	dfc00015 	stw	ra,0(sp)
   12c48:	d9400115 	stw	r5,4(sp)
   12c4c:	d9800215 	stw	r6,8(sp)
   12c50:	d9c00315 	stw	r7,12(sp)
   12c54:	00800074 	movhi	r2,1
   12c58:	108e4004 	addi	r2,r2,14592
   12c5c:	10800017 	ldw	r2,0(r2)
   12c60:	01400074 	movhi	r5,1
   12c64:	294cbc04 	addi	r5,r5,13040
   12c68:	10c00217 	ldw	r3,8(r2)
   12c6c:	d9800104 	addi	r6,sp,4
   12c70:	19400115 	stw	r5,4(r3)
   12c74:	200b883a 	mov	r5,r4
   12c78:	11000217 	ldw	r4,8(r2)
   12c7c:	00132d40 	call	132d4 <__vfprintf_internal>
   12c80:	dfc00017 	ldw	ra,0(sp)
   12c84:	dec00404 	addi	sp,sp,16
   12c88:	f800283a 	ret

00012c8c <_puts_r>:
   12c8c:	defffd04 	addi	sp,sp,-12
   12c90:	dc000015 	stw	r16,0(sp)
   12c94:	2021883a 	mov	r16,r4
   12c98:	2809883a 	mov	r4,r5
   12c9c:	dfc00215 	stw	ra,8(sp)
   12ca0:	dc400115 	stw	r17,4(sp)
   12ca4:	2823883a 	mov	r17,r5
   12ca8:	0012d200 	call	12d20 <strlen>
   12cac:	81400217 	ldw	r5,8(r16)
   12cb0:	01000074 	movhi	r4,1
   12cb4:	210cbc04 	addi	r4,r4,13040
   12cb8:	29000115 	stw	r4,4(r5)
   12cbc:	100f883a 	mov	r7,r2
   12cc0:	880d883a 	mov	r6,r17
   12cc4:	8009883a 	mov	r4,r16
   12cc8:	00132f00 	call	132f0 <__sfvwrite_small_dev>
   12ccc:	00ffffc4 	movi	r3,-1
   12cd0:	10c00926 	beq	r2,r3,12cf8 <_puts_r+0x6c>
   12cd4:	81400217 	ldw	r5,8(r16)
   12cd8:	01800074 	movhi	r6,1
   12cdc:	01c00044 	movi	r7,1
   12ce0:	28800117 	ldw	r2,4(r5)
   12ce4:	318dae04 	addi	r6,r6,14008
   12ce8:	8009883a 	mov	r4,r16
   12cec:	103ee83a 	callr	r2
   12cf0:	10bfffe0 	cmpeqi	r2,r2,-1
   12cf4:	0085c83a 	sub	r2,zero,r2
   12cf8:	dfc00217 	ldw	ra,8(sp)
   12cfc:	dc400117 	ldw	r17,4(sp)
   12d00:	dc000017 	ldw	r16,0(sp)
   12d04:	dec00304 	addi	sp,sp,12
   12d08:	f800283a 	ret

00012d0c <puts>:
   12d0c:	00800074 	movhi	r2,1
   12d10:	108e4004 	addi	r2,r2,14592
   12d14:	200b883a 	mov	r5,r4
   12d18:	11000017 	ldw	r4,0(r2)
   12d1c:	0012c8c1 	jmpi	12c8c <_puts_r>

00012d20 <strlen>:
   12d20:	2005883a 	mov	r2,r4
   12d24:	10c00007 	ldb	r3,0(r2)
   12d28:	18000226 	beq	r3,zero,12d34 <strlen+0x14>
   12d2c:	10800044 	addi	r2,r2,1
   12d30:	003ffc06 	br	12d24 <__alt_data_end+0xffff2d24>
   12d34:	1105c83a 	sub	r2,r2,r4
   12d38:	f800283a 	ret

00012d3c <print_repeat>:
   12d3c:	defffb04 	addi	sp,sp,-20
   12d40:	dc800315 	stw	r18,12(sp)
   12d44:	dc400215 	stw	r17,8(sp)
   12d48:	dc000115 	stw	r16,4(sp)
   12d4c:	dfc00415 	stw	ra,16(sp)
   12d50:	2025883a 	mov	r18,r4
   12d54:	2823883a 	mov	r17,r5
   12d58:	d9800005 	stb	r6,0(sp)
   12d5c:	3821883a 	mov	r16,r7
   12d60:	04000a0e 	bge	zero,r16,12d8c <print_repeat+0x50>
   12d64:	88800117 	ldw	r2,4(r17)
   12d68:	01c00044 	movi	r7,1
   12d6c:	d80d883a 	mov	r6,sp
   12d70:	880b883a 	mov	r5,r17
   12d74:	9009883a 	mov	r4,r18
   12d78:	103ee83a 	callr	r2
   12d7c:	843fffc4 	addi	r16,r16,-1
   12d80:	103ff726 	beq	r2,zero,12d60 <__alt_data_end+0xffff2d60>
   12d84:	00bfffc4 	movi	r2,-1
   12d88:	00000106 	br	12d90 <print_repeat+0x54>
   12d8c:	0005883a 	mov	r2,zero
   12d90:	dfc00417 	ldw	ra,16(sp)
   12d94:	dc800317 	ldw	r18,12(sp)
   12d98:	dc400217 	ldw	r17,8(sp)
   12d9c:	dc000117 	ldw	r16,4(sp)
   12da0:	dec00504 	addi	sp,sp,20
   12da4:	f800283a 	ret

00012da8 <___vfprintf_internal_r>:
   12da8:	deffe504 	addi	sp,sp,-108
   12dac:	d8c00804 	addi	r3,sp,32
   12db0:	ddc01815 	stw	r23,96(sp)
   12db4:	dd801715 	stw	r22,92(sp)
   12db8:	dd401615 	stw	r21,88(sp)
   12dbc:	dd001515 	stw	r20,84(sp)
   12dc0:	dcc01415 	stw	r19,80(sp)
   12dc4:	dc801315 	stw	r18,76(sp)
   12dc8:	dc401215 	stw	r17,72(sp)
   12dcc:	dc001115 	stw	r16,68(sp)
   12dd0:	dfc01a15 	stw	ra,104(sp)
   12dd4:	df001915 	stw	fp,100(sp)
   12dd8:	2029883a 	mov	r20,r4
   12ddc:	2823883a 	mov	r17,r5
   12de0:	382d883a 	mov	r22,r7
   12de4:	d9800f15 	stw	r6,60(sp)
   12de8:	0021883a 	mov	r16,zero
   12dec:	d8000e15 	stw	zero,56(sp)
   12df0:	d8000a15 	stw	zero,40(sp)
   12df4:	002b883a 	mov	r21,zero
   12df8:	0027883a 	mov	r19,zero
   12dfc:	0025883a 	mov	r18,zero
   12e00:	d8000c15 	stw	zero,48(sp)
   12e04:	d8000b15 	stw	zero,44(sp)
   12e08:	002f883a 	mov	r23,zero
   12e0c:	d8c00915 	stw	r3,36(sp)
   12e10:	d8c00f17 	ldw	r3,60(sp)
   12e14:	19000003 	ldbu	r4,0(r3)
   12e18:	20803fcc 	andi	r2,r4,255
   12e1c:	1080201c 	xori	r2,r2,128
   12e20:	10bfe004 	addi	r2,r2,-128
   12e24:	10011e26 	beq	r2,zero,132a0 <___vfprintf_internal_r+0x4f8>
   12e28:	00c00044 	movi	r3,1
   12e2c:	b8c01426 	beq	r23,r3,12e80 <___vfprintf_internal_r+0xd8>
   12e30:	1dc00216 	blt	r3,r23,12e3c <___vfprintf_internal_r+0x94>
   12e34:	b8000626 	beq	r23,zero,12e50 <___vfprintf_internal_r+0xa8>
   12e38:	00011506 	br	13290 <___vfprintf_internal_r+0x4e8>
   12e3c:	01400084 	movi	r5,2
   12e40:	b9401d26 	beq	r23,r5,12eb8 <___vfprintf_internal_r+0x110>
   12e44:	014000c4 	movi	r5,3
   12e48:	b9402b26 	beq	r23,r5,12ef8 <___vfprintf_internal_r+0x150>
   12e4c:	00011006 	br	13290 <___vfprintf_internal_r+0x4e8>
   12e50:	01400944 	movi	r5,37
   12e54:	1140fc26 	beq	r2,r5,13248 <___vfprintf_internal_r+0x4a0>
   12e58:	88800117 	ldw	r2,4(r17)
   12e5c:	d9000005 	stb	r4,0(sp)
   12e60:	01c00044 	movi	r7,1
   12e64:	d80d883a 	mov	r6,sp
   12e68:	880b883a 	mov	r5,r17
   12e6c:	a009883a 	mov	r4,r20
   12e70:	103ee83a 	callr	r2
   12e74:	1000d81e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   12e78:	84000044 	addi	r16,r16,1
   12e7c:	00010406 	br	13290 <___vfprintf_internal_r+0x4e8>
   12e80:	01400c04 	movi	r5,48
   12e84:	1140fa26 	beq	r2,r5,13270 <___vfprintf_internal_r+0x4c8>
   12e88:	01400944 	movi	r5,37
   12e8c:	11400a1e 	bne	r2,r5,12eb8 <___vfprintf_internal_r+0x110>
   12e90:	d8800005 	stb	r2,0(sp)
   12e94:	88800117 	ldw	r2,4(r17)
   12e98:	b80f883a 	mov	r7,r23
   12e9c:	d80d883a 	mov	r6,sp
   12ea0:	880b883a 	mov	r5,r17
   12ea4:	a009883a 	mov	r4,r20
   12ea8:	103ee83a 	callr	r2
   12eac:	1000ca1e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   12eb0:	84000044 	addi	r16,r16,1
   12eb4:	0000f506 	br	1328c <___vfprintf_internal_r+0x4e4>
   12eb8:	25fff404 	addi	r23,r4,-48
   12ebc:	bdc03fcc 	andi	r23,r23,255
   12ec0:	00c00244 	movi	r3,9
   12ec4:	1dc00936 	bltu	r3,r23,12eec <___vfprintf_internal_r+0x144>
   12ec8:	00bfffc4 	movi	r2,-1
   12ecc:	90800426 	beq	r18,r2,12ee0 <___vfprintf_internal_r+0x138>
   12ed0:	01400284 	movi	r5,10
   12ed4:	9009883a 	mov	r4,r18
   12ed8:	0012bdc0 	call	12bdc <__mulsi3>
   12edc:	00000106 	br	12ee4 <___vfprintf_internal_r+0x13c>
   12ee0:	0005883a 	mov	r2,zero
   12ee4:	b8a5883a 	add	r18,r23,r2
   12ee8:	0000e206 	br	13274 <___vfprintf_internal_r+0x4cc>
   12eec:	01400b84 	movi	r5,46
   12ef0:	1140e426 	beq	r2,r5,13284 <___vfprintf_internal_r+0x4dc>
   12ef4:	05c00084 	movi	r23,2
   12ef8:	213ff404 	addi	r4,r4,-48
   12efc:	27003fcc 	andi	fp,r4,255
   12f00:	00c00244 	movi	r3,9
   12f04:	1f000936 	bltu	r3,fp,12f2c <___vfprintf_internal_r+0x184>
   12f08:	00bfffc4 	movi	r2,-1
   12f0c:	98800426 	beq	r19,r2,12f20 <___vfprintf_internal_r+0x178>
   12f10:	01400284 	movi	r5,10
   12f14:	9809883a 	mov	r4,r19
   12f18:	0012bdc0 	call	12bdc <__mulsi3>
   12f1c:	00000106 	br	12f24 <___vfprintf_internal_r+0x17c>
   12f20:	0005883a 	mov	r2,zero
   12f24:	e0a7883a 	add	r19,fp,r2
   12f28:	0000d906 	br	13290 <___vfprintf_internal_r+0x4e8>
   12f2c:	00c01b04 	movi	r3,108
   12f30:	10c0d226 	beq	r2,r3,1327c <___vfprintf_internal_r+0x4d4>
   12f34:	013fffc4 	movi	r4,-1
   12f38:	99000226 	beq	r19,r4,12f44 <___vfprintf_internal_r+0x19c>
   12f3c:	d8000b15 	stw	zero,44(sp)
   12f40:	00000106 	br	12f48 <___vfprintf_internal_r+0x1a0>
   12f44:	04c00044 	movi	r19,1
   12f48:	01001a44 	movi	r4,105
   12f4c:	11001626 	beq	r2,r4,12fa8 <___vfprintf_internal_r+0x200>
   12f50:	20800916 	blt	r4,r2,12f78 <___vfprintf_internal_r+0x1d0>
   12f54:	010018c4 	movi	r4,99
   12f58:	11008826 	beq	r2,r4,1317c <___vfprintf_internal_r+0x3d4>
   12f5c:	01001904 	movi	r4,100
   12f60:	11001126 	beq	r2,r4,12fa8 <___vfprintf_internal_r+0x200>
   12f64:	01001604 	movi	r4,88
   12f68:	1100c81e 	bne	r2,r4,1328c <___vfprintf_internal_r+0x4e4>
   12f6c:	00c00044 	movi	r3,1
   12f70:	d8c00e15 	stw	r3,56(sp)
   12f74:	00001506 	br	12fcc <___vfprintf_internal_r+0x224>
   12f78:	01001cc4 	movi	r4,115
   12f7c:	11009826 	beq	r2,r4,131e0 <___vfprintf_internal_r+0x438>
   12f80:	20800416 	blt	r4,r2,12f94 <___vfprintf_internal_r+0x1ec>
   12f84:	01001bc4 	movi	r4,111
   12f88:	1100c01e 	bne	r2,r4,1328c <___vfprintf_internal_r+0x4e4>
   12f8c:	05400204 	movi	r21,8
   12f90:	00000f06 	br	12fd0 <___vfprintf_internal_r+0x228>
   12f94:	01001d44 	movi	r4,117
   12f98:	11000d26 	beq	r2,r4,12fd0 <___vfprintf_internal_r+0x228>
   12f9c:	01001e04 	movi	r4,120
   12fa0:	11000a26 	beq	r2,r4,12fcc <___vfprintf_internal_r+0x224>
   12fa4:	0000b906 	br	1328c <___vfprintf_internal_r+0x4e4>
   12fa8:	d8c00a17 	ldw	r3,40(sp)
   12fac:	b7000104 	addi	fp,r22,4
   12fb0:	18000726 	beq	r3,zero,12fd0 <___vfprintf_internal_r+0x228>
   12fb4:	df000d15 	stw	fp,52(sp)
   12fb8:	b5c00017 	ldw	r23,0(r22)
   12fbc:	b800080e 	bge	r23,zero,12fe0 <___vfprintf_internal_r+0x238>
   12fc0:	05efc83a 	sub	r23,zero,r23
   12fc4:	02400044 	movi	r9,1
   12fc8:	00000606 	br	12fe4 <___vfprintf_internal_r+0x23c>
   12fcc:	05400404 	movi	r21,16
   12fd0:	b0c00104 	addi	r3,r22,4
   12fd4:	d8c00d15 	stw	r3,52(sp)
   12fd8:	b5c00017 	ldw	r23,0(r22)
   12fdc:	d8000a15 	stw	zero,40(sp)
   12fe0:	0013883a 	mov	r9,zero
   12fe4:	d839883a 	mov	fp,sp
   12fe8:	b8001726 	beq	r23,zero,13048 <___vfprintf_internal_r+0x2a0>
   12fec:	a80b883a 	mov	r5,r21
   12ff0:	b809883a 	mov	r4,r23
   12ff4:	da401015 	stw	r9,64(sp)
   12ff8:	0012b200 	call	12b20 <__udivsi3>
   12ffc:	a80b883a 	mov	r5,r21
   13000:	1009883a 	mov	r4,r2
   13004:	102d883a 	mov	r22,r2
   13008:	0012bdc0 	call	12bdc <__mulsi3>
   1300c:	b885c83a 	sub	r2,r23,r2
   13010:	00c00244 	movi	r3,9
   13014:	da401017 	ldw	r9,64(sp)
   13018:	18800216 	blt	r3,r2,13024 <___vfprintf_internal_r+0x27c>
   1301c:	10800c04 	addi	r2,r2,48
   13020:	00000506 	br	13038 <___vfprintf_internal_r+0x290>
   13024:	d8c00e17 	ldw	r3,56(sp)
   13028:	18000226 	beq	r3,zero,13034 <___vfprintf_internal_r+0x28c>
   1302c:	10800dc4 	addi	r2,r2,55
   13030:	00000106 	br	13038 <___vfprintf_internal_r+0x290>
   13034:	108015c4 	addi	r2,r2,87
   13038:	e0800005 	stb	r2,0(fp)
   1303c:	b02f883a 	mov	r23,r22
   13040:	e7000044 	addi	fp,fp,1
   13044:	003fe806 	br	12fe8 <__alt_data_end+0xffff2fe8>
   13048:	e6efc83a 	sub	r23,fp,sp
   1304c:	9dc5c83a 	sub	r2,r19,r23
   13050:	0080090e 	bge	zero,r2,13078 <___vfprintf_internal_r+0x2d0>
   13054:	e085883a 	add	r2,fp,r2
   13058:	01400c04 	movi	r5,48
   1305c:	d8c00917 	ldw	r3,36(sp)
   13060:	e009883a 	mov	r4,fp
   13064:	e0c0032e 	bgeu	fp,r3,13074 <___vfprintf_internal_r+0x2cc>
   13068:	e7000044 	addi	fp,fp,1
   1306c:	21400005 	stb	r5,0(r4)
   13070:	e0bffa1e 	bne	fp,r2,1305c <__alt_data_end+0xffff305c>
   13074:	e6efc83a 	sub	r23,fp,sp
   13078:	d8c00b17 	ldw	r3,44(sp)
   1307c:	4dd1883a 	add	r8,r9,r23
   13080:	922dc83a 	sub	r22,r18,r8
   13084:	18001626 	beq	r3,zero,130e0 <___vfprintf_internal_r+0x338>
   13088:	48000a26 	beq	r9,zero,130b4 <___vfprintf_internal_r+0x30c>
   1308c:	00800b44 	movi	r2,45
   13090:	d8800805 	stb	r2,32(sp)
   13094:	88800117 	ldw	r2,4(r17)
   13098:	01c00044 	movi	r7,1
   1309c:	d9800804 	addi	r6,sp,32
   130a0:	880b883a 	mov	r5,r17
   130a4:	a009883a 	mov	r4,r20
   130a8:	103ee83a 	callr	r2
   130ac:	10004a1e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   130b0:	84000044 	addi	r16,r16,1
   130b4:	0580070e 	bge	zero,r22,130d4 <___vfprintf_internal_r+0x32c>
   130b8:	b00f883a 	mov	r7,r22
   130bc:	01800c04 	movi	r6,48
   130c0:	880b883a 	mov	r5,r17
   130c4:	a009883a 	mov	r4,r20
   130c8:	0012d3c0 	call	12d3c <print_repeat>
   130cc:	1000421e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   130d0:	85a1883a 	add	r16,r16,r22
   130d4:	e02d883a 	mov	r22,fp
   130d8:	bf2fc83a 	sub	r23,r23,fp
   130dc:	00002006 	br	13160 <___vfprintf_internal_r+0x3b8>
   130e0:	0580090e 	bge	zero,r22,13108 <___vfprintf_internal_r+0x360>
   130e4:	b00f883a 	mov	r7,r22
   130e8:	01800804 	movi	r6,32
   130ec:	880b883a 	mov	r5,r17
   130f0:	a009883a 	mov	r4,r20
   130f4:	da401015 	stw	r9,64(sp)
   130f8:	0012d3c0 	call	12d3c <print_repeat>
   130fc:	da401017 	ldw	r9,64(sp)
   13100:	1000351e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   13104:	85a1883a 	add	r16,r16,r22
   13108:	483ff226 	beq	r9,zero,130d4 <__alt_data_end+0xffff30d4>
   1310c:	00800b44 	movi	r2,45
   13110:	d8800805 	stb	r2,32(sp)
   13114:	88800117 	ldw	r2,4(r17)
   13118:	01c00044 	movi	r7,1
   1311c:	d9800804 	addi	r6,sp,32
   13120:	880b883a 	mov	r5,r17
   13124:	a009883a 	mov	r4,r20
   13128:	103ee83a 	callr	r2
   1312c:	10002a1e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   13130:	84000044 	addi	r16,r16,1
   13134:	003fe706 	br	130d4 <__alt_data_end+0xffff30d4>
   13138:	b5bfffc4 	addi	r22,r22,-1
   1313c:	b0800003 	ldbu	r2,0(r22)
   13140:	01c00044 	movi	r7,1
   13144:	d9800804 	addi	r6,sp,32
   13148:	d8800805 	stb	r2,32(sp)
   1314c:	88800117 	ldw	r2,4(r17)
   13150:	880b883a 	mov	r5,r17
   13154:	a009883a 	mov	r4,r20
   13158:	103ee83a 	callr	r2
   1315c:	10001e1e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   13160:	8585c83a 	sub	r2,r16,r22
   13164:	b5c9883a 	add	r4,r22,r23
   13168:	e085883a 	add	r2,fp,r2
   1316c:	013ff216 	blt	zero,r4,13138 <__alt_data_end+0xffff3138>
   13170:	1021883a 	mov	r16,r2
   13174:	dd800d17 	ldw	r22,52(sp)
   13178:	00004406 	br	1328c <___vfprintf_internal_r+0x4e4>
   1317c:	00800044 	movi	r2,1
   13180:	1480080e 	bge	r2,r18,131a4 <___vfprintf_internal_r+0x3fc>
   13184:	95ffffc4 	addi	r23,r18,-1
   13188:	b80f883a 	mov	r7,r23
   1318c:	01800804 	movi	r6,32
   13190:	880b883a 	mov	r5,r17
   13194:	a009883a 	mov	r4,r20
   13198:	0012d3c0 	call	12d3c <print_repeat>
   1319c:	10000e1e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   131a0:	85e1883a 	add	r16,r16,r23
   131a4:	b0800017 	ldw	r2,0(r22)
   131a8:	01c00044 	movi	r7,1
   131ac:	d80d883a 	mov	r6,sp
   131b0:	d8800005 	stb	r2,0(sp)
   131b4:	88800117 	ldw	r2,4(r17)
   131b8:	880b883a 	mov	r5,r17
   131bc:	a009883a 	mov	r4,r20
   131c0:	b5c00104 	addi	r23,r22,4
   131c4:	103ee83a 	callr	r2
   131c8:	1000031e 	bne	r2,zero,131d8 <___vfprintf_internal_r+0x430>
   131cc:	84000044 	addi	r16,r16,1
   131d0:	b82d883a 	mov	r22,r23
   131d4:	00002d06 	br	1328c <___vfprintf_internal_r+0x4e4>
   131d8:	00bfffc4 	movi	r2,-1
   131dc:	00003106 	br	132a4 <___vfprintf_internal_r+0x4fc>
   131e0:	b5c00017 	ldw	r23,0(r22)
   131e4:	b7000104 	addi	fp,r22,4
   131e8:	b809883a 	mov	r4,r23
   131ec:	0012d200 	call	12d20 <strlen>
   131f0:	9091c83a 	sub	r8,r18,r2
   131f4:	102d883a 	mov	r22,r2
   131f8:	0200090e 	bge	zero,r8,13220 <___vfprintf_internal_r+0x478>
   131fc:	400f883a 	mov	r7,r8
   13200:	01800804 	movi	r6,32
   13204:	880b883a 	mov	r5,r17
   13208:	a009883a 	mov	r4,r20
   1320c:	da001015 	stw	r8,64(sp)
   13210:	0012d3c0 	call	12d3c <print_repeat>
   13214:	da001017 	ldw	r8,64(sp)
   13218:	103fef1e 	bne	r2,zero,131d8 <__alt_data_end+0xffff31d8>
   1321c:	8221883a 	add	r16,r16,r8
   13220:	88800117 	ldw	r2,4(r17)
   13224:	b00f883a 	mov	r7,r22
   13228:	b80d883a 	mov	r6,r23
   1322c:	880b883a 	mov	r5,r17
   13230:	a009883a 	mov	r4,r20
   13234:	103ee83a 	callr	r2
   13238:	103fe71e 	bne	r2,zero,131d8 <__alt_data_end+0xffff31d8>
   1323c:	85a1883a 	add	r16,r16,r22
   13240:	e02d883a 	mov	r22,fp
   13244:	00001106 	br	1328c <___vfprintf_internal_r+0x4e4>
   13248:	00c00044 	movi	r3,1
   1324c:	04ffffc4 	movi	r19,-1
   13250:	d8000e15 	stw	zero,56(sp)
   13254:	d8c00a15 	stw	r3,40(sp)
   13258:	05400284 	movi	r21,10
   1325c:	9825883a 	mov	r18,r19
   13260:	d8000c15 	stw	zero,48(sp)
   13264:	d8000b15 	stw	zero,44(sp)
   13268:	182f883a 	mov	r23,r3
   1326c:	00000806 	br	13290 <___vfprintf_internal_r+0x4e8>
   13270:	ddc00b15 	stw	r23,44(sp)
   13274:	05c00084 	movi	r23,2
   13278:	00000506 	br	13290 <___vfprintf_internal_r+0x4e8>
   1327c:	00c00044 	movi	r3,1
   13280:	d8c00c15 	stw	r3,48(sp)
   13284:	05c000c4 	movi	r23,3
   13288:	00000106 	br	13290 <___vfprintf_internal_r+0x4e8>
   1328c:	002f883a 	mov	r23,zero
   13290:	d8c00f17 	ldw	r3,60(sp)
   13294:	18c00044 	addi	r3,r3,1
   13298:	d8c00f15 	stw	r3,60(sp)
   1329c:	003edc06 	br	12e10 <__alt_data_end+0xffff2e10>
   132a0:	8005883a 	mov	r2,r16
   132a4:	dfc01a17 	ldw	ra,104(sp)
   132a8:	df001917 	ldw	fp,100(sp)
   132ac:	ddc01817 	ldw	r23,96(sp)
   132b0:	dd801717 	ldw	r22,92(sp)
   132b4:	dd401617 	ldw	r21,88(sp)
   132b8:	dd001517 	ldw	r20,84(sp)
   132bc:	dcc01417 	ldw	r19,80(sp)
   132c0:	dc801317 	ldw	r18,76(sp)
   132c4:	dc401217 	ldw	r17,72(sp)
   132c8:	dc001117 	ldw	r16,68(sp)
   132cc:	dec01b04 	addi	sp,sp,108
   132d0:	f800283a 	ret

000132d4 <__vfprintf_internal>:
   132d4:	00800074 	movhi	r2,1
   132d8:	108e4004 	addi	r2,r2,14592
   132dc:	300f883a 	mov	r7,r6
   132e0:	280d883a 	mov	r6,r5
   132e4:	200b883a 	mov	r5,r4
   132e8:	11000017 	ldw	r4,0(r2)
   132ec:	0012da81 	jmpi	12da8 <___vfprintf_internal_r>

000132f0 <__sfvwrite_small_dev>:
   132f0:	2880000b 	ldhu	r2,0(r5)
   132f4:	1080020c 	andi	r2,r2,8
   132f8:	10002126 	beq	r2,zero,13380 <__sfvwrite_small_dev+0x90>
   132fc:	2880008f 	ldh	r2,2(r5)
   13300:	defffa04 	addi	sp,sp,-24
   13304:	dc000015 	stw	r16,0(sp)
   13308:	dfc00515 	stw	ra,20(sp)
   1330c:	dd000415 	stw	r20,16(sp)
   13310:	dcc00315 	stw	r19,12(sp)
   13314:	dc800215 	stw	r18,8(sp)
   13318:	dc400115 	stw	r17,4(sp)
   1331c:	2821883a 	mov	r16,r5
   13320:	10001216 	blt	r2,zero,1336c <__sfvwrite_small_dev+0x7c>
   13324:	2027883a 	mov	r19,r4
   13328:	3025883a 	mov	r18,r6
   1332c:	3823883a 	mov	r17,r7
   13330:	05010004 	movi	r20,1024
   13334:	04400b0e 	bge	zero,r17,13364 <__sfvwrite_small_dev+0x74>
   13338:	880f883a 	mov	r7,r17
   1333c:	a440010e 	bge	r20,r17,13344 <__sfvwrite_small_dev+0x54>
   13340:	01c10004 	movi	r7,1024
   13344:	8140008f 	ldh	r5,2(r16)
   13348:	900d883a 	mov	r6,r18
   1334c:	9809883a 	mov	r4,r19
   13350:	00133a80 	call	133a8 <_write_r>
   13354:	0080050e 	bge	zero,r2,1336c <__sfvwrite_small_dev+0x7c>
   13358:	88a3c83a 	sub	r17,r17,r2
   1335c:	90a5883a 	add	r18,r18,r2
   13360:	003ff406 	br	13334 <__alt_data_end+0xffff3334>
   13364:	0005883a 	mov	r2,zero
   13368:	00000706 	br	13388 <__sfvwrite_small_dev+0x98>
   1336c:	8080000b 	ldhu	r2,0(r16)
   13370:	10801014 	ori	r2,r2,64
   13374:	8080000d 	sth	r2,0(r16)
   13378:	00bfffc4 	movi	r2,-1
   1337c:	00000206 	br	13388 <__sfvwrite_small_dev+0x98>
   13380:	00bfffc4 	movi	r2,-1
   13384:	f800283a 	ret
   13388:	dfc00517 	ldw	ra,20(sp)
   1338c:	dd000417 	ldw	r20,16(sp)
   13390:	dcc00317 	ldw	r19,12(sp)
   13394:	dc800217 	ldw	r18,8(sp)
   13398:	dc400117 	ldw	r17,4(sp)
   1339c:	dc000017 	ldw	r16,0(sp)
   133a0:	dec00604 	addi	sp,sp,24
   133a4:	f800283a 	ret

000133a8 <_write_r>:
   133a8:	defffd04 	addi	sp,sp,-12
   133ac:	dc000015 	stw	r16,0(sp)
   133b0:	04000074 	movhi	r16,1
   133b4:	dc400115 	stw	r17,4(sp)
   133b8:	840e8804 	addi	r16,r16,14880
   133bc:	2023883a 	mov	r17,r4
   133c0:	2809883a 	mov	r4,r5
   133c4:	300b883a 	mov	r5,r6
   133c8:	380d883a 	mov	r6,r7
   133cc:	dfc00215 	stw	ra,8(sp)
   133d0:	80000015 	stw	zero,0(r16)
   133d4:	00135480 	call	13548 <write>
   133d8:	00ffffc4 	movi	r3,-1
   133dc:	10c0031e 	bne	r2,r3,133ec <_write_r+0x44>
   133e0:	80c00017 	ldw	r3,0(r16)
   133e4:	18000126 	beq	r3,zero,133ec <_write_r+0x44>
   133e8:	88c00015 	stw	r3,0(r17)
   133ec:	dfc00217 	ldw	ra,8(sp)
   133f0:	dc400117 	ldw	r17,4(sp)
   133f4:	dc000017 	ldw	r16,0(sp)
   133f8:	dec00304 	addi	sp,sp,12
   133fc:	f800283a 	ret

00013400 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13400:	deffff04 	addi	sp,sp,-4
   13404:	01000074 	movhi	r4,1
   13408:	01400074 	movhi	r5,1
   1340c:	dfc00015 	stw	ra,0(sp)
   13410:	210e0704 	addi	r4,r4,14364
   13414:	294e4304 	addi	r5,r5,14604

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13418:	2140061e 	bne	r4,r5,13434 <alt_load+0x34>
   1341c:	01000074 	movhi	r4,1
   13420:	01400074 	movhi	r5,1
   13424:	21000804 	addi	r4,r4,32
   13428:	29400804 	addi	r5,r5,32
   1342c:	2140121e 	bne	r4,r5,13478 <alt_load+0x78>
   13430:	00000b06 	br	13460 <alt_load+0x60>
   13434:	00c00074 	movhi	r3,1
   13438:	18ce4304 	addi	r3,r3,14604
   1343c:	1907c83a 	sub	r3,r3,r4
   13440:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13444:	10fff526 	beq	r2,r3,1341c <__alt_data_end+0xffff341c>
    {
      *to++ = *from++;
   13448:	114f883a 	add	r7,r2,r5
   1344c:	39c00017 	ldw	r7,0(r7)
   13450:	110d883a 	add	r6,r2,r4
   13454:	10800104 	addi	r2,r2,4
   13458:	31c00015 	stw	r7,0(r6)
   1345c:	003ff906 	br	13444 <__alt_data_end+0xffff3444>
   13460:	01000074 	movhi	r4,1
   13464:	01400074 	movhi	r5,1
   13468:	210da604 	addi	r4,r4,13976
   1346c:	294da604 	addi	r5,r5,13976

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   13470:	2140101e 	bne	r4,r5,134b4 <alt_load+0xb4>
   13474:	00000b06 	br	134a4 <alt_load+0xa4>
   13478:	00c00074 	movhi	r3,1
   1347c:	18c00804 	addi	r3,r3,32
   13480:	1907c83a 	sub	r3,r3,r4
   13484:	0005883a 	mov	r2,zero
  {
    while( to != end )
   13488:	10fff526 	beq	r2,r3,13460 <__alt_data_end+0xffff3460>
    {
      *to++ = *from++;
   1348c:	114f883a 	add	r7,r2,r5
   13490:	39c00017 	ldw	r7,0(r7)
   13494:	110d883a 	add	r6,r2,r4
   13498:	10800104 	addi	r2,r2,4
   1349c:	31c00015 	stw	r7,0(r6)
   134a0:	003ff906 	br	13488 <__alt_data_end+0xffff3488>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   134a4:	00136880 	call	13688 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   134a8:	dfc00017 	ldw	ra,0(sp)
   134ac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   134b0:	001368c1 	jmpi	1368c <alt_icache_flush_all>
   134b4:	00c00074 	movhi	r3,1
   134b8:	18ce0704 	addi	r3,r3,14364
   134bc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   134c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   134c4:	18bff726 	beq	r3,r2,134a4 <__alt_data_end+0xffff34a4>
    {
      *to++ = *from++;
   134c8:	114f883a 	add	r7,r2,r5
   134cc:	39c00017 	ldw	r7,0(r7)
   134d0:	110d883a 	add	r6,r2,r4
   134d4:	10800104 	addi	r2,r2,4
   134d8:	31c00015 	stw	r7,0(r6)
   134dc:	003ff906 	br	134c4 <__alt_data_end+0xffff34c4>

000134e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134e0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134e4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134e8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134ec:	00135a80 	call	135a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   134f0:	00135c80 	call	135c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   134f4:	d1a04a17 	ldw	r6,-32472(gp)
   134f8:	d1604b17 	ldw	r5,-32468(gp)
   134fc:	d1204c17 	ldw	r4,-32464(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   13500:	dfc00017 	ldw	ra,0(sp)
   13504:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   13508:	00105381 	jmpi	10538 <main>

0001350c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1350c:	defffe04 	addi	sp,sp,-8
   13510:	dc000015 	stw	r16,0(sp)
   13514:	dfc00115 	stw	ra,4(sp)
   13518:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1351c:	0012d200 	call	12d20 <strlen>
   13520:	01000074 	movhi	r4,1
   13524:	000f883a 	mov	r7,zero
   13528:	100d883a 	mov	r6,r2
   1352c:	800b883a 	mov	r5,r16
   13530:	210e4104 	addi	r4,r4,14596
#else
    return fputs(str, stdout);
#endif
#endif
}
   13534:	dfc00117 	ldw	ra,4(sp)
   13538:	dc000017 	ldw	r16,0(sp)
   1353c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   13540:	00135cc1 	jmpi	135cc <altera_avalon_jtag_uart_write>

00013544 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   13544:	00136001 	jmpi	13600 <alt_busy_sleep>

00013548 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   13548:	00800044 	movi	r2,1
   1354c:	20800226 	beq	r4,r2,13558 <write+0x10>
   13550:	00800084 	movi	r2,2
   13554:	2080041e 	bne	r4,r2,13568 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   13558:	01000074 	movhi	r4,1
   1355c:	000f883a 	mov	r7,zero
   13560:	210e4104 	addi	r4,r4,14596
   13564:	00135cc1 	jmpi	135cc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   13568:	d0a00317 	ldw	r2,-32756(gp)
   1356c:	10000926 	beq	r2,zero,13594 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13570:	deffff04 	addi	sp,sp,-4
   13574:	dfc00015 	stw	ra,0(sp)
   13578:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   1357c:	00c01444 	movi	r3,81
   13580:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   13584:	00bfffc4 	movi	r2,-1
   13588:	dfc00017 	ldw	ra,0(sp)
   1358c:	dec00104 	addi	sp,sp,4
   13590:	f800283a 	ret
   13594:	d0a04904 	addi	r2,gp,-32476
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   13598:	00c01444 	movi	r3,81
   1359c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   135a0:	00bfffc4 	movi	r2,-1
   135a4:	f800283a 	ret

000135a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   135a8:	deffff04 	addi	sp,sp,-4
   135ac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   135b0:	00136900 	call	13690 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   135b4:	00800044 	movi	r2,1
   135b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   135bc:	dfc00017 	ldw	ra,0(sp)
   135c0:	dec00104 	addi	sp,sp,4
   135c4:	f800283a 	ret

000135c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   135c8:	f800283a 	ret

000135cc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   135cc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   135d0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   135d4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   135d8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   135dc:	2980072e 	bgeu	r5,r6,135fc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   135e0:	38c00037 	ldwio	r3,0(r7)
   135e4:	18ffffec 	andhi	r3,r3,65535
   135e8:	183ffc26 	beq	r3,zero,135dc <__alt_data_end+0xffff35dc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   135ec:	28c00007 	ldb	r3,0(r5)
   135f0:	20c00035 	stwio	r3,0(r4)
   135f4:	29400044 	addi	r5,r5,1
   135f8:	003ff806 	br	135dc <__alt_data_end+0xffff35dc>

  return count;
}
   135fc:	f800283a 	ret

00013600 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13600:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   13604:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13608:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1360c:	dc000015 	stw	r16,0(sp)
   13610:	dfc00115 	stw	ra,4(sp)
   13614:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   13618:	0012b200 	call	12b20 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1361c:	10001026 	beq	r2,zero,13660 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   13620:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13624:	013999b4 	movhi	r4,58982
   13628:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1362c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13630:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   13634:	297fffc4 	addi	r5,r5,-1
   13638:	283ffe1e 	bne	r5,zero,13634 <__alt_data_end+0xffff3634>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1363c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   13640:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   13644:	18bffb16 	blt	r3,r2,13634 <__alt_data_end+0xffff3634>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13648:	01400144 	movi	r5,5
   1364c:	8009883a 	mov	r4,r16
   13650:	0012bdc0 	call	12bdc <__mulsi3>
   13654:	10bfffc4 	addi	r2,r2,-1
   13658:	103ffe1e 	bne	r2,zero,13654 <__alt_data_end+0xffff3654>
   1365c:	00000506 	br	13674 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   13660:	01400144 	movi	r5,5
   13664:	8009883a 	mov	r4,r16
   13668:	0012bdc0 	call	12bdc <__mulsi3>
   1366c:	10bfffc4 	addi	r2,r2,-1
   13670:	00bffe16 	blt	zero,r2,1366c <__alt_data_end+0xffff366c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   13674:	0005883a 	mov	r2,zero
   13678:	dfc00117 	ldw	ra,4(sp)
   1367c:	dc000017 	ldw	r16,0(sp)
   13680:	dec00204 	addi	sp,sp,8
   13684:	f800283a 	ret

00013688 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13688:	f800283a 	ret

0001368c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1368c:	f800283a 	ret

00013690 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   13690:	000170fa 	wrctl	ienable,zero
   13694:	f800283a 	ret
